{"version":3,"sources":["matrix/src/MatrixInput.js"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","blockTypes","blockTypesByHandle","inputNamePrefix","showingAddBlockMenu","addBlockBtnGroupWidth","addBlockBtnContainerWidth","$blockContainer","$addBlockBtnContainer","$addBlockBtnGroup","$addBlockBtnGroupBtns","blockSort","totalNewBlocks","blockSelect","id","settings","i","collapsedBlocks","inputIdPrefix","this","formatInputId","maxBlocks","$container","setSettings","defaults","children","$addBlockMenuBtn","setNewBlockBtn","data","handle","getCollapsedBlockIds","blockType","DragSort","$blocks","$targetItem","hasClass","axis","filter","proxy","getSelectedItems","resetItemOrder","Select","magnetStrength","helperLagBase","helperOpacity","onSortChange","blockId","multi","vertical","checkboxMode","length","MatrixBlock","$block","newMatch","match","block","inArray","option","collapse","updateAddBlockBtn","ev","addListener","type","ready","MenuBtn","addBlock","width","requestAnimationFrame","addClass","removeClass","navigator","userAgent","indexOf","css","$items","canAddMoreBlocks","$actionMenu","eq","find","parent","getBlockTypeByHandle","$insertBefore","html","name","t","staticBlocks","getParsedBlockHtml","getHiddenBlockCss","velocity","draftEditor","addItems","pause","insertBefore","appendTo","window","bodyHtml","footHtml","$fieldsContainer","trigger","collapseSelectedBlocks","callOnSelectedBlocks","expandSelectedBlocks","append","initUiElements","disableSelectedBlocks","enableSelectedBlocks","scrollContainerToElement","resume","marginBottom","replace","filterArray","localStorage","deleteSelectedBlocks","fn","rememberCollapsedBlockId","$selectedItems","Storage","opacity","outerHeight","collapsedBlocksIndex","RegExp","placeholderKey","$titlebar","$previewContainer","$collapsedInput","collapsed","systemUid","matrix","collapsedBlockStorageKey","split","menuBtn","$menuBtn","menu","ids","join","on","push","hasAttr","setCollapsedBlockIds","preventDefault","toggle","splice","previewHtml","$fields","$inputs","inputPreviewText","init","value","$input","$maybeLightswitchContainer","isNew","substr","onOptionSelect","trim","_handleTitleBarClick","show","j","text","collapsedContainerHeight","height","expandedContainerHeight","displayValue","animate","duration","forgetCollapsedBlockId","hide","val","$option","expand","batchAction","display","setTimeout","enable","disable","confirm","onMenuOptionSelect","totalSelected","isSelected","selfDestruct","remove","jQuery"],"mappings":"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","file":"MatrixInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix input class\n     */\n    Craft.MatrixInput = Garnish.Base.extend(\n        {\n            id: null,\n            blockTypes: null,\n            blockTypesByHandle: null,\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            showingAddBlockMenu: false,\n            addBlockBtnGroupWidth: null,\n            addBlockBtnContainerWidth: null,\n\n            $container: null,\n            $blockContainer: null,\n            $addBlockBtnContainer: null,\n            $addBlockBtnGroup: null,\n            $addBlockBtnGroupBtns: null,\n\n            blockSort: null,\n            blockSelect: null,\n            totalNewBlocks: 0,\n\n            init: function(id, blockTypes, inputNamePrefix, settings) {\n                this.id = id;\n                this.blockTypes = blockTypes;\n                this.inputNamePrefix = inputNamePrefix;\n                this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n                // see if settings was actually set to the maxBlocks value\n                if (typeof settings === 'number') {\n                    settings = {maxBlocks: settings};\n                }\n                this.setSettings(settings, Craft.MatrixInput.defaults);\n\n                this.$container = $('#' + this.id);\n                this.$blockContainer = this.$container.children('.blocks');\n                this.$addBlockBtnContainer = this.$container.children('.buttons');\n                this.$addBlockBtnGroup = this.$addBlockBtnContainer.children('.btngroup');\n                this.$addBlockBtnGroupBtns = this.$addBlockBtnGroup.children('.btn');\n                this.$addBlockMenuBtn = this.$addBlockBtnContainer.children('.menubtn');\n\n                this.$container.data('matrix', this);\n\n                this.setNewBlockBtn();\n\n                this.blockTypesByHandle = {};\n\n                var i;\n\n                for (i = 0; i < this.blockTypes.length; i++) {\n                    var blockType = this.blockTypes[i];\n                    this.blockTypesByHandle[blockType.handle] = blockType;\n                }\n\n                var $blocks = this.$blockContainer.children(),\n                    collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                this.blockSort = new Garnish.DragSort($blocks, {\n                    handle: '> .actions > .move',\n                    axis: 'y',\n                    filter: $.proxy(function() {\n                        // Only return all the selected items if the target item is selected\n                        if (this.blockSort.$targetItem.hasClass('sel')) {\n                            return this.blockSelect.getSelectedItems();\n                        }\n                        else {\n                            return this.blockSort.$targetItem;\n                        }\n                    }, this),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    helperOpacity: 0.9,\n                    onSortChange: $.proxy(function() {\n                        this.blockSelect.resetItemOrder();\n                    }, this)\n                });\n\n                this.blockSelect = new Garnish.Select(this.$blockContainer, $blocks, {\n                    multi: true,\n                    vertical: true,\n                    handle: '> .checkbox, > .titlebar',\n                    checkboxMode: true\n                });\n\n                for (i = 0; i < $blocks.length; i++) {\n                    var $block = $($blocks[i]),\n                        blockId = $block.data('id');\n\n                    // Is this a new block?\n                    var newMatch = (typeof blockId === 'string' && blockId.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewBlocks) {\n                        this.totalNewBlocks = parseInt(newMatch[1]);\n                    }\n\n                    var block = new MatrixBlock(this, $block);\n\n                    if (block.id && $.inArray('' + block.id, collapsedBlocks) !== -1) {\n                        block.collapse();\n                    }\n                }\n\n                this.addListener(this.$addBlockBtnGroupBtns, 'click', function(ev) {\n                    var type = $(ev.target).data('type');\n                    this.addBlock(type);\n                });\n\n                new Garnish.MenuBtn(this.$addBlockMenuBtn,\n                    {\n                        onOptionSelect: $.proxy(function(option) {\n                            var type = $(option).data('type');\n                            this.addBlock(type);\n                        }, this)\n                    });\n\n                this.updateAddBlockBtn();\n\n                this.addListener(this.$container, 'resize', 'setNewBlockBtn');\n                Garnish.$doc.ready($.proxy(this, 'setNewBlockBtn'));\n\n                this.trigger('afterInit');\n            },\n\n            setNewBlockBtn: function() {\n                // Do we know what the button group width is yet?\n                if (!this.addBlockBtnGroupWidth) {\n                    this.addBlockBtnGroupWidth = this.$addBlockBtnGroup.width();\n\n                    if (!this.addBlockBtnGroupWidth) {\n                        return;\n                    }\n                }\n\n                // Only check if the container width has resized\n                if (this.addBlockBtnContainerWidth !== (this.addBlockBtnContainerWidth = this.$addBlockBtnContainer.width())) {\n                    if (this.addBlockBtnGroupWidth > this.addBlockBtnContainerWidth) {\n                        if (!this.showingAddBlockMenu) {\n                            this.$addBlockBtnGroup.addClass('hidden');\n                            this.$addBlockMenuBtn.removeClass('hidden');\n                            this.showingAddBlockMenu = true;\n                        }\n                    }\n                    else {\n                        if (this.showingAddBlockMenu) {\n                            this.$addBlockMenuBtn.addClass('hidden');\n                            this.$addBlockBtnGroup.removeClass('hidden');\n                            this.showingAddBlockMenu = false;\n\n                            // Because Safari is awesome\n                            if (navigator.userAgent.indexOf('Safari') !== -1) {\n                                Garnish.requestAnimationFrame($.proxy(function() {\n                                    this.$addBlockBtnGroup.css('opacity', 0.99);\n\n                                    Garnish.requestAnimationFrame($.proxy(function() {\n                                        this.$addBlockBtnGroup.css('opacity', '');\n                                    }, this));\n                                }, this));\n                            }\n                        }\n                    }\n                }\n            },\n\n            canAddMoreBlocks: function() {\n                return (!this.maxBlocks || this.$blockContainer.children().length < this.maxBlocks);\n            },\n\n            updateAddBlockBtn: function() {\n                var i, block;\n\n                if (this.canAddMoreBlocks()) {\n                    this.$addBlockBtnGroup.removeClass('disabled');\n                    this.$addBlockMenuBtn.removeClass('disabled');\n\n                    for (i = 0; i < this.blockSelect.$items.length; i++) {\n                        block = this.blockSelect.$items.eq(i).data('block');\n\n                        if (block) {\n                            block.$actionMenu.find('a[data-action=add]').parent().removeClass('disabled');\n                        }\n                    }\n                }\n                else {\n                    this.$addBlockBtnGroup.addClass('disabled');\n                    this.$addBlockMenuBtn.addClass('disabled');\n\n                    for (i = 0; i < this.blockSelect.$items.length; i++) {\n                        block = this.blockSelect.$items.eq(i).data('block');\n\n                        if (block) {\n                            block.$actionMenu.find('a[data-action=add]').parent().addClass('disabled');\n                        }\n                    }\n                }\n            },\n\n            addBlock: function(type, $insertBefore) {\n                if (!this.canAddMoreBlocks()) {\n                    return;\n                }\n\n                this.totalNewBlocks++;\n\n                var id = 'new' + this.totalNewBlocks;\n\n                var html = `\n<div class=\"matrixblock\" data-id=\"${id}\" data-type=\"${type}\">\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[sortOrder][]\" value=\"${id}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][type]\" value=\"${type}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][enabled]\" value=\"1\"/>\n  <div class=\"titlebar\">\n    <div class=\"blocktype\">${this.getBlockTypeByHandle(type).name}</div>\n    <div class=\"preview\"></div>\n  </div>\n  <div class=\"checkbox\" title=\"${Craft.t('app', 'Select')}\"></div>\n  <div class=\"actions\">\n    <div class=\"status off\" title=\"${Craft.t('app', 'Disabled')}\"></div>\n    <a class=\"settings icon menubtn\" title=\"${Craft.t('app', 'Actions')}\" role=\"button\"></a> \n    <div class=\"menu\">\n      <ul class=\"padded\">\n        <li><a data-icon=\"collapse\" data-action=\"collapse\">${Craft.t('app', 'Collapse')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"expand\" data-action=\"expand\">${Craft.t('app', 'Expand')}</a></li>\n        <li><a data-icon=\"disabled\" data-action=\"disable\">${Craft.t('app', 'Disable')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"enabled\" data-action=\"enable\">${Craft.t('app', 'Enable')}</a></li>\n      </ul>`;\n\n                if (!this.settings.staticBlocks) {\n                    html += `\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">\n        <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('app', 'Delete')}</a></li>\n      </ul>\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">`;\n\n                    for (var i = 0; i < this.blockTypes.length; i++) {\n                        var blockType = this.blockTypes[i];\n                        html += `\n        <li><a data-icon=\"plus\" data-action=\"add\" data-type=\"${blockType.handle}\">${Craft.t('app', 'Add {type} above', {type: blockType.name})}</a></li>`;\n                    }\n\n                    html += `\n      </ul>`\n                }\n\n                html += `\n    </div>\n    <a class=\"move icon\" title=\"${Craft.t('app', 'Reorder')}\" role=\"button\"></a>\n  </div>\n</div>`;\n\n                var $block = $(html);\n\n                // Pause the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.pause();\n                }\n\n                if ($insertBefore) {\n                    $block.insertBefore($insertBefore);\n                }\n                else {\n                    $block.appendTo(this.$blockContainer);\n                }\n\n                var $fieldsContainer = $('<div class=\"fields\"/>').appendTo($block),\n                    bodyHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].bodyHtml, id),\n                    footHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].footHtml, id);\n\n                $(bodyHtml).appendTo($fieldsContainer);\n\n                this.trigger('blockAdded', {\n                    $block: $block\n                });\n\n                // Animate the block into position\n                $block.css(this.getHiddenBlockCss($block)).velocity({\n                    opacity: 1,\n                    'margin-bottom': 10\n                }, 'fast', $.proxy(function() {\n                    $block.css('margin-bottom', '');\n                    Garnish.$bod.append(footHtml);\n                    Craft.initUiElements($fieldsContainer);\n                    new MatrixBlock(this, $block);\n                    this.blockSort.addItems($block);\n                    this.blockSelect.addItems($block);\n                    this.updateAddBlockBtn();\n\n                    Garnish.requestAnimationFrame(function() {\n                        // Scroll to the block\n                        Garnish.scrollContainerToElement($block);\n\n                        // Focus on the first text input\n                        $block.find('.text,[contenteditable]').first().trigger('focus');\n\n                        // Resume the draft editor\n                        if (window.draftEditor) {\n                            window.draftEditor.resume();\n                        }\n                    });\n                }, this));\n            },\n\n            getBlockTypeByHandle: function(handle) {\n                for (var i = 0; i < this.blockTypes.length; i++) {\n                    if (this.blockTypes[i].handle === handle) {\n                        return this.blockTypes[i];\n                    }\n                }\n            },\n\n            collapseSelectedBlocks: function() {\n                this.callOnSelectedBlocks('collapse');\n            },\n\n            expandSelectedBlocks: function() {\n                this.callOnSelectedBlocks('expand');\n            },\n\n            disableSelectedBlocks: function() {\n                this.callOnSelectedBlocks('disable');\n            },\n\n            enableSelectedBlocks: function() {\n                this.callOnSelectedBlocks('enable');\n            },\n\n            deleteSelectedBlocks: function() {\n                this.callOnSelectedBlocks('selfDestruct');\n            },\n\n            callOnSelectedBlocks: function(fn) {\n                for (var i = 0; i < this.blockSelect.$selectedItems.length; i++) {\n                    this.blockSelect.$selectedItems.eq(i).data('block')[fn]();\n                }\n            },\n\n            getHiddenBlockCss: function($block) {\n                return {\n                    opacity: 0,\n                    marginBottom: -($block.outerHeight())\n                };\n            },\n\n            getParsedBlockHtml: function(html, id) {\n                if (typeof html === 'string') {\n                    return html.replace(new RegExp(`__BLOCK_${this.settings.placeholderKey}__`, 'g'), id);\n                }\n                else {\n                    return '';\n                }\n            },\n\n            get maxBlocks() {\n                return this.settings.maxBlocks;\n            },\n        },\n        {\n            defaults: {\n                placeholderKey: null,\n                maxBlocks: null,\n                staticBlocks: false,\n            },\n\n            collapsedBlockStorageKey: 'Craft-' + Craft.systemUid + '.MatrixInput.collapsedBlocks',\n\n            getCollapsedBlockIds: function() {\n                if (typeof localStorage[Craft.MatrixInput.collapsedBlockStorageKey] === 'string') {\n                    return Craft.filterArray(localStorage[Craft.MatrixInput.collapsedBlockStorageKey].split(','));\n                }\n                else {\n                    return [];\n                }\n            },\n\n            setCollapsedBlockIds: function(ids) {\n                localStorage[Craft.MatrixInput.collapsedBlockStorageKey] = ids.join(',');\n            },\n\n            rememberCollapsedBlockId: function(id) {\n                if (typeof Storage !== 'undefined') {\n                    var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                    if ($.inArray('' + id, collapsedBlocks) === -1) {\n                        collapsedBlocks.push(id);\n                        Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                    }\n                }\n            },\n\n            forgetCollapsedBlockId: function(id) {\n                if (typeof Storage !== 'undefined') {\n                    var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                        collapsedBlocksIndex = $.inArray('' + id, collapsedBlocks);\n\n                    if (collapsedBlocksIndex !== -1) {\n                        collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                        Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                    }\n                }\n            }\n        });\n\n\n    var MatrixBlock = Garnish.Base.extend(\n        {\n            matrix: null,\n            $container: null,\n            $titlebar: null,\n            $fieldsContainer: null,\n            $previewContainer: null,\n            $actionMenu: null,\n            $collapsedInput: null,\n\n            isNew: null,\n            id: null,\n\n            collapsed: false,\n\n            init: function(matrix, $container) {\n                this.matrix = matrix;\n                this.$container = $container;\n                this.$titlebar = $container.children('.titlebar');\n                this.$previewContainer = this.$titlebar.children('.preview');\n                this.$fieldsContainer = $container.children('.fields');\n\n                this.$container.data('block', this);\n\n                this.id = this.$container.data('id');\n                this.isNew = (!this.id || (typeof this.id === 'string' && this.id.substr(0, 3) === 'new'));\n\n                var $menuBtn = this.$container.find('> .actions > .settings'),\n                    menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                this.$actionMenu = menuBtn.menu.$container;\n\n                menuBtn.menu.settings.onOptionSelect = $.proxy(this, 'onMenuOptionSelect');\n\n                menuBtn.menu.on('show', () => {\n                    this.$container.addClass('active');\n                });\n                menuBtn.menu.on('hide', () => {\n                    this.$container.removeClass('active');\n                });\n\n                // Was this block already collapsed?\n                if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n                    this.collapse();\n                }\n\n                this._handleTitleBarClick = function(ev) {\n                    ev.preventDefault();\n                    this.toggle();\n                };\n\n                this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n            },\n\n            toggle: function() {\n                if (this.collapsed) {\n                    this.expand();\n                }\n                else {\n                    this.collapse(true);\n                }\n            },\n\n            collapse: function(animate) {\n                if (this.collapsed) {\n                    return;\n                }\n\n                this.$container.addClass('collapsed');\n\n                var previewHtml = '',\n                    $fields = this.$fieldsContainer.children().children();\n\n                for (var i = 0; i < $fields.length; i++) {\n                    var $field = $($fields[i]),\n                        $inputs = $field.children('.input').find('select,input[type!=\"hidden\"],textarea,.label'),\n                        inputPreviewText = '';\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $($inputs[j]),\n                            value;\n\n                        if ($input.hasClass('label')) {\n                            var $maybeLightswitchContainer = $input.parent().parent();\n\n                            if ($maybeLightswitchContainer.hasClass('lightswitch') && (\n                                    ($maybeLightswitchContainer.hasClass('on') && $input.hasClass('off')) ||\n                                    (!$maybeLightswitchContainer.hasClass('on') && $input.hasClass('on'))\n                                )) {\n                                continue;\n                            }\n\n                            value = $input.text();\n                        }\n                        else {\n                            value = Craft.getText(Garnish.getInputPostVal($input));\n                        }\n\n                        if (value instanceof Array) {\n                            value = value.join(', ');\n                        }\n\n                        if (value) {\n                            value = Craft.trim(value);\n\n                            if (value) {\n                                if (inputPreviewText) {\n                                    inputPreviewText += ', ';\n                                }\n\n                                inputPreviewText += value;\n                            }\n                        }\n                    }\n\n                    if (inputPreviewText) {\n                        previewHtml += (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n                    }\n                }\n\n                this.$previewContainer.html(previewHtml);\n\n                this.$fieldsContainer.velocity('stop');\n                this.$container.velocity('stop');\n\n                if (animate) {\n                    this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n                    this.$container.velocity({height: 16}, 'fast');\n                }\n                else {\n                    this.$previewContainer.show();\n                    this.$fieldsContainer.hide();\n                    this.$container.css({height: 16});\n                }\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=collapse]:first').parent().addClass('hidden');\n                    this.$actionMenu.find('a[data-action=expand]:first').parent().removeClass('hidden');\n                }, this), 200);\n\n                // Remember that?\n                if (!this.isNew) {\n                    Craft.MatrixInput.rememberCollapsedBlockId(this.id);\n                }\n                else {\n                    if (!this.$collapsedInput) {\n                        this.$collapsedInput = $('<input type=\"hidden\" name=\"' + this.matrix.inputNamePrefix + '[blocks][' + this.id + '][collapsed]\" value=\"1\"/>').appendTo(this.$container);\n                    }\n                    else {\n                        this.$collapsedInput.val('1');\n                    }\n                }\n\n                this.collapsed = true;\n            },\n\n            expand: function() {\n                if (!this.collapsed) {\n                    return;\n                }\n\n                this.$container.removeClass('collapsed');\n\n                this.$fieldsContainer.velocity('stop');\n                this.$container.velocity('stop');\n\n                var collapsedContainerHeight = this.$container.height();\n                this.$container.height('auto');\n                this.$fieldsContainer.show();\n                var expandedContainerHeight = this.$container.height();\n                var displayValue = this.$fieldsContainer.css('display') || 'block';\n                this.$container.height(collapsedContainerHeight);\n                this.$fieldsContainer.hide().velocity('fadeIn', {duration: 'fast', display: displayValue});\n                this.$container.velocity({height: expandedContainerHeight}, 'fast', $.proxy(function() {\n                    this.$previewContainer.html('');\n                    this.$container.height('auto');\n                }, this));\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=collapse]:first').parent().removeClass('hidden');\n                    this.$actionMenu.find('a[data-action=expand]:first').parent().addClass('hidden');\n                }, this), 200);\n\n                // Remember that?\n                if (!this.isNew && typeof Storage !== 'undefined') {\n                    var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                        collapsedBlocksIndex = $.inArray('' + this.id, collapsedBlocks);\n\n                    if (collapsedBlocksIndex !== -1) {\n                        collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                        Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                    }\n                }\n\n                if (!this.isNew) {\n                    Craft.MatrixInput.forgetCollapsedBlockId(this.id);\n                }\n                else if (this.$collapsedInput) {\n                    this.$collapsedInput.val('');\n                }\n\n                this.collapsed = false;\n            },\n\n            disable: function() {\n                this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n                this.$container.addClass('disabled');\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=disable]:first').parent().addClass('hidden');\n                    this.$actionMenu.find('a[data-action=enable]:first').parent().removeClass('hidden');\n                }, this), 200);\n\n                this.collapse(true);\n            },\n\n            enable: function() {\n                this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n                this.$container.removeClass('disabled');\n\n                setTimeout($.proxy(function() {\n                    this.$actionMenu.find('a[data-action=disable]:first').parent().removeClass('hidden');\n                    this.$actionMenu.find('a[data-action=enable]:first').parent().addClass('hidden');\n                }, this), 200);\n            },\n\n            onMenuOptionSelect: function(option) {\n                var batchAction = (this.matrix.blockSelect.totalSelected > 1 && this.matrix.blockSelect.isSelected(this.$container)),\n                    $option = $(option);\n\n                switch ($option.data('action')) {\n                    case 'collapse': {\n                        if (batchAction) {\n                            this.matrix.collapseSelectedBlocks();\n                        }\n                        else {\n                            this.collapse(true);\n                        }\n\n                        break;\n                    }\n\n                    case 'expand': {\n                        if (batchAction) {\n                            this.matrix.expandSelectedBlocks();\n                        }\n                        else {\n                            this.expand();\n                        }\n\n                        break;\n                    }\n\n                    case 'disable': {\n                        if (batchAction) {\n                            this.matrix.disableSelectedBlocks();\n                        }\n                        else {\n                            this.disable();\n                        }\n\n                        break;\n                    }\n\n                    case 'enable': {\n                        if (batchAction) {\n                            this.matrix.enableSelectedBlocks();\n                        }\n                        else {\n                            this.enable();\n                            this.expand();\n                        }\n\n                        break;\n                    }\n\n                    case 'add': {\n                        var type = $option.data('type');\n                        this.matrix.addBlock(type, this.$container);\n                        break;\n                    }\n\n                    case 'delete': {\n                        if (batchAction) {\n                            if (confirm(Craft.t('app', 'Are you sure you want to delete the selected blocks?'))) {\n                                this.matrix.deleteSelectedBlocks();\n                            }\n                        }\n                        else {\n                            this.selfDestruct();\n                        }\n\n                        break;\n                    }\n                }\n            },\n\n            selfDestruct: function() {\n                // Pause the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.pause();\n                }\n\n                this.$container.velocity(this.matrix.getHiddenBlockCss(this.$container), 'fast', $.proxy(function() {\n                    this.$container.remove();\n                    this.matrix.updateAddBlockBtn();\n\n                    // Resume the draft editor\n                    if (window.draftEditor) {\n                        window.draftEditor.resume();\n                    }\n                }, this));\n\n                this.matrix.trigger('blockDeleted', {\n                    $block: this.$container,\n                });\n            }\n        });\n})(jQuery);\n"]}