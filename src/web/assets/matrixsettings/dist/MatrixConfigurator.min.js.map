{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","placeholderKey","$blockTypesColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","blockTypeSort","totalNewBlockTypes","_cancelToken","_ignoreFailedRequest","fieldTypeInfo","children","$fieldsColumnContainer","$fieldItemsOuterContainer","setContainerHeight","this","_fieldTypeSettingsHtml","$container","$blockTypeItems","$item","newMatch","i","length","addListener","id","match","height","parseInt","axis","blockTypeSettingsModal","onSubmit","handle","applySettings","Math","max","maxColHeight","addFieldToSelectedBlockType","type","selectedBlockType","addBlockType","getBlockTypeSettingsModal","show","Promise","proxy","name","t","appendTo","BlockType","CancelToken","sendActionRequest","select","cancelToken","addField","addItems","namespace","response","BlockTypeSettingsModal","getFieldTypeSettingsHtml","resolve","reject","ui","cancel","$body","requestAnimationFrame","$nameInputContainer","$nameField","axios","source","$handleInputContainer","$handleField","token","data","then","handleGenerator","HandleGenerator","catch","$cancelBtn","$form","$deleteBtn","Modal","init","$bod","hide","createTextField","instructions","find","confirm","$nameErrorList","onDelete","$handleInput","label","$nameInput","$handleErrorList","startListening","$buttons","stopListening","$submitBtn","removeClass","onFormSubmit","ev","displayErrors","isMobileBrowser","listening","updateTarget","$errorList","trim","val","remove","addClass","shake","errors","$fieldItemsContainer","configurator","setTimeout","$handleLabel","$settingsBtn","attr","$input","$fieldSettingsContainer","totalNewFields","$nameLabel","onSortChange","$nameHiddenInput","$handleHiddenInput","fields","selectedField","fieldSort","fieldSettings","deselect","trigger","$nameContainer","insertBefore","$fieldItems","text","Field","$fieldItem","DragSort","$items","initializedFieldTypeSettings","$translationSettingsContainer","$typeSettingsContainer","blockType","fieldTypeSettingsTemplates","showSettings","$requiredCheckbox","$widthInput","selectedFieldType","$typeSelect","width","widthSlider","updateNameLabel","html","updateHandleLabel","onTypeSelectChange","setFieldType","isNew","getFieldTypeSettings","getDefaultFieldSettings","footHtml","append","$settings","fresh","initUiElements","appendHeadHtml","headHtml","appendFootHtml","SlidePicker","settingsHtml","valueLabel","getParsedFieldTypeHtml","pct","insertAfter","noop","replace","RegExp","maxlength","createTextareaField","escapeHtml","$fieldset","updateRequiredIcon","prop","fieldTypeOptions","value","updateTranslationMethodSettings","createSelectField","detach","targetPrefix","$translationKeyFormatContainer","data-id","class","required","createCheckboxField","checked","push","options","isMultiSite","toggle","confirmDelete","selfDestruct","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend(\n        {\n            fieldTypeInfo: null,\n\n            inputNamePrefix: null,\n            fieldTypeSettingsNamespace: null,\n            inputIdPrefix: null,\n            placeholderKey: null,\n\n            $container: null,\n\n            $blockTypesColumnContainer: null,\n            $fieldsColumnContainer: null,\n            $fieldSettingsColumnContainer: null,\n\n            $blockTypeItemsOuterContainer: null,\n            $blockTypeItemsContainer: null,\n            $fieldItemsContainer: null,\n            $fieldSettingItemsContainer: null,\n\n            $newBlockTypeBtn: null,\n            $newFieldBtn: null,\n\n            blockTypes: null,\n            selectedBlockType: null,\n            blockTypeSort: null,\n            totalNewBlockTypes: 0,\n\n            _fieldTypeSettingsHtml: null,\n            _cancelToken: null,\n            _ignoreFailedRequest: false,\n\n            init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n                this.fieldTypeInfo = fieldTypeInfo;\n                this.inputNamePrefix = inputNamePrefix;\n                this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n                this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n                this.placeholderKey = placeholderKey;\n\n                this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n                this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n                this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n                this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n                this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n                this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n                this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n                this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n                this.setContainerHeight();\n\n                this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n                this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n                this._fieldTypeSettingsHtml = {};\n\n                // Find the existing block types\n                this.blockTypes = {};\n\n                var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n                for (var i = 0; i < $blockTypeItems.length; i++) {\n                    var $item = $($blockTypeItems[i]),\n                        id = $item.data('id');\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n\n                    // Is this a new block type?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                        this.totalNewBlockTypes = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                    handle: '.move',\n                    axis: 'y'\n                });\n\n                this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n                this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n                this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n            },\n\n            setContainerHeight: function() {\n                setTimeout($.proxy(function() {\n                    var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                    this.$container.height(maxColHeight);\n                }, this), 1);\n            },\n\n            getFieldTypeInfo: function(type) {\n                for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                    if (this.fieldTypeInfo[i].type === type) {\n                        return this.fieldTypeInfo[i];\n                    }\n                }\n            },\n\n            addBlockType: function() {\n                this.getBlockTypeSettingsModal();\n\n                this.blockTypeSettingsModal.show();\n\n                this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                    this.totalNewBlockTypes++;\n                    var id = 'new' + this.totalNewBlockTypes;\n\n                    var $item = $(\n                        '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                        '<div class=\"mci-name\">' +\n                        '<h4></h4>' +\n                        '<div class=\"smalltext light code\"></div>' +\n                        '</div>' +\n                        '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                        '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                        '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                        '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                        '</div>'\n                    ).appendTo(this.$blockTypeItemsContainer);\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n                    this.blockTypes[id].applySettings(name, handle);\n                    this.blockTypes[id].select();\n                    this.blockTypes[id].addField();\n\n                    this.blockTypeSort.addItems($item);\n                }, this);\n            },\n\n            addFieldToSelectedBlockType: function() {\n                if (this.selectedBlockType) {\n                    this.selectedBlockType.addField();\n                }\n            },\n\n            getBlockTypeSettingsModal: function() {\n                if (!this.blockTypeSettingsModal) {\n                    this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n                }\n\n                return this.blockTypeSettingsModal;\n            },\n\n            getFieldTypeSettingsHtml: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                        resolve(this._fieldTypeSettingsHtml[type]);\n                        return;\n                    }\n\n                    // Cancel the current request\n                    if (this._cancelToken) {\n                        this._ignoreFailedRequest = true;\n                        this._cancelToken.cancel();\n                        Garnish.requestAnimationFrame(() => {\n                            this._ignoreFailedRequest = false;\n                        });\n                    }\n\n                    // Create a cancel token\n                    this._cancelToken = axios.CancelToken.source();\n\n                    Craft.sendActionRequest('POST', 'fields/render-settings', {\n                        cancelToken: this._cancelToken.token,\n                        data: {\n                            type: type,\n                            namespace: this.fieldTypeSettingsNamespace,\n                        }\n                    }).then(response => {\n                        this._fieldTypeSettingsHtml[type] = response.data;\n                        resolve(response.data);\n                    }).catch(() => {\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                        reject();\n                    });\n                });\n            },\n        });\n\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend(\n        {\n            init: function() {\n                this.base();\n\n                this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n                this.setContainer(this.$form);\n\n                this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n                let $nameField = Craft.ui.createTextField({\n                    label:  Craft.t('app', 'Name'),\n                    instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n                }).appendTo(this.$body);\n                let $nameInputContainer = $nameField.find('.input');\n                this.$nameInput = $nameInputContainer.find('.text');\n                this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n                let $handleField =Craft.ui.createTextField({\n                    label: Craft.t('app', 'Handle'),\n                    instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                    class: 'code',\n                }).appendTo(this.$body);\n                let $handleInputContainer = $handleField.find('.input');\n                this.$handleInput = $handleInputContainer.find('.text');\n                this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n                this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n                this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit\"/>').appendTo(this.$buttons);\n\n                this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n                this.addListener(this.$cancelBtn, 'click', 'hide');\n                this.addListener(this.$form, 'submit', 'onFormSubmit');\n                this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n            },\n\n            onFormSubmit: function(ev) {\n                ev.preventDefault();\n\n                // Prevent multi form submits with the return key\n                if (!this.visible) {\n                    return;\n                }\n\n                if (this.handleGenerator.listening) {\n                    // Give the handle a chance to catch up with the input\n                    this.handleGenerator.updateTarget();\n                }\n\n                // Basic validation\n                var name = Craft.trim(this.$nameInput.val()),\n                    handle = Craft.trim(this.$handleInput.val());\n\n                if (!name || !handle) {\n                    Garnish.shake(this.$form);\n                }\n                else {\n                    this.hide();\n                    this.onSubmit(name, handle);\n                }\n            },\n\n            onDeleteClick: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                    this.hide();\n                    this.onDelete();\n                }\n            },\n\n            show: function(name, handle, errors) {\n                this.$nameInput.val(typeof name === 'string' ? name : '');\n                this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n                if (!handle) {\n                    this.handleGenerator.startListening();\n                }\n                else {\n                    this.handleGenerator.stopListening();\n                }\n\n                if (typeof name === 'undefined') {\n                    this.$deleteBtn.addClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Create'));\n                }\n                else {\n                    this.$deleteBtn.removeClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Save'));\n                }\n\n                this.displayErrors('name', (errors ? errors.name : null));\n                this.displayErrors('handle', (errors ? errors.handle : null));\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n\n                this.base();\n            },\n\n            displayErrors: function(attr, errors) {\n                var $input = this['$' + attr + 'Input'],\n                    $errorList = this['$' + attr + 'ErrorList'];\n\n                $errorList.children().remove();\n\n                if (errors) {\n                    $input.addClass('error');\n                    $errorList.show();\n\n                    for (var i = 0; i < errors.length; i++) {\n                        $('<li/>').text(errors[i]).appendTo($errorList);\n                    }\n                }\n                else {\n                    $input.removeClass('error');\n                    $errorList.hide();\n                }\n            }\n        });\n\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend(\n        {\n            configurator: null,\n            id: null,\n            errors: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n            $nameHiddenInput: null,\n            $handleHiddenInput: null,\n            $settingsBtn: null,\n            $fieldItemsContainer: null,\n            $fieldSettingsContainer: null,\n\n            fields: null,\n            selectedField: null,\n            fieldSort: null,\n            totalNewFields: 0,\n            fieldSettings: null,\n\n            init: function(configurator, $item) {\n                this.configurator = configurator;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n                this.errors = this.$item.data('errors');\n\n                this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n                this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n                let $nameContainer = this.$item.children('.mci-name');\n                this.$nameLabel = $nameContainer.children('h4');\n                this.$handleLabel = $nameContainer.children('.smalltext');\n                this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n                this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n                this.$settingsBtn = this.$item.find('.settings');\n\n                // Find the field items container if it exists, otherwise create it\n                this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldItemsContainer.length) {\n                    this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n                }\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldSettingsContainer.length) {\n                    this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n                }\n\n                // Find the existing fields\n                this.fields = {};\n\n                var $fieldItems = this.$fieldItemsContainer.children();\n\n                for (var i = 0; i < $fieldItems.length; i++) {\n                    var $fieldItem = $($fieldItems[i]),\n                        id = $fieldItem.data('id');\n\n                    this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                    // Is this a new field?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewFields) {\n                        this.totalNewFields = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n                this.fieldSort = new Garnish.DragSort($fieldItems, {\n                    handle: '.move',\n                    axis: 'y',\n                    onSortChange: $.proxy(function() {\n                        // Adjust the field setting containers to match the new sort order\n                        for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                            var $item = $(this.fieldSort.$items[i]),\n                                id = $item.data('id'),\n                                field = this.fields[id];\n\n                            field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                        }\n                    }, this)\n                });\n            },\n\n            select: function() {\n                if (this.configurator.selectedBlockType === this) {\n                    return;\n                }\n\n                if (this.configurator.selectedBlockType) {\n                    this.configurator.selectedBlockType.deselect();\n                }\n\n                this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.configurator.selectedBlockType = this;\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.configurator.selectedBlockType = null;\n\n                if (this.selectedField) {\n                    this.selectedField.deselect();\n                }\n            },\n\n            showSettings: function() {\n                var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n                blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n                blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n                blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n            },\n\n            applySettings: function(name, handle) {\n                if (this.errors) {\n                    this.errors = null;\n                    this.$settingsBtn.removeClass('error');\n                }\n\n                this.$nameLabel.text(name);\n                this.$handleLabel.text(handle);\n                this.$nameHiddenInput.val(name);\n                this.$handleHiddenInput.val(handle);\n            },\n\n            addField: function() {\n                this.totalNewFields++;\n                var id = 'new' + this.totalNewFields;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<div class=\"actions\">' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo(this.$fieldItemsContainer);\n\n                this.fields[id] = new Field(this.configurator, this, $item);\n                this.fields[id].select();\n\n                this.fieldSort.addItems($item);\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldItemsContainer.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.configurator.blockTypes[this.id] = null;\n                delete this.configurator.blockTypes[this.id];\n            }\n        });\n\n\n    var Field = Garnish.Base.extend(\n        {\n            configurator: null,\n            blockType: null,\n            id: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            selectedFieldType: null,\n            initializedFieldTypeSettings: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n\n            $fieldSettingsContainer: null,\n            $nameInput: null,\n            $handleInput: null,\n            $requiredCheckbox: null,\n            $typeSelect: null,\n            $translationSettingsContainer: null,\n            $typeSettingsContainer: null,\n            $widthInput: null,\n            $deleteBtn: null,\n\n            init: function(configurator, blockType, $item) {\n                this.configurator = configurator;\n                this.blockType = blockType;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n\n                this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n                this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n                this.initializedFieldTypeSettings = {};\n                this.fieldTypeSettingsTemplates = {};\n\n                let $nameContainer = this.$item.children('.mci-name');\n                this.$nameLabel = $nameContainer.children('h4');\n                this.$handleLabel = $nameContainer.children('.smalltext');\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                var isNew = (!this.$fieldSettingsContainer.length);\n\n                if (isNew) {\n                    this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n                }\n\n                this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n                this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n                this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n                this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n                this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n                this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n                this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n                this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n                if (isNew) {\n                    this.setFieldType('craft\\\\fields\\\\PlainText');\n                }\n                else {\n                    this.selectedFieldType = this.$typeSelect.val();\n                    this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n                }\n\n                if (!this.$handleInput.val()) {\n                    new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n                this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n                this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n                this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n                this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n                let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                    min: 25,\n                    max: 100,\n                    step: 25,\n                    valueLabel: width => {\n                        return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                    },\n                    onChange: width => {\n                        this.$widthInput.val(width);\n                    }\n                });\n                widthSlider.$container.insertAfter($nameContainer);\n            },\n\n            select: function() {\n                if (this.blockType.selectedField === this) {\n                    return;\n                }\n\n                if (this.blockType.selectedField) {\n                    this.blockType.selectedField.deselect();\n                }\n\n                this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.removeClass('hidden');\n                this.$fieldSettingsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.blockType.selectedField = this;\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.blockType.selectedField = null;\n            },\n\n            updateNameLabel: function() {\n                var val = this.$nameInput.val();\n                this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n            },\n\n            updateHandleLabel: function() {\n                this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n            },\n\n            updateRequiredIcon: function() {\n                if (this.$requiredCheckbox.prop('checked')) {\n                    this.$nameLabel.addClass('mci-required');\n                }\n                else {\n                    this.$nameLabel.removeClass('mci-required');\n                }\n            },\n\n            onTypeSelectChange: function() {\n                this.setFieldType(this.$typeSelect.val());\n            },\n\n            setFieldType: function(type) {\n                // Update the Translation Method settings\n                Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n                if (this.selectedFieldType) {\n                    this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n                }\n\n                this.selectedFieldType = type;\n                this.$typeSelect.val(type);\n\n                // Show a spinner\n                this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n                this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                    this.$typeSettingsContainer.html('').append($settings);\n                    if (fresh) {\n                        Craft.initUiElements($settings);\n                        Craft.appendHeadHtml(headHtml);\n                        Craft.appendFootHtml(footHtml);\n                    }\n\n                    // In case Firefox was sleeping on the job\n                    this.$typeSettingsContainer.trigger('resize');\n                }).catch(() => {\n                    this.$typeSettingsContainer.html('');\n                });\n            },\n\n            getFieldTypeSettings: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                        resolve({\n                            fresh: false,\n                            $settings: this.initializedFieldTypeSettings[type],\n                        });\n                        return;\n                    }\n\n                    this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                        settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                        headHtml = this.getParsedFieldTypeHtml(headHtml);\n                        footHtml = this.getParsedFieldTypeHtml(footHtml);\n                        let $settings = $('<div/>').html(settingsHtml);\n                        this.initializedFieldTypeSettings[type] = $settings;\n                        resolve({\n                            fresh: true,\n                            $settings: $settings,\n                            headHtml: headHtml,\n                            footHtml: footHtml,\n                        });\n                    }).catch($.noop);\n                });\n            },\n\n            getParsedFieldTypeHtml: function(html) {\n                if (typeof html === 'string') {\n                    html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                    html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n                }\n                else {\n                    html = '';\n                }\n\n                return html;\n            },\n\n            getDefaultFieldSettings: function() {\n                var $container = $('<div/>', {\n                    'data-id': this.id\n                });\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Name'),\n                    id: this.inputIdPrefix + '-name',\n                    name: this.inputNamePrefix + '[name]'\n                }).appendTo($container);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Handle'),\n                    id: this.inputIdPrefix + '-handle',\n                    'class': 'code',\n                    name: this.inputNamePrefix + '[handle]',\n                    maxlength: 64,\n                    required: true\n                }).appendTo($container);\n\n                Craft.ui.createTextareaField({\n                    label: Craft.t('app', 'Instructions'),\n                    id: this.inputIdPrefix + '-instructions',\n                    'class': 'nicetext',\n                    name: this.inputNamePrefix + '[instructions]'\n                }).appendTo($container);\n\n                let $fieldset = $('<fieldset/>').appendTo($container);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'This field is required'),\n                    id: this.inputIdPrefix + '-required',\n                    name: this.inputNamePrefix + '[required]'\n                }).appendTo($fieldset);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'Use this field’s values as search keywords'),\n                    id: this.inputIdPrefix + '-searchable',\n                    name: this.inputNamePrefix + '[searchable]',\n                    checked: false,\n                }).appendTo($fieldset);\n\n                var fieldTypeOptions = [];\n\n                for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                    fieldTypeOptions.push({\n                        value: this.configurator.fieldTypeInfo[i].type,\n                        label: this.configurator.fieldTypeInfo[i].name\n                    });\n                }\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Field Type'),\n                    id: this.inputIdPrefix + '-type',\n                    name: this.inputNamePrefix + '[type]',\n                    options: fieldTypeOptions,\n                    value: 'craft\\\\fields\\\\PlainText'\n                }).appendTo($container);\n\n                if (Craft.isMultiSite) {\n                    var $translationSettingsContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-settings'\n                    }).appendTo($container);\n\n                    Craft.ui.createSelectField({\n                        label: Craft.t('app', 'Translation Method'),\n                        id: this.inputIdPrefix + '-translation-method',\n                        name: this.inputNamePrefix + '[translationMethod]',\n                        options: [],\n                        value: 'none',\n                        toggle: true,\n                        targetPrefix: this.inputIdPrefix + '-translation-method-'\n                    }).appendTo($translationSettingsContainer);\n\n                    var $translationKeyFormatContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-method-custom',\n                        'class': 'hidden'\n                    }).appendTo($translationSettingsContainer);\n\n                    Craft.ui.createTextField({\n                        label: Craft.t('app', 'Translation Key Format'),\n                        id: this.inputIdPrefix + '-translation-key-format',\n                        name: this.inputNamePrefix + '[translationKeyFormat]'\n                    }).appendTo($translationKeyFormatContainer);\n                }\n\n                $('<hr/>').appendTo($container);\n\n                $('<div/>', {\n                    'class': 'mc-fieldtype-settings'\n                }).appendTo($container);\n\n                $('<input/>', {\n                    type: 'hidden',\n                    id: this.inputIdPrefix + '-width',\n                    name: this.inputNamePrefix + '[width]',\n                    value: '100',\n                }).appendTo($container);\n\n                $('<hr/>').appendTo($container);\n\n                $('<a/>', {\n                    'class': 'error delete',\n                    text: Craft.t('app', 'Delete')\n                }).appendTo($container);\n\n                return $container;\n            },\n\n            confirmDelete: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                    this.selfDestruct();\n                }\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.blockType.fields[this.id] = null;\n                delete this.blockType.fields[this.id];\n            }\n        });\n})(jQuery);\n"]}