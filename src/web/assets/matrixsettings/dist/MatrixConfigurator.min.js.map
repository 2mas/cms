{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","inputNamePrefix","inputIdPrefix","$blockTypesColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","blockTypeSort","totalNewBlockTypes","fieldTypeInfo","$container","$fieldsColumnContainer","$fieldItemsOuterContainer","formatInputId","setContainerHeight","this","children","$item","newMatch","DragSort","i","$blockTypeItems","length","id","addListener","match","Math","height","getFieldTypeInfo","handle","getBlockTypeSettingsModal","blockTypeSettingsModal","onSubmit","proxy","BlockType","applySettings","name","maxColHeight","type","addFieldToSelectedBlockType","selectedBlockType","addField","addBlockType","show","BlockTypeSettingsModal","t","$form","$nameInputContainer","$nameErrorList","appendTo","$handleField","$handleHeading","select","$handleLabel","$handleInputContainer","addItems","$handleInput","$buttons","$cancelBtn","$submitBtn","visible","Modal","$bod","shake","setContainer","hide","$body","$nameField","$nameHeading","$nameLabel","onDeleteClick","$nameInstructions","confirm","$nameInput","onDelete","errors","$handleInstructions","$handleErrorList","handleGenerator","startListening","stopListening","HandleGenerator","$deleteBtn","removeClass","onFormSubmit","ev","displayErrors","isMobileBrowser","listening","updateTarget","$errorList","trim","val","remove","addClass","$fieldItemsContainer","configurator","data","setTimeout","$nameHiddenInput","attr","$input","$fieldSettingsContainer","$fieldItems","$settingsBtn","fieldSort","onSortChange","$handleHiddenInput","fields","field","selectedField","totalNewFields","fieldSettings","init","trigger","find","insertBefore","text","Field","$fieldItem","parseInt","deselect","$items","initializedFieldTypeSettings","$translationSettingsContainer","$typeSettingsContainer","blockType","$requiredCheckbox","$typeSelect","isNew","setFieldType","selectedFieldType","selfDestruct","updateNameLabel","updateHandleLabel","html","updateRequiredIcon","onTypeSelectChange","updateTranslationMethodSettings","firstTime","footHtml","getParsedFieldTypeHtml","settingsFootHtml","getDefaultFieldSettings","replace","createTextField","createCheckboxField","fieldTypeOptions","ui","createSelectField","escapeHtml","value","prop","toggle","targetPrefix","detach","info","bodyHtml","settingsBodyHtml","append","data-id","label","class","maxlength","required","createTextareaField","checked","push","options","isMultiSite","$translationKeyFormatContainer","confirmDelete","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend(\n        {\n            fieldTypeInfo: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            $container: null,\n\n            $blockTypesColumnContainer: null,\n            $fieldsColumnContainer: null,\n            $fieldSettingsColumnContainer: null,\n\n            $blockTypeItemsOuterContainer: null,\n            $blockTypeItemsContainer: null,\n            $fieldItemsContainer: null,\n            $fieldSettingItemsContainer: null,\n\n            $newBlockTypeBtn: null,\n            $newFieldBtn: null,\n\n            blockTypes: null,\n            selectedBlockType: null,\n            blockTypeSort: null,\n            totalNewBlockTypes: 0,\n\n            init: function(fieldTypeInfo, inputNamePrefix) {\n                this.fieldTypeInfo = fieldTypeInfo;\n\n                this.inputNamePrefix = inputNamePrefix;\n                this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n                this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n                this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n                this.$fieldsColumnContainer = this.$container.children('.fields').children();\n                this.$fieldSettingsColumnContainer = this.$container.children('.field-settings').children();\n\n                this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.items');\n                this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.blocktypes');\n                this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.items');\n                this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.items');\n\n                this.setContainerHeight();\n\n                this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n                this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n                // Find the existing block types\n                this.blockTypes = {};\n\n                var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n                for (var i = 0; i < $blockTypeItems.length; i++) {\n                    var $item = $($blockTypeItems[i]),\n                        id = $item.data('id');\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n\n                    // Is this a new block type?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                        this.totalNewBlockTypes = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                    handle: '.move',\n                    axis: 'y'\n                });\n\n                this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n                this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n                this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n            },\n\n            setContainerHeight: function() {\n                setTimeout($.proxy(function() {\n                    var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                    this.$container.height(maxColHeight);\n                }, this), 1);\n            },\n\n            getFieldTypeInfo: function(type) {\n                for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                    if (this.fieldTypeInfo[i].type === type) {\n                        return this.fieldTypeInfo[i];\n                    }\n                }\n            },\n\n            addBlockType: function() {\n                this.getBlockTypeSettingsModal();\n\n                this.blockTypeSettingsModal.show();\n\n                this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                    this.totalNewBlockTypes++;\n                    var id = 'new' + this.totalNewBlockTypes;\n\n                    var $item = $(\n                        '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                        '<div class=\"name\"></div>' +\n                        '<div class=\"handle code\"></div>' +\n                        '<div class=\"actions\">' +\n                        '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                        '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                        '</div>' +\n                        '<input class=\"hidden\" name=\"types[craft\\\\fields\\\\Matrix][blockTypes][' + id + '][name]\">' +\n                        '<input class=\"hidden\" name=\"types[craft\\\\fields\\\\Matrix][blockTypes][' + id + '][handle]\">' +\n                        '</div>'\n                    ).appendTo(this.$blockTypeItemsContainer);\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n                    this.blockTypes[id].applySettings(name, handle);\n                    this.blockTypes[id].select();\n                    this.blockTypes[id].addField();\n\n                    this.blockTypeSort.addItems($item);\n                }, this);\n            },\n\n            addFieldToSelectedBlockType: function() {\n                if (this.selectedBlockType) {\n                    this.selectedBlockType.addField();\n                }\n            },\n\n            getBlockTypeSettingsModal: function() {\n                if (!this.blockTypeSettingsModal) {\n                    this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n                }\n\n                return this.blockTypeSettingsModal;\n            }\n        });\n\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend(\n        {\n            init: function() {\n                this.base();\n\n                this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n                this.setContainer(this.$form);\n\n                this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n                this.$nameField = $('<div class=\"field\"/>').appendTo(this.$body);\n                this.$nameHeading = $('<div class=\"heading\"/>').appendTo(this.$nameField);\n                this.$nameLabel = $('<label for=\"new-block-type-name\">' + Craft.t('app', 'Name') + '</label>').appendTo(this.$nameHeading);\n                this.$nameInstructions = $('<div class=\"instructions\"><p>' + Craft.t('app', 'What this block type will be called in the control panel.') + '</p></div>').appendTo(this.$nameHeading);\n                this.$nameInputContainer = $('<div class=\"input\"/>').appendTo(this.$nameField);\n                this.$nameInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"new-block-type-name\"/>').appendTo(this.$nameInputContainer);\n                this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo(this.$nameInputContainer).hide();\n                this.$handleField = $('<div class=\"field\"/>').appendTo(this.$body);\n                this.$handleHeading = $('<div class=\"heading\"/>').appendTo(this.$handleField);\n                this.$handleLabel = $('<label for=\"new-block-type-handle\">' + Craft.t('app', 'Handle') + '</label>').appendTo(this.$handleHeading);\n                this.$handleInstructions = $('<div class=\"instructions\"><p>' + Craft.t('app', 'How you’ll refer to this block type in the templates.') + '</p></div>').appendTo(this.$handleHeading);\n                this.$handleInputContainer = $('<div class=\"input\"/>').appendTo(this.$handleField);\n                this.$handleInput = $('<input type=\"text\" class=\"text fullwidth code\" id=\"new-block-type-handle\"/>').appendTo(this.$handleInputContainer);\n                this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo(this.$handleInputContainer).hide();\n                this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n                this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit\"/>').appendTo(this.$buttons);\n\n                this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n                this.addListener(this.$cancelBtn, 'click', 'hide');\n                this.addListener(this.$form, 'submit', 'onFormSubmit');\n                this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n            },\n\n            onFormSubmit: function(ev) {\n                ev.preventDefault();\n\n                // Prevent multi form submits with the return key\n                if (!this.visible) {\n                    return;\n                }\n\n                if (this.handleGenerator.listening) {\n                    // Give the handle a chance to catch up with the input\n                    this.handleGenerator.updateTarget();\n                }\n\n                // Basic validation\n                var name = Craft.trim(this.$nameInput.val()),\n                    handle = Craft.trim(this.$handleInput.val());\n\n                if (!name || !handle) {\n                    Garnish.shake(this.$form);\n                }\n                else {\n                    this.hide();\n                    this.onSubmit(name, handle);\n                }\n            },\n\n            onDeleteClick: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                    this.hide();\n                    this.onDelete();\n                }\n            },\n\n            show: function(name, handle, errors) {\n                this.$nameInput.val(typeof name === 'string' ? name : '');\n                this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n                if (!handle) {\n                    this.handleGenerator.startListening();\n                }\n                else {\n                    this.handleGenerator.stopListening();\n                }\n\n                if (typeof name === 'undefined') {\n                    this.$deleteBtn.addClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Create'));\n                }\n                else {\n                    this.$deleteBtn.removeClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Save'));\n                }\n\n                this.displayErrors('name', (errors ? errors.name : null));\n                this.displayErrors('handle', (errors ? errors.handle : null));\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n\n                this.base();\n            },\n\n            displayErrors: function(attr, errors) {\n                var $input = this['$' + attr + 'Input'],\n                    $errorList = this['$' + attr + 'ErrorList'];\n\n                $errorList.children().remove();\n\n                if (errors) {\n                    $input.addClass('error');\n                    $errorList.show();\n\n                    for (var i = 0; i < errors.length; i++) {\n                        $('<li/>').text(errors[i]).appendTo($errorList);\n                    }\n                }\n                else {\n                    $input.removeClass('error');\n                    $errorList.hide();\n                }\n            }\n        });\n\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend(\n        {\n            configurator: null,\n            id: null,\n            errors: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n            $nameHiddenInput: null,\n            $handleHiddenInput: null,\n            $settingsBtn: null,\n            $fieldItemsContainer: null,\n            $fieldSettingsContainer: null,\n\n            fields: null,\n            selectedField: null,\n            fieldSort: null,\n            totalNewFields: 0,\n            fieldSettings: null,\n\n            init: function(configurator, $item) {\n                this.configurator = configurator;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n                this.errors = this.$item.data('errors');\n\n                this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n                this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n                this.$nameLabel = this.$item.children('.name');\n                this.$handleLabel = this.$item.children('.handle');\n                this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n                this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n                this.$settingsBtn = this.$item.find('.settings');\n\n                // Find the field items container if it exists, otherwise create it\n                this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldItemsContainer.length) {\n                    this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n                }\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldSettingsContainer.length) {\n                    this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n                }\n\n                // Find the existing fields\n                this.fields = {};\n\n                var $fieldItems = this.$fieldItemsContainer.children();\n\n                for (var i = 0; i < $fieldItems.length; i++) {\n                    var $fieldItem = $($fieldItems[i]),\n                        id = $fieldItem.data('id');\n\n                    this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                    // Is this a new field?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewFields) {\n                        this.totalNewFields = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n                this.fieldSort = new Garnish.DragSort($fieldItems, {\n                    handle: '.move',\n                    axis: 'y',\n                    onSortChange: $.proxy(function() {\n                        // Adjust the field setting containers to match the new sort order\n                        for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                            var $item = $(this.fieldSort.$items[i]),\n                                id = $item.data('id'),\n                                field = this.fields[id];\n\n                            field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                        }\n                    }, this)\n                });\n            },\n\n            select: function() {\n                if (this.configurator.selectedBlockType === this) {\n                    return;\n                }\n\n                if (this.configurator.selectedBlockType) {\n                    this.configurator.selectedBlockType.deselect();\n                }\n\n                this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.configurator.selectedBlockType = this;\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.configurator.selectedBlockType = null;\n\n                if (this.selectedField) {\n                    this.selectedField.deselect();\n                }\n            },\n\n            showSettings: function() {\n                var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n                blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n                blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n                blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n            },\n\n            applySettings: function(name, handle) {\n                if (this.errors) {\n                    this.errors = null;\n                    this.$settingsBtn.removeClass('error');\n                }\n\n                this.$nameLabel.text(name);\n                this.$handleLabel.text(handle);\n                this.$nameHiddenInput.val(name);\n                this.$handleHiddenInput.val(handle);\n            },\n\n            addField: function() {\n                this.totalNewFields++;\n                var id = 'new' + this.totalNewFields;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                    '<div class=\"name\"><em class=\"light\">' + Craft.t('app', '(blank)') + '</em>&nbsp;</div>' +\n                    '<div class=\"handle code\">&nbsp;</div>' +\n                    '<div class=\"actions\">' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo(this.$fieldItemsContainer);\n\n                this.fields[id] = new Field(this.configurator, this, $item);\n                this.fields[id].select();\n\n                this.fieldSort.addItems($item);\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldItemsContainer.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.configurator.blockTypes[this.id] = null;\n                delete this.configurator.blockTypes[this.id];\n            }\n        });\n\n\n    var Field = Garnish.Base.extend(\n        {\n            configurator: null,\n            blockType: null,\n            id: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            selectedFieldType: null,\n            initializedFieldTypeSettings: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n\n            $fieldSettingsContainer: null,\n            $nameInput: null,\n            $handleInput: null,\n            $requiredCheckbox: null,\n            $typeSelect: null,\n            $translationSettingsContainer: null,\n            $typeSettingsContainer: null,\n            $deleteBtn: null,\n\n            init: function(configurator, blockType, $item) {\n                this.configurator = configurator;\n                this.blockType = blockType;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n\n                this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n                this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n                this.initializedFieldTypeSettings = {};\n\n                this.$nameLabel = this.$item.children('.name');\n                this.$handleLabel = this.$item.children('.handle');\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                var isNew = (!this.$fieldSettingsContainer.length);\n\n                if (isNew) {\n                    this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n                }\n\n                this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n                this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n                this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n                this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n                this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n                this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.fieldtype-settings:first');\n                this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n                if (isNew) {\n                    this.setFieldType('craft\\\\fields\\\\PlainText');\n                }\n                else {\n                    this.selectedFieldType = this.$typeSelect.val();\n                    this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n                }\n\n                if (!this.$handleInput.val()) {\n                    new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n                this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n                this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n                this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n                this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n            },\n\n            select: function() {\n                if (this.blockType.selectedField === this) {\n                    return;\n                }\n\n                if (this.blockType.selectedField) {\n                    this.blockType.selectedField.deselect();\n                }\n\n                this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.removeClass('hidden');\n                this.$fieldSettingsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.blockType.selectedField = this;\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.blockType.selectedField = null;\n            },\n\n            updateNameLabel: function() {\n                var val = this.$nameInput.val();\n                this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            },\n\n            updateHandleLabel: function() {\n                this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()) + '&nbsp;');\n            },\n\n            updateRequiredIcon: function() {\n                if (this.$requiredCheckbox.prop('checked')) {\n                    this.$nameLabel.addClass('required');\n                }\n                else {\n                    this.$nameLabel.removeClass('required');\n                }\n            },\n\n            onTypeSelectChange: function() {\n                this.setFieldType(this.$typeSelect.val());\n            },\n\n            setFieldType: function(type) {\n                // Update the Translation Method settings\n                Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n                if (this.selectedFieldType) {\n                    this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n                }\n\n                this.selectedFieldType = type;\n                this.$typeSelect.val(type);\n\n                var firstTime = (typeof this.initializedFieldTypeSettings[type] === 'undefined'),\n                    $body,\n                    footHtml;\n\n                if (firstTime) {\n                    var info = this.configurator.getFieldTypeInfo(type),\n                        bodyHtml = this.getParsedFieldTypeHtml(info.settingsBodyHtml);\n\n                    footHtml = this.getParsedFieldTypeHtml(info.settingsFootHtml);\n                    $body = $('<div>' + bodyHtml + '</div>');\n\n                    this.initializedFieldTypeSettings[type] = $body;\n                }\n                else {\n                    $body = this.initializedFieldTypeSettings[type];\n                }\n\n                $body.appendTo(this.$typeSettingsContainer);\n\n                if (firstTime) {\n                    Craft.initUiElements($body);\n                    Garnish.$bod.append(footHtml);\n                }\n\n                // Firefox might have been sleeping on the job.\n                this.$typeSettingsContainer.trigger('resize');\n            },\n\n            getParsedFieldTypeHtml: function(html) {\n                if (typeof html === 'string') {\n                    html = html.replace(/__BLOCK_TYPE__/g, this.blockType.id);\n                    html = html.replace(/__FIELD__/g, this.id);\n                }\n                else {\n                    html = '';\n                }\n\n                return html;\n            },\n\n            getDefaultFieldSettings: function() {\n                var $container = $('<div/>', {\n                    'data-id': this.id\n                });\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Name'),\n                    id: this.inputIdPrefix + '-name',\n                    name: this.inputNamePrefix + '[name]'\n                }).appendTo($container);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Handle'),\n                    id: this.inputIdPrefix + '-handle',\n                    'class': 'code',\n                    name: this.inputNamePrefix + '[handle]',\n                    maxlength: 64,\n                    required: true\n                }).appendTo($container);\n\n                Craft.ui.createTextareaField({\n                    label: Craft.t('app', 'Instructions'),\n                    id: this.inputIdPrefix + '-instructions',\n                    'class': 'nicetext',\n                    name: this.inputNamePrefix + '[instructions]'\n                }).appendTo($container);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'This field is required'),\n                    id: this.inputIdPrefix + '-required',\n                    name: this.inputNamePrefix + '[required]'\n                }).appendTo($container);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'Use this field’s values as search keywords'),\n                    id: this.inputIdPrefix + '-searchable',\n                    name: this.inputNamePrefix + '[searchable]',\n                    checked: true,\n                }).appendTo($container);\n\n                var fieldTypeOptions = [];\n\n                for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                    fieldTypeOptions.push({\n                        value: this.configurator.fieldTypeInfo[i].type,\n                        label: this.configurator.fieldTypeInfo[i].name\n                    });\n                }\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Field Type'),\n                    id: this.inputIdPrefix + '-type',\n                    name: this.inputNamePrefix + '[type]',\n                    options: fieldTypeOptions,\n                    value: 'craft\\\\fields\\\\PlainText'\n                }).appendTo($container);\n\n                if (Craft.isMultiSite) {\n                    var $translationSettingsContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-settings'\n                    }).appendTo($container);\n\n                    Craft.ui.createSelectField({\n                        label: Craft.t('app', 'Translation Method'),\n                        id: this.inputIdPrefix + '-translation-method',\n                        name: this.inputNamePrefix + '[translationMethod]',\n                        options: [],\n                        value: 'none',\n                        toggle: true,\n                        targetPrefix: this.inputIdPrefix + '-translation-method-'\n                    }).appendTo($translationSettingsContainer);\n\n                    var $translationKeyFormatContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-method-custom',\n                        'class': 'hidden'\n                    }).appendTo($translationSettingsContainer);\n\n                    Craft.ui.createTextField({\n                        label: Craft.t('app', 'Translation Key Format'),\n                        id: this.inputIdPrefix + '-translation-key-format',\n                        name: this.inputNamePrefix + '[translationKeyFormat]'\n                    }).appendTo($translationKeyFormatContainer);\n                }\n\n                $('<hr/>').appendTo($container);\n\n                $('<div/>', {\n                    'class': 'fieldtype-settings'\n                }).appendTo($container);\n\n                $('<hr/>').appendTo($container);\n\n                $('<a/>', {\n                    'class': 'error delete',\n                    text: Craft.t('app', 'Delete')\n                }).appendTo($container);\n\n                return $container;\n            },\n\n            confirmDelete: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                    this.selfDestruct();\n                }\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.blockType.fields[this.id] = null;\n                delete this.blockType.fields[this.id];\n            }\n        });\n})(jQuery);\n"]}