{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./MatrixConfigurator.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","placeholderKey","$container","$blockTypesColumnContainer","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","selectedBlockType","blockTypeSort","totalNewBlockTypes","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","init","this","formatInputId","children","$fieldItemsOuterContainer","setContainerHeight","$blockTypeItems","length","$item","id","data","BlockType","newMatch","match","parseInt","DragSort","handle","axis","addListener","setTimeout","proxy","maxColHeight","Math","max","height","getFieldTypeInfo","type","addBlockType","getBlockTypeSettingsModal","blockTypeSettingsModal","show","onSubmit","appendTo","applySettings","select","addField","addItems","addFieldToSelectedBlockType","BlockTypeSettingsModal","getFieldTypeSettingsHtml","Promise","resolve","reject","cancel","requestAnimationFrame","axios","CancelToken","source","sendActionRequest","cancelToken","token","namespace","then","response","cp","displayError","Modal","base","$form","$bod","setContainer","$body","$nameField","$nameHeading","$nameLabel","$nameInstructions","$nameInputContainer","$nameInput","$nameErrorList","hide","$handleField","$handleHeading","$handleLabel","$handleInstructions","$handleInputContainer","$handleInput","$handleErrorList","$deleteBtn","$buttons","$cancelBtn","$submitBtn","handleGenerator","HandleGenerator","onFormSubmit","ev","preventDefault","visible","listening","updateTarget","trim","val","shake","onDeleteClick","confirm","onDelete","errors","stopListening","startListening","addClass","removeClass","displayErrors","isMobileBrowser","trigger","attr","$input","$errorList","remove","text","configurator","$nameHiddenInput","$handleHiddenInput","$settingsBtn","$fieldSettingsContainer","fields","selectedField","fieldSort","totalNewFields","fieldSettings","$nameContainer","find","insertBefore","$fieldItems","$fieldItem","Field","onSortChange","$items","deselect","showSettings","selfDestruct","blockType","selectedFieldType","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","$typeSettingsContainer","$widthInput","fieldTypeSettingsTemplates","isNew","getDefaultFieldSettings","setFieldType","SlidePicker","min","step","valueLabel","width","pct","onChange","insertAfter","updateNameLabel","html","escapeHtml","updateHandleLabel","updateRequiredIcon","prop","onTypeSelectChange","updateTranslationMethodSettings","detach","getFieldTypeSettings","fresh","$settings","headHtml","footHtml","append","initUiElements","appendHeadHtml","appendFootHtml","settingsHtml","getParsedFieldTypeHtml","noop","replace","RegExp","ui","createTextField","label","maxlength","required","createTextareaField","$fieldset","createCheckboxField","checked","fieldTypeOptions","push","createSelectField","options","isMultiSite","toggle","targetPrefix","$translationKeyFormatContainer","confirmDelete","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend(\n        {\n            fieldTypeInfo: null,\n\n            inputNamePrefix: null,\n            fieldTypeSettingsNamespace: null,\n            inputIdPrefix: null,\n            placeholderKey: null,\n\n            $container: null,\n\n            $blockTypesColumnContainer: null,\n            $fieldsColumnContainer: null,\n            $fieldSettingsColumnContainer: null,\n\n            $blockTypeItemsOuterContainer: null,\n            $blockTypeItemsContainer: null,\n            $fieldItemsContainer: null,\n            $fieldSettingItemsContainer: null,\n\n            $newBlockTypeBtn: null,\n            $newFieldBtn: null,\n\n            blockTypes: null,\n            selectedBlockType: null,\n            blockTypeSort: null,\n            totalNewBlockTypes: 0,\n\n            _fieldTypeSettingsHtml: null,\n            _cancelToken: null,\n            _ignoreFailedRequest: false,\n\n            init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n                this.fieldTypeInfo = fieldTypeInfo;\n                this.inputNamePrefix = inputNamePrefix;\n                this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n                this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n                this.placeholderKey = placeholderKey;\n\n                this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n                this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n                this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n                this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n                this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n                this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n                this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n                this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n                this.setContainerHeight();\n\n                this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n                this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n                this._fieldTypeSettingsHtml = {};\n\n                // Find the existing block types\n                this.blockTypes = {};\n\n                var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n                for (var i = 0; i < $blockTypeItems.length; i++) {\n                    var $item = $($blockTypeItems[i]),\n                        id = $item.data('id');\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n\n                    // Is this a new block type?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                        this.totalNewBlockTypes = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                    handle: '.move',\n                    axis: 'y'\n                });\n\n                this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n                this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n                this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n                this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n            },\n\n            setContainerHeight: function() {\n                setTimeout($.proxy(function() {\n                    var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                    this.$container.height(maxColHeight);\n                }, this), 1);\n            },\n\n            getFieldTypeInfo: function(type) {\n                for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                    if (this.fieldTypeInfo[i].type === type) {\n                        return this.fieldTypeInfo[i];\n                    }\n                }\n            },\n\n            addBlockType: function() {\n                this.getBlockTypeSettingsModal();\n\n                this.blockTypeSettingsModal.show();\n\n                this.blockTypeSettingsModal.onSubmit = $.proxy(function(name, handle) {\n                    this.totalNewBlockTypes++;\n                    var id = 'new' + this.totalNewBlockTypes;\n\n                    var $item = $(\n                        '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                        '<div class=\"mci-name\">' +\n                        '<h4></h4>' +\n                        '<div class=\"smalltext light code\"></div>' +\n                        '</div>' +\n                        '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                        '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                        '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                        '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                        '</div>'\n                    ).appendTo(this.$blockTypeItemsContainer);\n\n                    this.blockTypes[id] = new BlockType(this, $item);\n                    this.blockTypes[id].applySettings(name, handle);\n                    this.blockTypes[id].select();\n                    this.blockTypes[id].addField();\n\n                    this.blockTypeSort.addItems($item);\n                }, this);\n            },\n\n            addFieldToSelectedBlockType: function() {\n                if (this.selectedBlockType) {\n                    this.selectedBlockType.addField();\n                }\n            },\n\n            getBlockTypeSettingsModal: function() {\n                if (!this.blockTypeSettingsModal) {\n                    this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n                }\n\n                return this.blockTypeSettingsModal;\n            },\n\n            getFieldTypeSettingsHtml: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                        resolve(this._fieldTypeSettingsHtml[type]);\n                        return;\n                    }\n\n                    // Cancel the current request\n                    if (this._cancelToken) {\n                        this._ignoreFailedRequest = true;\n                        this._cancelToken.cancel();\n                        Garnish.requestAnimationFrame(() => {\n                            this._ignoreFailedRequest = false;\n                        });\n                    }\n\n                    // Create a cancel token\n                    this._cancelToken = axios.CancelToken.source();\n\n                    Craft.sendActionRequest('POST', 'fields/render-settings', {\n                        cancelToken: this._cancelToken.token,\n                        data: {\n                            type: type,\n                            namespace: this.fieldTypeSettingsNamespace,\n                        }\n                    }).then(response => {\n                        this._fieldTypeSettingsHtml[type] = response.data;\n                        resolve(response.data);\n                    }).catch(() => {\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                        reject();\n                    });\n                });\n            },\n        });\n\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend(\n        {\n            init: function() {\n                this.base();\n\n                this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n                this.setContainer(this.$form);\n\n                this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n                this.$nameField = $('<div class=\"field\"/>').appendTo(this.$body);\n                this.$nameHeading = $('<div class=\"heading\"/>').appendTo(this.$nameField);\n                this.$nameLabel = $('<label for=\"new-block-type-name\">' + Craft.t('app', 'Name') + '</label>').appendTo(this.$nameHeading);\n                this.$nameInstructions = $('<div class=\"instructions\"><p>' + Craft.t('app', 'What this block type will be called in the control panel.') + '</p></div>').appendTo(this.$nameHeading);\n                this.$nameInputContainer = $('<div class=\"input\"/>').appendTo(this.$nameField);\n                this.$nameInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"new-block-type-name\"/>').appendTo(this.$nameInputContainer);\n                this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo(this.$nameInputContainer).hide();\n                this.$handleField = $('<div class=\"field\"/>').appendTo(this.$body);\n                this.$handleHeading = $('<div class=\"heading\"/>').appendTo(this.$handleField);\n                this.$handleLabel = $('<label for=\"new-block-type-handle\">' + Craft.t('app', 'Handle') + '</label>').appendTo(this.$handleHeading);\n                this.$handleInstructions = $('<div class=\"instructions\"><p>' + Craft.t('app', 'How you’ll refer to this block type in the templates.') + '</p></div>').appendTo(this.$handleHeading);\n                this.$handleInputContainer = $('<div class=\"input\"/>').appendTo(this.$handleField);\n                this.$handleInput = $('<input type=\"text\" class=\"text fullwidth code\" id=\"new-block-type-handle\"/>').appendTo(this.$handleInputContainer);\n                this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo(this.$handleInputContainer).hide();\n                this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n                this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit\"/>').appendTo(this.$buttons);\n\n                this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n                this.addListener(this.$cancelBtn, 'click', 'hide');\n                this.addListener(this.$form, 'submit', 'onFormSubmit');\n                this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n            },\n\n            onFormSubmit: function(ev) {\n                ev.preventDefault();\n\n                // Prevent multi form submits with the return key\n                if (!this.visible) {\n                    return;\n                }\n\n                if (this.handleGenerator.listening) {\n                    // Give the handle a chance to catch up with the input\n                    this.handleGenerator.updateTarget();\n                }\n\n                // Basic validation\n                var name = Craft.trim(this.$nameInput.val()),\n                    handle = Craft.trim(this.$handleInput.val());\n\n                if (!name || !handle) {\n                    Garnish.shake(this.$form);\n                }\n                else {\n                    this.hide();\n                    this.onSubmit(name, handle);\n                }\n            },\n\n            onDeleteClick: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                    this.hide();\n                    this.onDelete();\n                }\n            },\n\n            show: function(name, handle, errors) {\n                this.$nameInput.val(typeof name === 'string' ? name : '');\n                this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n                if (!handle) {\n                    this.handleGenerator.startListening();\n                }\n                else {\n                    this.handleGenerator.stopListening();\n                }\n\n                if (typeof name === 'undefined') {\n                    this.$deleteBtn.addClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Create'));\n                }\n                else {\n                    this.$deleteBtn.removeClass('hidden');\n                    this.$submitBtn.val(Craft.t('app', 'Save'));\n                }\n\n                this.displayErrors('name', (errors ? errors.name : null));\n                this.displayErrors('handle', (errors ? errors.handle : null));\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n\n                this.base();\n            },\n\n            displayErrors: function(attr, errors) {\n                var $input = this['$' + attr + 'Input'],\n                    $errorList = this['$' + attr + 'ErrorList'];\n\n                $errorList.children().remove();\n\n                if (errors) {\n                    $input.addClass('error');\n                    $errorList.show();\n\n                    for (var i = 0; i < errors.length; i++) {\n                        $('<li/>').text(errors[i]).appendTo($errorList);\n                    }\n                }\n                else {\n                    $input.removeClass('error');\n                    $errorList.hide();\n                }\n            }\n        });\n\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend(\n        {\n            configurator: null,\n            id: null,\n            errors: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n            $nameHiddenInput: null,\n            $handleHiddenInput: null,\n            $settingsBtn: null,\n            $fieldItemsContainer: null,\n            $fieldSettingsContainer: null,\n\n            fields: null,\n            selectedField: null,\n            fieldSort: null,\n            totalNewFields: 0,\n            fieldSettings: null,\n\n            init: function(configurator, $item) {\n                this.configurator = configurator;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n                this.errors = this.$item.data('errors');\n\n                this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n                this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n                let $nameContainer = this.$item.children('.mci-name');\n                this.$nameLabel = $nameContainer.children('h4');\n                this.$handleLabel = $nameContainer.children('.smalltext');\n                this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n                this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n                this.$settingsBtn = this.$item.find('.settings');\n\n                // Find the field items container if it exists, otherwise create it\n                this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldItemsContainer.length) {\n                    this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n                }\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                if (!this.$fieldSettingsContainer.length) {\n                    this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n                }\n\n                // Find the existing fields\n                this.fields = {};\n\n                var $fieldItems = this.$fieldItemsContainer.children();\n\n                for (var i = 0; i < $fieldItems.length; i++) {\n                    var $fieldItem = $($fieldItems[i]),\n                        id = $fieldItem.data('id');\n\n                    this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                    // Is this a new field?\n                    var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                    if (newMatch && newMatch[1] > this.totalNewFields) {\n                        this.totalNewFields = parseInt(newMatch[1]);\n                    }\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n                this.fieldSort = new Garnish.DragSort($fieldItems, {\n                    handle: '.move',\n                    axis: 'y',\n                    onSortChange: $.proxy(function() {\n                        // Adjust the field setting containers to match the new sort order\n                        for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                            var $item = $(this.fieldSort.$items[i]),\n                                id = $item.data('id'),\n                                field = this.fields[id];\n\n                            field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                        }\n                    }, this)\n                });\n            },\n\n            select: function() {\n                if (this.configurator.selectedBlockType === this) {\n                    return;\n                }\n\n                if (this.configurator.selectedBlockType) {\n                    this.configurator.selectedBlockType.deselect();\n                }\n\n                this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.configurator.selectedBlockType = this;\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n                this.$fieldItemsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.configurator.selectedBlockType = null;\n\n                if (this.selectedField) {\n                    this.selectedField.deselect();\n                }\n            },\n\n            showSettings: function() {\n                var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n                blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n                blockTypeSettingsModal.onSubmit = $.proxy(this, 'applySettings');\n                blockTypeSettingsModal.onDelete = $.proxy(this, 'selfDestruct');\n            },\n\n            applySettings: function(name, handle) {\n                if (this.errors) {\n                    this.errors = null;\n                    this.$settingsBtn.removeClass('error');\n                }\n\n                this.$nameLabel.text(name);\n                this.$handleLabel.text(handle);\n                this.$nameHiddenInput.val(name);\n                this.$handleHiddenInput.val(handle);\n            },\n\n            addField: function() {\n                this.totalNewFields++;\n                var id = 'new' + this.totalNewFields;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<div class=\"actions\">' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo(this.$fieldItemsContainer);\n\n                this.fields[id] = new Field(this.configurator, this, $item);\n                this.fields[id].select();\n\n                this.fieldSort.addItems($item);\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldItemsContainer.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.configurator.blockTypes[this.id] = null;\n                delete this.configurator.blockTypes[this.id];\n            }\n        });\n\n\n    var Field = Garnish.Base.extend(\n        {\n            configurator: null,\n            blockType: null,\n            id: null,\n\n            inputNamePrefix: null,\n            inputIdPrefix: null,\n\n            selectedFieldType: null,\n            initializedFieldTypeSettings: null,\n\n            $item: null,\n            $nameLabel: null,\n            $handleLabel: null,\n\n            $fieldSettingsContainer: null,\n            $nameInput: null,\n            $handleInput: null,\n            $requiredCheckbox: null,\n            $typeSelect: null,\n            $translationSettingsContainer: null,\n            $typeSettingsContainer: null,\n            $widthInput: null,\n            $deleteBtn: null,\n\n            init: function(configurator, blockType, $item) {\n                this.configurator = configurator;\n                this.blockType = blockType;\n                this.$item = $item;\n                this.id = this.$item.data('id');\n\n                this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n                this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n                this.initializedFieldTypeSettings = {};\n                this.fieldTypeSettingsTemplates = {};\n\n                let $nameContainer = this.$item.children('.mci-name');\n                this.$nameLabel = $nameContainer.children('h4');\n                this.$handleLabel = $nameContainer.children('.smalltext');\n\n                // Find the field settings container if it exists, otherwise create it\n                this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n                var isNew = (!this.$fieldSettingsContainer.length);\n\n                if (isNew) {\n                    this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n                }\n\n                this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n                this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n                this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n                this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n                this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n                this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n                this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n                this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n                if (isNew) {\n                    this.setFieldType('craft\\\\fields\\\\PlainText');\n                }\n                else {\n                    this.selectedFieldType = this.$typeSelect.val();\n                    this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n                }\n\n                if (!this.$handleInput.val()) {\n                    new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n                }\n\n                this.addListener(this.$item, 'click', 'select');\n                this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n                this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n                this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n                this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n                this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n                let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                    min: 25,\n                    max: 100,\n                    step: 25,\n                    valueLabel: width => {\n                        return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                    },\n                    onChange: width => {\n                        this.$widthInput.val(width);\n                    }\n                });\n                widthSlider.$container.insertAfter($nameContainer);\n            },\n\n            select: function() {\n                if (this.blockType.selectedField === this) {\n                    return;\n                }\n\n                if (this.blockType.selectedField) {\n                    this.blockType.selectedField.deselect();\n                }\n\n                this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.removeClass('hidden');\n                this.$fieldSettingsContainer.removeClass('hidden');\n                this.$item.addClass('sel');\n                this.blockType.selectedField = this;\n\n                if (!Garnish.isMobileBrowser()) {\n                    setTimeout($.proxy(function() {\n                        this.$nameInput.trigger('focus');\n                    }, this), 100);\n                }\n            },\n\n            deselect: function() {\n                this.$item.removeClass('sel');\n                this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n                this.blockType.$fieldSettingsContainer.addClass('hidden');\n                this.$fieldSettingsContainer.addClass('hidden');\n                this.blockType.selectedField = null;\n            },\n\n            updateNameLabel: function() {\n                var val = this.$nameInput.val();\n                this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n            },\n\n            updateHandleLabel: function() {\n                this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n            },\n\n            updateRequiredIcon: function() {\n                if (this.$requiredCheckbox.prop('checked')) {\n                    this.$nameLabel.addClass('mci-required');\n                }\n                else {\n                    this.$nameLabel.removeClass('mci-required');\n                }\n            },\n\n            onTypeSelectChange: function() {\n                this.setFieldType(this.$typeSelect.val());\n            },\n\n            setFieldType: function(type) {\n                // Update the Translation Method settings\n                Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n                if (this.selectedFieldType) {\n                    this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n                }\n\n                this.selectedFieldType = type;\n                this.$typeSelect.val(type);\n\n                // Show a spinner\n                this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n                this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                    this.$typeSettingsContainer.html('').append($settings);\n                    if (fresh) {\n                        Craft.initUiElements($settings);\n                        Craft.appendHeadHtml(headHtml);\n                        Craft.appendFootHtml(footHtml);\n                    }\n\n                    // In case Firefox was sleeping on the job\n                    this.$typeSettingsContainer.trigger('resize');\n                }).catch(() => {\n                    this.$typeSettingsContainer.html('');\n                });\n            },\n\n            getFieldTypeSettings: function(type) {\n                return new Promise((resolve, reject) => {\n                    if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                        resolve({\n                            fresh: false,\n                            $settings: this.initializedFieldTypeSettings[type],\n                        });\n                        return;\n                    }\n\n                    this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                        settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                        headHtml = this.getParsedFieldTypeHtml(headHtml);\n                        footHtml = this.getParsedFieldTypeHtml(footHtml);\n                        let $settings = $('<div/>').html(settingsHtml);\n                        this.initializedFieldTypeSettings[type] = $settings;\n                        resolve({\n                            fresh: true,\n                            $settings: $settings,\n                            headHtml: headHtml,\n                            footHtml: footHtml,\n                        });\n                    }).catch($.noop);\n                });\n            },\n\n            getParsedFieldTypeHtml: function(html) {\n                if (typeof html === 'string') {\n                    html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                    html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n                }\n                else {\n                    html = '';\n                }\n\n                return html;\n            },\n\n            getDefaultFieldSettings: function() {\n                var $container = $('<div/>', {\n                    'data-id': this.id\n                });\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Name'),\n                    id: this.inputIdPrefix + '-name',\n                    name: this.inputNamePrefix + '[name]'\n                }).appendTo($container);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Handle'),\n                    id: this.inputIdPrefix + '-handle',\n                    'class': 'code',\n                    name: this.inputNamePrefix + '[handle]',\n                    maxlength: 64,\n                    required: true\n                }).appendTo($container);\n\n                Craft.ui.createTextareaField({\n                    label: Craft.t('app', 'Instructions'),\n                    id: this.inputIdPrefix + '-instructions',\n                    'class': 'nicetext',\n                    name: this.inputNamePrefix + '[instructions]'\n                }).appendTo($container);\n\n                let $fieldset = $('<fieldset/>').appendTo($container);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'This field is required'),\n                    id: this.inputIdPrefix + '-required',\n                    name: this.inputNamePrefix + '[required]'\n                }).appendTo($fieldset);\n\n                Craft.ui.createCheckboxField({\n                    label: Craft.t('app', 'Use this field’s values as search keywords'),\n                    id: this.inputIdPrefix + '-searchable',\n                    name: this.inputNamePrefix + '[searchable]',\n                    checked: false,\n                }).appendTo($fieldset);\n\n                var fieldTypeOptions = [];\n\n                for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                    fieldTypeOptions.push({\n                        value: this.configurator.fieldTypeInfo[i].type,\n                        label: this.configurator.fieldTypeInfo[i].name\n                    });\n                }\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Field Type'),\n                    id: this.inputIdPrefix + '-type',\n                    name: this.inputNamePrefix + '[type]',\n                    options: fieldTypeOptions,\n                    value: 'craft\\\\fields\\\\PlainText'\n                }).appendTo($container);\n\n                if (Craft.isMultiSite) {\n                    var $translationSettingsContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-settings'\n                    }).appendTo($container);\n\n                    Craft.ui.createSelectField({\n                        label: Craft.t('app', 'Translation Method'),\n                        id: this.inputIdPrefix + '-translation-method',\n                        name: this.inputNamePrefix + '[translationMethod]',\n                        options: [],\n                        value: 'none',\n                        toggle: true,\n                        targetPrefix: this.inputIdPrefix + '-translation-method-'\n                    }).appendTo($translationSettingsContainer);\n\n                    var $translationKeyFormatContainer = $('<div/>', {\n                        id: this.inputIdPrefix + '-translation-method-custom',\n                        'class': 'hidden'\n                    }).appendTo($translationSettingsContainer);\n\n                    Craft.ui.createTextField({\n                        label: Craft.t('app', 'Translation Key Format'),\n                        id: this.inputIdPrefix + '-translation-key-format',\n                        name: this.inputNamePrefix + '[translationKeyFormat]'\n                    }).appendTo($translationKeyFormatContainer);\n                }\n\n                $('<hr/>').appendTo($container);\n\n                $('<div/>', {\n                    'class': 'mc-fieldtype-settings'\n                }).appendTo($container);\n\n                $('<input/>', {\n                    type: 'hidden',\n                    id: this.inputIdPrefix + '-width',\n                    name: this.inputNamePrefix + '[width]',\n                    value: '100',\n                }).appendTo($container);\n\n                $('<hr/>').appendTo($container);\n\n                $('<a/>', {\n                    'class': 'error delete',\n                    text: Craft.t('app', 'Delete')\n                }).appendTo($container);\n\n                return $container;\n            },\n\n            confirmDelete: function() {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                    this.selfDestruct();\n                }\n            },\n\n            selfDestruct: function() {\n                this.deselect();\n                this.$item.remove();\n                this.$fieldSettingsContainer.remove();\n\n                this.blockType.fields[this.id] = null;\n                delete this.blockType.fields[this.id];\n            }\n        });\n})(jQuery);\n"],"sourceRoot":""}