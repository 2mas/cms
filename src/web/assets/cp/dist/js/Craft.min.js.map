{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","i","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","isArray","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","window","cmsLicenseKey","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","arr","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","key","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","obj","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","removeFromArray","index","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","role","title","remove","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","$hud","$body","hide","switchSite","serialize","newSiteId","reloadForm","refreshInitialData","$instructions","requestAnimationFrame","headHtml","footHtml","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","shortcutManager","registerShortcut","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","viewParams","elementAction","elementIds","submitActionsAction","afterAction","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_deinitSources","_collapseSource","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","data-icon","$nextBtn","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","$scrollContainer","scrollTop","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","ADD_FX_DURATION","REMOVE_FX_DURATION","show","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","resume","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","allowDegreeFractions","isImagick","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","x","y","allowSavingAsNew","saveImage","$shade","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","_attachUploader","defaultFieldLayoutId","formData","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","ALT_KEY","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","$label","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_canvasSupported","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","$innerProgressBar","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","style","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","idParam","contentSummary","$deleteSubmitBtn","validateDeleteInputs","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$notesTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","newSites","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","site","siteStatuses","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","addlSiteOptions","addlSiteIds","serializedStatuses","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_removeField","_updateSiteStatuses","$field","overflow","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","$lightswitch","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnsavedDraft","saveDraft","isActive","$spinners","$statusIcons","saveDraftAction","prepareData","docTitle","draftName","draftNotes","revisionMenu","draftCreated","newHref","anchorPos","$saveBtnContainer","applyDraftAction","$saveDraftBtn","canDeleteDraft","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","currentTargets","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$deleteLink","saveMeta","onMetaHudHide","onMetaHudEscape","onNotesKeydown","shakeMetaHud","deleteDraft","deleteDraftAction","handleFormSubmit","abort","hashedRedirectUrl","enabledGlobally","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","ESC_KEY","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","resetScroll","refresh","frameborder","previewIframeResizerOptions","iFrameResize","checkOrigin","scrolling","onInit","iframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$cancelButton","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","num","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<div/>', {\n                                class: 'clear-btn',\n                                role: 'button',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            }\n            else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            }\n            else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            }\n            else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttonsContainer);\n                this.$saveBtn = $('<input class=\"btn submit\" type=\"submit\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                }\n                else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({ siteId: newSiteId }, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            var $instructions = this.$fieldsContainer.find('> .meta > .field > .heading > .instructions');\n\n            for (var i = 0; i < $instructions.length; i++) {\n                $instructions.eq(i)\n                    .replaceWith($('<span/>', {\n                        'class': 'info',\n                        'html': $instructions.eq(i).children().html()\n                    }))\n                    .infoicon();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            }\n                            else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    }\n                    else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                this.setSortDirection(attr === 'score' ? 'desc' : 'asc');\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    var sourceViewMode = this.sourceViewModes[i];\n\n                    var $viewModeBtn = $('<div data-view=\"' + sourceViewMode.mode + '\" role=\"button\"' +\n                        ' class=\"btn' + (typeof sourceViewMode.className !== 'undefined' ? ' ' + sourceViewMode.className : '') + '\"' +\n                        ' title=\"' + sourceViewMode.title + '\"' +\n                        (typeof sourceViewMode.icon !== 'undefined' ? ' data-icon=\"' + sourceViewMode.icon + '\"' : '') +\n                        '/>'\n                    ).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page > 1 ? '' : ' disabled'),\n                                'data-icon': 'leftangle',\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page < totalPages ? '' : ' disabled'),\n                                'data-icon': 'rightangle',\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<div class=\"btn menubtn\" data-icon=\"settings\" title=\"' + Craft.t('app', 'Actions') + '\"/>').appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<input/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                value: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<div class=\"btn disabled submit\">' + Craft.t('app', 'Select') + '</div>').appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn cancel\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n            this.$replaceBtn = $('<div class=\"btn submit save replace\">' + Craft.t('app', 'Save') + '</div>').appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<div class=\"btn submit save copy\">' + Craft.t('app', 'Save as a new asset') + '</div>').appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n        \n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<div class=\"btn submit\" data-icon=\"upload\" style=\"position: relative; overflow: hidden;\" role=\"button\">' + Craft.t('app', 'Upload files') + '</div>');\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<div class=\"btn menubtn disabled\">' + Craft.t('app', 'Select transform') + '</div>').appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                var $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"/>').appendTo($form),\n                    $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                    $logoutBtn = $('<div class=\"btn\">' + Craft.t('app', 'Log out now') + '</div>').appendTo($buttons),\n                    $renewSessionBtn = $('<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('app', 'Keep me logged in') + '\" />').appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Login') + '\" />').appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n\n            // Listen for Option/ALT presses\n            this.addListener(Garnish.$win, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.addClass('altkeydown');\n                }\n            });\n            this.addListener(Garnish.$win, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.removeClass('altkeydown');\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New category') + '</div>').appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn\" role=\"button\"/>').text(Craft.t('app', 'Cancel')).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\"/>').text(Craft.t('app', 'Save')).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<div class=\"btn submit add icon\"/>').text(Craft.t('app', 'New heading')).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            var $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod),\n                $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<div class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</div>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form),\n                $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                $cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + (Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user')) + '\" />').appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.$revisionBtn = $('#revision-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            this.listenForChanges();\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled everywhere'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<a/>', {\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#revision-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId) {\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId) {\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons().removeClass('invisible checkmark-icon alert-icon').addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the Save button with an Update button, if there is one.\n                        // Otherwise, the user must not have permission to update the source element\n                        var $saveBtnContainer = $('#save-btn-container');\n                        if ($saveBtnContainer.length) {\n                            $saveBtnContainer.replaceWith($('<input/>', {\n                                type: 'button',\n                                'class': 'btn secondary formsubmit',\n                                value: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).formsubmit());\n                        }\n\n                        // Remove the \"Save as a Draft\" button\n                        var $saveDraftBtn = $('#save-draft-btn-container');\n                        $saveDraftBtn.add($saveDraftBtn.prev('.spacer')).remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            return data\n                .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                    return pre + this.duplicatedElements[id] + post;\n                })\n                .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                    return pre + this.duplicatedElements[id];\n                });\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            this.statusIcons()\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If we're editing a (saved) draft and the shortcut was used, just force-check the form immediately\n            if (ev.saveShortcut && !this.settings.isUnsavedDraft && this.settings.draftId) {\n                this.checkForm(true);\n                return;\n            }\n\n            // If we're editing a draft, this isn't a custom trigger, and the user isn't allowed to update the source,\n            // then ignore the submission\n            if (!ev.customTrigger && !this.settings.isUnsavedDraft && this.settings.draftId && !this.settings.canUpdateSource) {\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Submit') + '\" />').appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New entry') + '</div>').appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[\\[\\]\\\\\\/]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                var $saveBtn = $('<div class=\"btn submit\">' + Craft.t('app', 'Save') + '</div>').appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<div/>', {\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                        role: 'btn',\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: $.proxy(function(option) {\n                            this.switchTarget($(option).data('target'));\n                        }, this)\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', function() {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                }.bind(this));\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            }, this));\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(function(url) {\n                // Maintain the current scroll position?\n                if (!resetScroll && this.iframeLoaded && this.$iframe) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (Craft.previewIframeResizerOptions !== false) {\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            }.bind(this));\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        var $cancelButton = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$promptButtons),\n            $submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'OK') + '\" />').appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelButton, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                var startDate = $startDate.datepicker('getDate');\n                var endDate = $endDate.datepicker('getDate');\n                var startTime = startDate ? startDate.getTime() : null;\n                var endTime = endDate ? endDate.getTime() : null;\n\n                var $options = $ul.find('a');\n                var $option;\n                var foundOption = false;\n\n                for (var i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            var btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            var $btn = $('<div class=\"'+btnClasses+'\" data-icon=\"date\"/>')\n                .text(Craft.t('app', 'All'));\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label || config.instructions) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                if (label) {\n                    var $label = $('<label/>', {\n                        'id': config.labelId || (config.id ? config.id + '-label' : null),\n                        'class': (config.required ? 'required' : null),\n                        'for': config.id,\n                        text: label\n                    }).appendTo($heading);\n\n                    if (siteId) {\n                        for (var i = 0; i < Craft.sites.length; i++) {\n                            if (Craft.sites[i].id == siteId) {\n                                $('<span class=\"site\"/>').text(Craft.sites[i].name).appendTo($label);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (config.instructions) {\n                    $('<div class=\"instructions\"/>').text(config.instructions).appendTo($heading);\n                }\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<div/>', {\n                                class: 'clear-btn',\n                                role: 'button',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            }\n            else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            }\n            else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            }\n            else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttonsContainer);\n                this.$saveBtn = $('<input class=\"btn submit\" type=\"submit\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                }\n                else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({ siteId: newSiteId }, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            var $instructions = this.$fieldsContainer.find('> .meta > .field > .heading > .instructions');\n\n            for (var i = 0; i < $instructions.length; i++) {\n                $instructions.eq(i)\n                    .replaceWith($('<span/>', {\n                        'class': 'info',\n                        'html': $instructions.eq(i).children().html()\n                    }))\n                    .infoicon();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            }\n                            else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    }\n                    else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                this.setSortDirection(attr === 'score' ? 'desc' : 'asc');\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    var sourceViewMode = this.sourceViewModes[i];\n\n                    var $viewModeBtn = $('<div data-view=\"' + sourceViewMode.mode + '\" role=\"button\"' +\n                        ' class=\"btn' + (typeof sourceViewMode.className !== 'undefined' ? ' ' + sourceViewMode.className : '') + '\"' +\n                        ' title=\"' + sourceViewMode.title + '\"' +\n                        (typeof sourceViewMode.icon !== 'undefined' ? ' data-icon=\"' + sourceViewMode.icon + '\"' : '') +\n                        '/>'\n                    ).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page > 1 ? '' : ' disabled'),\n                                'data-icon': 'leftangle',\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page < totalPages ? '' : ' disabled'),\n                                'data-icon': 'rightangle',\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<div class=\"btn menubtn\" data-icon=\"settings\" title=\"' + Craft.t('app', 'Actions') + '\"/>').appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<input/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                value: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<div class=\"btn disabled submit\">' + Craft.t('app', 'Select') + '</div>').appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn cancel\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n            this.$replaceBtn = $('<div class=\"btn submit save replace\">' + Craft.t('app', 'Save') + '</div>').appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<div class=\"btn submit save copy\">' + Craft.t('app', 'Save as a new asset') + '</div>').appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n        \n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<div class=\"btn submit\" data-icon=\"upload\" style=\"position: relative; overflow: hidden;\" role=\"button\">' + Craft.t('app', 'Upload files') + '</div>');\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<div class=\"btn menubtn disabled\">' + Craft.t('app', 'Select transform') + '</div>').appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                var $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"/>').appendTo($form),\n                    $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                    $logoutBtn = $('<div class=\"btn\">' + Craft.t('app', 'Log out now') + '</div>').appendTo($buttons),\n                    $renewSessionBtn = $('<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('app', 'Keep me logged in') + '\" />').appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Login') + '\" />').appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n\n            // Listen for Option/ALT presses\n            this.addListener(Garnish.$win, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.addClass('altkeydown');\n                }\n            });\n            this.addListener(Garnish.$win, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.removeClass('altkeydown');\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New category') + '</div>').appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn\" role=\"button\"/>').text(Craft.t('app', 'Cancel')).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\"/>').text(Craft.t('app', 'Save')).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<div class=\"btn submit add icon\"/>').text(Craft.t('app', 'New heading')).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            var $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod),\n                $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<div class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</div>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form),\n                $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                $cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + (Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user')) + '\" />').appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.$revisionBtn = $('#revision-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            this.listenForChanges();\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled everywhere'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<a/>', {\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#revision-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId) {\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId) {\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons().removeClass('invisible checkmark-icon alert-icon').addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the Save button with an Update button, if there is one.\n                        // Otherwise, the user must not have permission to update the source element\n                        var $saveBtnContainer = $('#save-btn-container');\n                        if ($saveBtnContainer.length) {\n                            $saveBtnContainer.replaceWith($('<input/>', {\n                                type: 'button',\n                                'class': 'btn secondary formsubmit',\n                                value: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).formsubmit());\n                        }\n\n                        // Remove the \"Save as a Draft\" button\n                        var $saveDraftBtn = $('#save-draft-btn-container');\n                        $saveDraftBtn.add($saveDraftBtn.prev('.spacer')).remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            return data\n                .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                    return pre + this.duplicatedElements[id] + post;\n                })\n                .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                    return pre + this.duplicatedElements[id];\n                });\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            this.statusIcons()\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If we're editing a (saved) draft and the shortcut was used, just force-check the form immediately\n            if (ev.saveShortcut && !this.settings.isUnsavedDraft && this.settings.draftId) {\n                this.checkForm(true);\n                return;\n            }\n\n            // If we're editing a draft, this isn't a custom trigger, and the user isn't allowed to update the source,\n            // then ignore the submission\n            if (!ev.customTrigger && !this.settings.isUnsavedDraft && this.settings.draftId && !this.settings.canUpdateSource) {\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Submit') + '\" />').appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New entry') + '</div>').appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[\\[\\]\\\\\\/]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                var $saveBtn = $('<div class=\"btn submit\">' + Craft.t('app', 'Save') + '</div>').appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<div/>', {\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                        role: 'btn',\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: $.proxy(function(option) {\n                            this.switchTarget($(option).data('target'));\n                        }, this)\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', function() {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                }.bind(this));\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            }, this));\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(function(url) {\n                // Maintain the current scroll position?\n                if (!resetScroll && this.iframeLoaded && this.$iframe) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (Craft.previewIframeResizerOptions !== false) {\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            }.bind(this));\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        var $cancelButton = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$promptButtons),\n            $submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'OK') + '\" />').appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelButton, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                var startDate = $startDate.datepicker('getDate');\n                var endDate = $endDate.datepicker('getDate');\n                var startTime = startDate ? startDate.getTime() : null;\n                var endTime = endDate ? endDate.getTime() : null;\n\n                var $options = $ul.find('a');\n                var $option;\n                var foundOption = false;\n\n                for (var i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            var btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            var $btn = $('<div class=\"'+btnClasses+'\" data-icon=\"date\"/>')\n                .text(Craft.t('app', 'All'));\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label || config.instructions) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                if (label) {\n                    var $label = $('<label/>', {\n                        'id': config.labelId || (config.id ? config.id + '-label' : null),\n                        'class': (config.required ? 'required' : null),\n                        'for': config.id,\n                        text: label\n                    }).appendTo($heading);\n\n                    if (siteId) {\n                        for (var i = 0; i < Craft.sites.length; i++) {\n                            if (Craft.sites[i].id == siteId) {\n                                $('<span class=\"site\"/>').text(Craft.sites[i].name).appendTo($label);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (config.instructions) {\n                    $('<div class=\"instructions\"/>').text(config.instructions).appendTo($heading);\n                }\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}