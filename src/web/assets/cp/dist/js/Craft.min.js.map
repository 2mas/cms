{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","i","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","isArray","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","window","cmsLicenseKey","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","arr","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","key","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","obj","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","removeFromArray","index","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","remove","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","$scrollContainer","scrollTop","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","ADD_FX_DURATION","REMOVE_FX_DURATION","show","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","resume","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","allowDegreeFractions","isImagick","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","$uploadFileInput","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","replaceFileInput","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_canvasSupported","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","$innerProgressBar","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","validateDeleteInputs","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$notesTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","newSites","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","autosaveDrafts","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","site","siteStatuses","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","addlSiteOptions","addlSiteIds","serializedStatuses","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_removeField","_updateSiteStatuses","$field","overflow","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","$lightswitch","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnsavedDraft","saveDraft","isActive","draftNotes","$spinners","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","applyDraftAction","canDeleteDraft","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","currentTargets","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$deleteLink","saveMeta","onMetaHudHide","onMetaHudEscape","onNotesKeydown","shakeMetaHud","deleteDraft","deleteDraftAction","handleFormSubmit","abort","hashedRedirectUrl","enabledGlobally","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","iFrameResize","checkOrigin","scrolling","onInit","iframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","inputmode","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","num","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        $uploadFileInput: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        disableAddElementsBtn: function() {\n            this.base();\n\n            if (this.$uploadBtn && !this.$uploadBtn.hasClass('disabled')) {\n                this.$uploadBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$uploadBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    } else {\n                        this.$uploadBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            this.base();\n\n            if (this.$uploadBtn && this.$uploadBtn.hasClass('disabled')) {\n                this.$uploadBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$uploadBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    } else {\n                        this.$uploadBtn.show();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                replaceFileInput: false, // https://stackoverflow.com/a/25034721/1688568\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                this.$uploadFileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    this.$uploadFileInput.trigger('click');\n                }, this));\n                options.fileInput = this.$uploadFileInput;\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.settings.draftNotes = $('#revision-notes').val();\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Remove the revision notes field\n                        $('#revision-notes').remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            if (this.settings.draftNotes !== null) {\n                data += `&draftNotes=${this.settings.draftNotes}`;\n            }\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        $uploadFileInput: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        disableAddElementsBtn: function() {\n            this.base();\n\n            if (this.$uploadBtn && !this.$uploadBtn.hasClass('disabled')) {\n                this.$uploadBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$uploadBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    } else {\n                        this.$uploadBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            this.base();\n\n            if (this.$uploadBtn && this.$uploadBtn.hasClass('disabled')) {\n                this.$uploadBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$uploadBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    } else {\n                        this.$uploadBtn.show();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                replaceFileInput: false, // https://stackoverflow.com/a/25034721/1688568\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                this.$uploadFileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    this.$uploadFileInput.trigger('click');\n                }, this));\n                options.fileInput = this.$uploadFileInput;\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.settings.draftNotes = $('#revision-notes').val();\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Remove the revision notes field\n                        $('#revision-notes').remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            if (this.settings.draftNotes !== null) {\n                data += `&draftNotes=${this.settings.draftNotes}`;\n            }\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}