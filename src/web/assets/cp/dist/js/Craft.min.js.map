{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","i","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","isArray","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","arr","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","key","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","obj","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","removeFromArray","index","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","role","title","remove","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","$hud","$body","hide","switchSite","serialize","newSiteId","reloadForm","refreshInitialData","$instructions","requestAnimationFrame","headHtml","footHtml","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","shortcutManager","registerShortcut","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionClass","actionParams","selectedElementIds","getSelectedElementIds","viewParams","elementAction","elementIds","submitActionsAction","afterAction","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_deinitSources","_collapseSource","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","data-icon","$nextBtn","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$limitField","createTextField","placeholder","submitting","isNaN","data-action","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","$scrollContainer","scrollTop","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","ADD_FX_DURATION","REMOVE_FX_DURATION","show","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","resume","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","allowDegreeFractions","isImagick","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","x","y","allowSavingAsNew","saveImage","$shade","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","_attachUploader","defaultFieldLayoutId","formData","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","ALT_KEY","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","$label","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_canvasSupported","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","$innerProgressBar","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","style","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","idParam","contentSummary","$deleteSubmitBtn","validateDeleteInputs","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$notesTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","newSites","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","site","siteStatuses","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","addlSiteOptions","addlSiteIds","serializedStatuses","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_removeField","_updateSiteStatuses","$field","overflow","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","$lightswitch","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnsavedDraft","saveDraft","isActive","$spinners","$statusIcons","saveDraftAction","prepareData","docTitle","draftName","draftNotes","revisionMenu","draftCreated","newHref","anchorPos","$saveBtnContainer","applyDraftAction","$saveDraftBtn","canDeleteDraft","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","swapDuplicatedElementIds","getDeltaNames","oldId","currentTargets","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$deleteLink","saveMeta","onMetaHudHide","onMetaHudEscape","onNotesKeydown","shakeMetaHud","deleteDraft","deleteDraftAction","handleFormSubmit","abort","hashedRedirectUrl","enabledGlobally","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$unusedFieldContainer","$newTabBtn","$allFields","tabGrid","unusedFieldGrid","tabDrag","fieldDrag","gridSettings","initTab","FieldDrag","customizableTabs","TabDrag","$editBtn","$fields","initField","onTabOptionSelect","renameTab","deleteTab","onFieldOptionSelect","toggleRequiredField","removeField","$labelSpan","getFieldInputName","removeFieldById","requiredFieldInputName","refreshCols","$group","addTab","tabName","fieldInputName","BaseDrag","Drag","designer","$insertion","showingInsertion","$caboose","draggingUnusedItem","addToTabGrid","getInsertion","addCaboose","setMidpoints","getItemContainer","isItemInTabContainer","onDrag","hitTest","_closestItem","getClosestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","draggeeDisplay","visibility","$hiddenFields","$fieldContainers","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","getToggleVal","postVal","onToggleChange","hideTarget","showTarget","_show","_currentHeight","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","console","_onSettle","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","ESC_KEY","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","resetScroll","refresh","frameborder","iFrameResize","checkOrigin","scrolling","onInit","iframe","afterUpdateIframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$cancelButton","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","$selectedOption","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","helpers","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","config","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","step","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","num","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","required","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n                let params = $form.data('params') || {};\n                if ($form.data('param')) {\n                    params[$form.data('param')] = $form.data('value');\n                }\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<div/>', {\n                                class: 'clear-btn',\n                                role: 'button',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            }\n            else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            }\n            else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            }\n            else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttonsContainer);\n                this.$saveBtn = $('<input class=\"btn submit\" type=\"submit\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                }\n                else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({ siteId: newSiteId }, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            var $instructions = this.$fieldsContainer.find('> .meta > .field > .heading > .instructions');\n\n            for (var i = 0; i < $instructions.length; i++) {\n                $instructions.eq(i)\n                    .replaceWith($('<span/>', {\n                        'class': 'info',\n                        'html': $instructions.eq(i).children().html()\n                    }))\n                    .infoicon();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            }\n                            else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    }\n                    else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(actionClass, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            // Find the action\n            var action;\n\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    action = this.actions[i];\n                    break;\n                }\n            }\n\n            if (!action || (action.confirm && !confirm(action.confirm))) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, actionParams, {\n                elementAction: actionClass,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                this.setSortDirection(attr === 'score' ? 'desc' : 'asc');\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    var sourceViewMode = this.sourceViewModes[i];\n\n                    var $viewModeBtn = $('<div data-view=\"' + sourceViewMode.mode + '\" role=\"button\"' +\n                        ' class=\"btn' + (typeof sourceViewMode.className !== 'undefined' ? ' ' + sourceViewMode.className : '') + '\"' +\n                        ' title=\"' + sourceViewMode.title + '\"' +\n                        (typeof sourceViewMode.icon !== 'undefined' ? ' data-icon=\"' + sourceViewMode.icon + '\"' : '') +\n                        '/>'\n                    ).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $form.data('action'),\n                params = Garnish.getPostData($form);\n\n            this.submitAction(actionClass, params);\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $option.data('action');\n            this.submitAction(actionClass);\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page > 1 ? '' : ' disabled'),\n                                'data-icon': 'leftangle',\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page < totalPages ? '' : ' disabled'),\n                                'data-icon': 'rightangle',\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action.type)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<div class=\"btn menubtn\" data-icon=\"settings\" title=\"' + Craft.t('app', 'Actions') + '\"/>').appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<input/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                value: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    var actionClass = actions[i].type;\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actionClass) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        'data-action': actionClass,\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            var $selectedElements = this.getSelectedElements(),\n                ids = [];\n\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<div class=\"btn disabled submit\">' + Craft.t('app', 'Select') + '</div>').appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn cancel\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n            this.$replaceBtn = $('<div class=\"btn submit save replace\">' + Craft.t('app', 'Save') + '</div>').appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<div class=\"btn submit save copy\">' + Craft.t('app', 'Save as a new asset') + '</div>').appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n        \n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<div class=\"btn submit\" data-icon=\"upload\" style=\"position: relative; overflow: hidden;\" role=\"button\">' + Craft.t('app', 'Upload files') + '</div>');\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<div class=\"btn menubtn disabled\">' + Craft.t('app', 'Select transform') + '</div>').appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                var $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"/>').appendTo($form),\n                    $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                    $logoutBtn = $('<div class=\"btn\">' + Craft.t('app', 'Log out now') + '</div>').appendTo($buttons),\n                    $renewSessionBtn = $('<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('app', 'Keep me logged in') + '\" />').appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Login') + '\" />').appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {keyCode: Garnish.S_KEY, ctrl: true},\n                        {redirect: this.$primaryForm.data('saveshortcut-redirect')}\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n\n            // Listen for Option/ALT presses\n            this.addListener(Garnish.$win, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.addClass('altkeydown');\n                }\n            });\n            this.addListener(Garnish.$win, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.removeClass('altkeydown');\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New category') + '</div>').appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn\" role=\"button\"/>').text(Craft.t('app', 'Cancel')).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\"/>').text(Craft.t('app', 'Save')).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<div class=\"btn submit add icon\"/>').text(Craft.t('app', 'New heading')).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            var $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod),\n                $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<div class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</div>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form),\n                $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                $cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + (Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user')) + '\" />').appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.$revisionBtn = $('#revision-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            this.listenForChanges();\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled everywhere'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<a/>', {\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#revision-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId) {\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId) {\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons().removeClass('invisible checkmark-icon alert-icon').addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the Save button with an Update button, if there is one.\n                        // Otherwise, the user must not have permission to update the source element\n                        var $saveBtnContainer = $('#save-btn-container');\n                        if ($saveBtnContainer.length) {\n                            $saveBtnContainer.replaceWith($('<input/>', {\n                                type: 'button',\n                                'class': 'btn secondary formsubmit',\n                                value: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).formsubmit());\n                        }\n\n                        // Remove the \"Save as a Draft\" button\n                        var $saveDraftBtn = $('#save-draft-btn-container');\n                        $saveDraftBtn.add($saveDraftBtn.prev('.spacer')).remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    $.extend(this.duplicatedElements, response.duplicatedElements);\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            for (var oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    data = data\n                        .replace(\n                            new RegExp(Craft.escapeRegex(encodeURIComponent('][' + oldId + ']')), 'g'),\n                            '][' + this.duplicatedElements[oldId] + ']'\n                        )\n                        .replace(\n                            new RegExp('=' + oldId + '\\\\b', 'g'),\n                            '=' + this.duplicatedElements[oldId]\n                        );\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            this.statusIcons()\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If we're editing a (saved) draft and the shortcut was used, just force-check the form immediately\n            if (ev.saveShortcut && !this.settings.isUnsavedDraft && this.settings.draftId) {\n                this.checkForm(true);\n                return;\n            }\n\n            // If we're editing a draft, this isn't a custom trigger, and the user isn't allowed to update the source,\n            // then ignore the submission\n            if (!ev.customTrigger && !this.settings.isUnsavedDraft && this.settings.draftId && !this.settings.canUpdateSource) {\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Submit') + '\" />').appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New entry') + '</div>').appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend(\n    {\n        $container: null,\n        $tabContainer: null,\n        $unusedFieldContainer: null,\n        $newTabBtn: null,\n        $allFields: null,\n\n        tabGrid: null,\n        unusedFieldGrid: null,\n\n        tabDrag: null,\n        fieldDrag: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n            this.$tabContainer = this.$container.children('.fld-tabs');\n            this.$unusedFieldContainer = this.$container.children('.unusedfields');\n            this.$newTabBtn = this.$container.find('> .newtabbtn-container > .btn');\n            this.$allFields = this.$unusedFieldContainer.find('.fld-field');\n\n            // Set up the layout grids\n            this.tabGrid = new Craft.Grid(this.$tabContainer, Craft.FieldLayoutDesigner.gridSettings);\n            this.unusedFieldGrid = new Craft.Grid(this.$unusedFieldContainer, Craft.FieldLayoutDesigner.gridSettings);\n\n            var $tabs = this.$tabContainer.children();\n            for (var i = 0; i < $tabs.length; i++) {\n                this.initTab($($tabs[i]));\n            }\n\n            this.fieldDrag = new Craft.FieldLayoutDesigner.FieldDrag(this);\n\n            if (this.settings.customizableTabs) {\n                this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n                this.addListener(this.$newTabBtn, 'activate', 'addTab');\n            }\n        },\n\n        initTab: function($tab) {\n            if (this.settings.customizableTabs) {\n                var $editBtn = $tab.find('.tabs .settings'),\n                    $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                    $ul = $('<ul/>').appendTo($menu);\n\n                $('<li><a data-action=\"rename\">' + Craft.t('app', 'Rename') + '</a></li>').appendTo($ul);\n                $('<li><a data-action=\"delete\">' + Craft.t('app', 'Delete') + '</a></li>').appendTo($ul);\n\n                new Garnish.MenuBtn($editBtn, {\n                    onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n                });\n            }\n\n            // Don't forget the fields!\n            var $fields = $tab.children('.fld-tabcontent').children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                this.initField($($fields[i]));\n            }\n        },\n\n        initField: function($field) {\n            var $editBtn = $field.find('.settings'),\n                $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                $ul = $('<ul/>').appendTo($menu);\n\n            if ($field.hasClass('fld-required')) {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make not required') + '</a></li>').appendTo($ul);\n            }\n            else {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make required') + '</a></li>').appendTo($ul);\n            }\n\n            $('<li><a data-action=\"remove\">' + Craft.t('app', 'Remove') + '</a></li>').appendTo($ul);\n\n            new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onFieldOptionSelect')\n            });\n        },\n\n        onTabOptionSelect: function(option) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $option = $(option),\n                $tab = $option.data('menu').$anchor.parent().parent().parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'rename': {\n                    this.renameTab($tab);\n                    break;\n                }\n                case 'delete': {\n                    this.deleteTab($tab);\n                    break;\n                }\n            }\n        },\n\n        onFieldOptionSelect: function(option) {\n            var $option = $(option),\n                $field = $option.data('menu').$anchor.parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'toggle-required': {\n                    this.toggleRequiredField($field, $option);\n                    break;\n                }\n                case 'remove': {\n                    this.removeField($field);\n                    break;\n                }\n            }\n        },\n\n        renameTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $labelSpan = $tab.find('.tabs .tab span'),\n                oldName = $labelSpan.text(),\n                newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n            if (newName && newName !== oldName) {\n                $labelSpan.text(newName);\n                $tab.find('.id-input').attr('name', this.getFieldInputName(newName));\n            }\n        },\n\n        deleteTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            // Find all the fields in this tab\n            var $fields = $tab.find('.fld-field');\n\n            for (var i = 0; i < $fields.length; i++) {\n                var fieldId = $($fields[i]).attr('data-id');\n                this.removeFieldById(fieldId);\n            }\n\n            this.tabGrid.removeItems($tab);\n            this.tabDrag.removeItems($tab);\n\n            $tab.remove();\n        },\n\n        toggleRequiredField: function($field, $option) {\n            if ($field.hasClass('fld-required')) {\n                $field.removeClass('fld-required');\n                $field.find('.required-input').remove();\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make required'));\n                }, 500);\n            }\n            else {\n                $field.addClass('fld-required');\n                $('<input class=\"required-input\" type=\"hidden\" name=\"' + this.settings.requiredFieldInputName + '\" value=\"' + $field.data('id') + '\">').appendTo($field);\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make not required'));\n                }, 500);\n            }\n        },\n\n        removeField: function($field) {\n            var fieldId = $field.attr('data-id');\n\n            $field.remove();\n\n            this.removeFieldById(fieldId);\n            this.tabGrid.refreshCols(true);\n        },\n\n        removeFieldById: function(fieldId) {\n            var $field = this.$allFields.filter('[data-id=' + fieldId + ']:first'),\n                $group = $field.closest('.fld-tab');\n\n            $field.removeClass('hidden');\n\n            if ($group.hasClass('hidden')) {\n                $group.removeClass('hidden');\n                this.unusedFieldGrid.addItems($group);\n\n                if (this.settings.customizableTabs) {\n                    this.tabDrag.addItems($group);\n                }\n            }\n            else {\n                this.unusedFieldGrid.refreshCols(true);\n            }\n        },\n\n        addTab: function() {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $tab = $('<div class=\"fld-tab\">' +\n                '<div class=\"tabs\">' +\n                '<div class=\"tab sel draggable\">' +\n                '<span>Tab ' + (this.tabGrid.$items.length + 1) + '</span>' +\n                '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Rename') + '\"></a>' +\n                '</div>' +\n                '</div>' +\n                '<div class=\"fld-tabcontent\"></div>' +\n                '</div>').appendTo(this.$tabContainer);\n\n            this.tabGrid.addItems($tab);\n            this.tabDrag.addItems($tab);\n\n            this.initTab($tab);\n        },\n\n        getFieldInputName: function(tabName) {\n            return this.settings.fieldInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n        }\n    },\n    {\n        gridSettings: {\n            itemSelector: '.fld-tab:not(.hidden)',\n            minColWidth: 240,\n            fillMode: 'grid',\n            snapToGrid: 30\n        },\n        defaults: {\n            customizableTabs: true,\n            fieldInputName: 'fieldLayout[__TAB_NAME__][]',\n            requiredFieldInputName: 'requiredFields[]'\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend(\n    {\n        designer: null,\n        $insertion: null,\n        showingInsertion: false,\n        $caboose: null,\n        draggingUnusedItem: false,\n        addToTabGrid: false,\n\n        /**\n         * Constructor\n         */\n        init: function(designer, settings) {\n            this.designer = designer;\n\n            // Find all the items from both containers\n            var $items = this.designer.$tabContainer.find(this.itemSelector)\n                .add(this.designer.$unusedFieldContainer.find(this.itemSelector));\n\n            this.base($items, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.base();\n\n            // Are we dragging an unused item?\n            this.draggingUnusedItem = this.$draggee.hasClass('unused');\n\n            // Create the insertion\n            this.$insertion = this.getInsertion();\n\n            // Add the caboose\n            this.addCaboose();\n            this.$items = $().add(this.$items.add(this.$caboose));\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.addItems(this.$caboose);\n            }\n\n            // Swap the draggee with the insertion if dragging a selected item\n            if (this.draggingUnusedItem) {\n                this.showingInsertion = false;\n            }\n            else {\n                // Actually replace the draggee with the insertion\n                this.$insertion.insertBefore(this.$draggee);\n                this.$draggee.detach();\n                this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n                this.showingInsertion = true;\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$draggee);\n                    this.designer.tabGrid.addItems(this.$insertion);\n                }\n            }\n\n            this.setMidpoints();\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: $.noop,\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: $.noop,\n\n        /**\n         * Tests if an item is within the tab container.\n         */\n        isItemInTabContainer: function($item) {\n            return (this.getItemContainer($item)[0] === this.designer.$tabContainer[0]);\n        },\n\n        /**\n         * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n         */\n        setMidpoints: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                var $item = $(this.$items[i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer($item)) {\n                    continue;\n                }\n\n                var offset = $item.offset();\n\n                $item.data('midpoint', {\n                    left: offset.left + $item.outerWidth() / 2,\n                    top: offset.top + $item.outerHeight() / 2\n                });\n            }\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // Are we hovering over the tab container?\n            if (this.draggingUnusedItem && !Garnish.hitTest(this.mouseX, this.mouseY, this.designer.$tabContainer)) {\n                if (this.showingInsertion) {\n                    this.$insertion.remove();\n                    this.$items = $().add(this.$items.not(this.$insertion));\n                    this.showingInsertion = false;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.removeItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                this.onDrag._closestItem = this.getClosestItem();\n\n                if (this.onDrag._closestItem !== this.$insertion[0]) {\n                    if (this.showingInsertion &&\n                        ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.onDrag._closestItem, this.$items)) &&\n                        ($.inArray(this.onDrag._closestItem, this.$caboose) === -1)\n                    ) {\n                        this.$insertion.insertAfter(this.onDrag._closestItem);\n                    }\n                    else {\n                        this.$insertion.insertBefore(this.onDrag._closestItem);\n                    }\n\n                    this.$items = $().add(this.$items.add(this.$insertion));\n                    this.showingInsertion = true;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.addItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        getClosestItem: function() {\n            this.getClosestItem._closestItem = null;\n            this.getClosestItem._closestItemMouseDiff = null;\n\n            for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n                this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer(this.getClosestItem._$item)) {\n                    continue;\n                }\n\n                this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n                this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n                if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                    this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                    this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n                }\n            }\n\n            return this.getClosestItem._closestItem;\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.showingInsertion) {\n                this.$insertion.replaceWith(this.$draggee);\n                this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$insertion);\n                    this.designer.tabGrid.addItems(this.$draggee);\n                }\n            }\n\n            // Drop the caboose\n            this.$items = this.$items.not(this.$caboose);\n            this.$caboose.remove();\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.removeItems(this.$caboose);\n            }\n\n            // \"show\" the drag items, but make them invisible\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'hidden'\n            });\n\n            this.designer.tabGrid.refreshCols(true);\n            this.designer.unusedFieldGrid.refreshCols(true);\n\n            // return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab',\n        addToTabGrid: true,\n\n        /**\n         * Constructor\n         */\n        init: function(designer) {\n            var settings = {\n                handle: '.tab'\n            };\n\n            this.base(designer, settings);\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            var $tab = this.$draggee.find('.tab');\n\n            return $('<div class=\"fld-tab fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\">' +\n                '<div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ' + $tab.width() + 'px; height: ' + $tab.height() + 'px;\"></div></div>' +\n                '<div class=\"fld-tabcontent\" style=\"height: ' + this.$draggee.find('.fld-tabcontent').height() + 'px;\"></div>' +\n                '</div>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new tab based on that field group\n                var $tab = this.$draggee.clone().removeClass('unused'),\n                    tabName = $tab.find('.tab span').text();\n\n                $tab.find('.fld-field').removeClass('unused');\n\n                // Add the edit button\n                $tab.find('.tabs .tab').append('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                // Remove any hidden fields\n                var $fields = $tab.find('.fld-field'),\n                    $hiddenFields = $fields.filter('.hidden').remove();\n\n                $fields = $fields.not($hiddenFields);\n                $fields.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                for (var i = 0; i < $fields.length; i++) {\n                    var $field = $($fields[i]),\n                        inputName = this.designer.getFieldInputName(tabName);\n\n                    $field.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + $field.data('id') + '\">');\n                }\n\n                this.designer.fieldDrag.addItems($fields);\n\n                this.designer.initTab($tab);\n\n                // Set the unused field group and its fields to hidden\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n                this.$draggee.find('.fld-field').addClass('hidden');\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $tab;\n\n                // Remember it for later\n                this.addItems($tab);\n\n                // Update the grids\n                this.designer.tabGrid.addItems($tab);\n                this.designer.unusedFieldGrid.removeItems(this.$draggee);\n            }\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.FieldDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab .fld-field',\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $();\n\n            var $fieldContainers = this.designer.$tabContainer.children().children('.fld-tabcontent');\n\n            for (var i = 0; i < $fieldContainers.length; i++) {\n                var $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo($fieldContainers[i]);\n                this.$caboose = this.$caboose.add($caboose);\n            }\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            return $('<div class=\"fld-field fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\"/>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent().parent().parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new field based on that one\n                var $field = this.$draggee.clone().removeClass('unused');\n                $field.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n                this.designer.initField($field);\n\n                // Hide the unused field\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                // Hide the group too?\n                if (this.$draggee.siblings(':not(.hidden)').length === 0) {\n                    var $group = this.$draggee.parent().parent();\n                    $group.addClass('hidden');\n                    this.designer.unusedFieldGrid.removeItems($group);\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $field;\n\n                // Remember it for later\n                this.addItems($field);\n            }\n\n            if (this.showingInsertion) {\n                // Find the field's new tab name\n                var tabName = this.$insertion.parent().parent().find('.tab span').text(),\n                    inputName = this.designer.getFieldInputName(tabName);\n\n                if (this.draggingUnusedItem) {\n                    this.$draggee.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + this.$draggee.data('id') + '\">');\n                }\n                else {\n                    this.$draggee.find('.id-input').attr('name', inputName);\n                }\n            }\n\n            this.base();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            }\n            else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n            }\n            else {\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            if (\n                (this.$toggle.prop('nodeName') === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n            else if (this.$toggle.prop('nodeName') === 'SELECT') {\n                return 'select';\n            }\n            else if (this.$toggle.prop('nodeName') === 'A') {\n                return 'link';\n            }\n        },\n\n        findTargets: function() {\n            if (this.type === 'select') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            }\n            else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal = Garnish.getInputPostVal(this.$toggle);\n            return postVal === null ? null : postVal.replace(/[\\[\\]\\\\\\/]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            }\n            else {\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                }\n                else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                }\n                else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    $target.height('auto');\n                    this.showTarget._targetHeight = $target.height();\n                    $target.css({\n                        height: this.showTarget._currentHeight,\n                        overflow: 'hidden'\n                    });\n\n                    $target.velocity('stop');\n\n                    $target.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                        $target.css({\n                            height: '',\n                            overflow: ''\n                        });\n                    });\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select') {\n                    $target.addClass('hidden');\n                }\n                else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    $target.css('overflow', 'hidden');\n                    $target.velocity('stop');\n                    $target.velocity({height: 0}, 'fast', function() {\n                        $target.addClass('hidden');\n                    });\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function() {\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange();\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                var $saveBtn = $('<div class=\"btn submit\">' + Craft.t('app', 'Save') + '</div>').appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<div/>', {\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                        role: 'btn',\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: $.proxy(function(option) {\n                            this.switchTarget($(option).data('target'));\n                        }, this)\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', function() {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                }.bind(this));\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this._slideInOnIframeLoad = true;\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            }, this));\n        },\n\n        close: function() {\n            if (!this.isActive) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(function(url) {\n                // Maintain the current scroll position?\n                if (!resetScroll && this.iframeLoaded && this.$iframe) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                // Keep the iframe height consistent with its content\n                iFrameResize({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, $iframe[0])\n\n                this.url = url;\n                this.$iframe = $iframe;\n                this.afterUpdateIframe();\n            }.bind(this));\n        },\n\n        afterUpdateIframe: function() {\n            this.trigger('afterUpdateIframe', {\n                target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        var $cancelButton = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$promptButtons),\n            $submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'OK') + '\" />').appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelButton, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> td > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> td > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> td .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('td[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<div class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            return $container.lightswitch();\n        },\n\n        createLightswitchField: function(config) {\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                var startDate = $startDate.datepicker('getDate');\n                var endDate = $endDate.datepicker('getDate');\n                var startTime = startDate ? startDate.getTime() : null;\n                var endTime = endDate ? endDate.getTime() : null;\n\n                var $options = $ul.find('a');\n                var $option;\n                var foundOption = false;\n\n                for (var i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            var btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            var $btn = $('<div class=\"'+btnClasses+'\" data-icon=\"date\"/>')\n                .text(Craft.t('app', 'All'));\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label || config.instructions) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                if (label) {\n                    var $label = $('<label/>', {\n                        'id': config.labelId || (config.id ? config.id + '-label' : null),\n                        'class': (config.required ? 'required' : null),\n                        'for': config.id,\n                        text: label\n                    }).appendTo($heading);\n\n                    if (siteId) {\n                        for (var i = 0; i < Craft.sites.length; i++) {\n                            if (Craft.sites[i].id == siteId) {\n                                $('<span class=\"site\"/>').text(Craft.sites[i].name).appendTo($label);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (config.instructions) {\n                    $('<div class=\"instructions\"/>').text(config.instructions).appendTo($heading);\n                }\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n                let params = $form.data('params') || {};\n                if ($form.data('param')) {\n                    params[$form.data('param')] = $form.data('value');\n                }\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<div/>', {\n                                class: 'clear-btn',\n                                role: 'button',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            }\n            else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            }\n            else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            }\n            else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttonsContainer);\n                this.$saveBtn = $('<input class=\"btn submit\" type=\"submit\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                }\n                else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({ siteId: newSiteId }, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            var $instructions = this.$fieldsContainer.find('> .meta > .field > .heading > .instructions');\n\n            for (var i = 0; i < $instructions.length; i++) {\n                $instructions.eq(i)\n                    .replaceWith($('<span/>', {\n                        'class': 'info',\n                        'html': $instructions.eq(i).children().html()\n                    }))\n                    .infoicon();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            }\n                            else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    }\n                    else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(actionClass, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            // Find the action\n            var action;\n\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    action = this.actions[i];\n                    break;\n                }\n            }\n\n            if (!action || (action.confirm && !confirm(action.confirm))) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, actionParams, {\n                elementAction: actionClass,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                this.setSortDirection(attr === 'score' ? 'desc' : 'asc');\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    var sourceViewMode = this.sourceViewModes[i];\n\n                    var $viewModeBtn = $('<div data-view=\"' + sourceViewMode.mode + '\" role=\"button\"' +\n                        ' class=\"btn' + (typeof sourceViewMode.className !== 'undefined' ? ' ' + sourceViewMode.className : '') + '\"' +\n                        ' title=\"' + sourceViewMode.title + '\"' +\n                        (typeof sourceViewMode.icon !== 'undefined' ? ' data-icon=\"' + sourceViewMode.icon + '\"' : '') +\n                        '/>'\n                    ).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $form.data('action'),\n                params = Garnish.getPostData($form);\n\n            this.submitAction(actionClass, params);\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $option.data('action');\n            this.submitAction(actionClass);\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page > 1 ? '' : ' disabled'),\n                                'data-icon': 'leftangle',\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page < totalPages ? '' : ' disabled'),\n                                'data-icon': 'rightangle',\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action.type)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<div class=\"btn menubtn\" data-icon=\"settings\" title=\"' + Craft.t('app', 'Actions') + '\"/>').appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<input/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                value: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    var actionClass = actions[i].type;\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actionClass) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        'data-action': actionClass,\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            var $selectedElements = this.getSelectedElements(),\n                ids = [];\n\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<div class=\"btn disabled submit\">' + Craft.t('app', 'Select') + '</div>').appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn cancel\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n            this.$replaceBtn = $('<div class=\"btn submit save replace\">' + Craft.t('app', 'Save') + '</div>').appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<div class=\"btn submit save copy\">' + Craft.t('app', 'Save as a new asset') + '</div>').appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n        \n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<div class=\"btn submit\" data-icon=\"upload\" style=\"position: relative; overflow: hidden;\" role=\"button\">' + Craft.t('app', 'Upload files') + '</div>');\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<div class=\"btn menubtn disabled\">' + Craft.t('app', 'Select transform') + '</div>').appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                var $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"/>').appendTo($form),\n                    $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                    $logoutBtn = $('<div class=\"btn\">' + Craft.t('app', 'Log out now') + '</div>').appendTo($buttons),\n                    $renewSessionBtn = $('<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('app', 'Keep me logged in') + '\" />').appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Login') + '\" />').appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {keyCode: Garnish.S_KEY, ctrl: true},\n                        {redirect: this.$primaryForm.data('saveshortcut-redirect')}\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n\n            // Listen for Option/ALT presses\n            this.addListener(Garnish.$win, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.addClass('altkeydown');\n                }\n            });\n            this.addListener(Garnish.$win, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.removeClass('altkeydown');\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New category') + '</div>').appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn\" role=\"button\"/>').text(Craft.t('app', 'Cancel')).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\"/>').text(Craft.t('app', 'Save')).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<div class=\"btn submit add icon\"/>').text(Craft.t('app', 'New heading')).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            var $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod),\n                $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<div class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</div>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form),\n                $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                $cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + (Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user')) + '\" />').appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.$revisionBtn = $('#revision-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            this.listenForChanges();\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled everywhere'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<a/>', {\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#revision-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId) {\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId) {\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons().removeClass('invisible checkmark-icon alert-icon').addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the Save button with an Update button, if there is one.\n                        // Otherwise, the user must not have permission to update the source element\n                        var $saveBtnContainer = $('#save-btn-container');\n                        if ($saveBtnContainer.length) {\n                            $saveBtnContainer.replaceWith($('<input/>', {\n                                type: 'button',\n                                'class': 'btn secondary formsubmit',\n                                value: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).formsubmit());\n                        }\n\n                        // Remove the \"Save as a Draft\" button\n                        var $saveDraftBtn = $('#save-draft-btn-container');\n                        $saveDraftBtn.add($saveDraftBtn.prev('.spacer')).remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    $.extend(this.duplicatedElements, response.duplicatedElements);\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            for (var oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    data = data\n                        .replace(\n                            new RegExp(Craft.escapeRegex(encodeURIComponent('][' + oldId + ']')), 'g'),\n                            '][' + this.duplicatedElements[oldId] + ']'\n                        )\n                        .replace(\n                            new RegExp('=' + oldId + '\\\\b', 'g'),\n                            '=' + this.duplicatedElements[oldId]\n                        );\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            this.statusIcons()\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If we're editing a (saved) draft and the shortcut was used, just force-check the form immediately\n            if (ev.saveShortcut && !this.settings.isUnsavedDraft && this.settings.draftId) {\n                this.checkForm(true);\n                return;\n            }\n\n            // If we're editing a draft, this isn't a custom trigger, and the user isn't allowed to update the source,\n            // then ignore the submission\n            if (!ev.customTrigger && !this.settings.isUnsavedDraft && this.settings.draftId && !this.settings.canUpdateSource) {\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Submit') + '\" />').appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New entry') + '</div>').appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend(\n    {\n        $container: null,\n        $tabContainer: null,\n        $unusedFieldContainer: null,\n        $newTabBtn: null,\n        $allFields: null,\n\n        tabGrid: null,\n        unusedFieldGrid: null,\n\n        tabDrag: null,\n        fieldDrag: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n            this.$tabContainer = this.$container.children('.fld-tabs');\n            this.$unusedFieldContainer = this.$container.children('.unusedfields');\n            this.$newTabBtn = this.$container.find('> .newtabbtn-container > .btn');\n            this.$allFields = this.$unusedFieldContainer.find('.fld-field');\n\n            // Set up the layout grids\n            this.tabGrid = new Craft.Grid(this.$tabContainer, Craft.FieldLayoutDesigner.gridSettings);\n            this.unusedFieldGrid = new Craft.Grid(this.$unusedFieldContainer, Craft.FieldLayoutDesigner.gridSettings);\n\n            var $tabs = this.$tabContainer.children();\n            for (var i = 0; i < $tabs.length; i++) {\n                this.initTab($($tabs[i]));\n            }\n\n            this.fieldDrag = new Craft.FieldLayoutDesigner.FieldDrag(this);\n\n            if (this.settings.customizableTabs) {\n                this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n                this.addListener(this.$newTabBtn, 'activate', 'addTab');\n            }\n        },\n\n        initTab: function($tab) {\n            if (this.settings.customizableTabs) {\n                var $editBtn = $tab.find('.tabs .settings'),\n                    $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                    $ul = $('<ul/>').appendTo($menu);\n\n                $('<li><a data-action=\"rename\">' + Craft.t('app', 'Rename') + '</a></li>').appendTo($ul);\n                $('<li><a data-action=\"delete\">' + Craft.t('app', 'Delete') + '</a></li>').appendTo($ul);\n\n                new Garnish.MenuBtn($editBtn, {\n                    onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n                });\n            }\n\n            // Don't forget the fields!\n            var $fields = $tab.children('.fld-tabcontent').children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                this.initField($($fields[i]));\n            }\n        },\n\n        initField: function($field) {\n            var $editBtn = $field.find('.settings'),\n                $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                $ul = $('<ul/>').appendTo($menu);\n\n            if ($field.hasClass('fld-required')) {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make not required') + '</a></li>').appendTo($ul);\n            }\n            else {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make required') + '</a></li>').appendTo($ul);\n            }\n\n            $('<li><a data-action=\"remove\">' + Craft.t('app', 'Remove') + '</a></li>').appendTo($ul);\n\n            new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onFieldOptionSelect')\n            });\n        },\n\n        onTabOptionSelect: function(option) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $option = $(option),\n                $tab = $option.data('menu').$anchor.parent().parent().parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'rename': {\n                    this.renameTab($tab);\n                    break;\n                }\n                case 'delete': {\n                    this.deleteTab($tab);\n                    break;\n                }\n            }\n        },\n\n        onFieldOptionSelect: function(option) {\n            var $option = $(option),\n                $field = $option.data('menu').$anchor.parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'toggle-required': {\n                    this.toggleRequiredField($field, $option);\n                    break;\n                }\n                case 'remove': {\n                    this.removeField($field);\n                    break;\n                }\n            }\n        },\n\n        renameTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $labelSpan = $tab.find('.tabs .tab span'),\n                oldName = $labelSpan.text(),\n                newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n            if (newName && newName !== oldName) {\n                $labelSpan.text(newName);\n                $tab.find('.id-input').attr('name', this.getFieldInputName(newName));\n            }\n        },\n\n        deleteTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            // Find all the fields in this tab\n            var $fields = $tab.find('.fld-field');\n\n            for (var i = 0; i < $fields.length; i++) {\n                var fieldId = $($fields[i]).attr('data-id');\n                this.removeFieldById(fieldId);\n            }\n\n            this.tabGrid.removeItems($tab);\n            this.tabDrag.removeItems($tab);\n\n            $tab.remove();\n        },\n\n        toggleRequiredField: function($field, $option) {\n            if ($field.hasClass('fld-required')) {\n                $field.removeClass('fld-required');\n                $field.find('.required-input').remove();\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make required'));\n                }, 500);\n            }\n            else {\n                $field.addClass('fld-required');\n                $('<input class=\"required-input\" type=\"hidden\" name=\"' + this.settings.requiredFieldInputName + '\" value=\"' + $field.data('id') + '\">').appendTo($field);\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make not required'));\n                }, 500);\n            }\n        },\n\n        removeField: function($field) {\n            var fieldId = $field.attr('data-id');\n\n            $field.remove();\n\n            this.removeFieldById(fieldId);\n            this.tabGrid.refreshCols(true);\n        },\n\n        removeFieldById: function(fieldId) {\n            var $field = this.$allFields.filter('[data-id=' + fieldId + ']:first'),\n                $group = $field.closest('.fld-tab');\n\n            $field.removeClass('hidden');\n\n            if ($group.hasClass('hidden')) {\n                $group.removeClass('hidden');\n                this.unusedFieldGrid.addItems($group);\n\n                if (this.settings.customizableTabs) {\n                    this.tabDrag.addItems($group);\n                }\n            }\n            else {\n                this.unusedFieldGrid.refreshCols(true);\n            }\n        },\n\n        addTab: function() {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $tab = $('<div class=\"fld-tab\">' +\n                '<div class=\"tabs\">' +\n                '<div class=\"tab sel draggable\">' +\n                '<span>Tab ' + (this.tabGrid.$items.length + 1) + '</span>' +\n                '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Rename') + '\"></a>' +\n                '</div>' +\n                '</div>' +\n                '<div class=\"fld-tabcontent\"></div>' +\n                '</div>').appendTo(this.$tabContainer);\n\n            this.tabGrid.addItems($tab);\n            this.tabDrag.addItems($tab);\n\n            this.initTab($tab);\n        },\n\n        getFieldInputName: function(tabName) {\n            return this.settings.fieldInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n        }\n    },\n    {\n        gridSettings: {\n            itemSelector: '.fld-tab:not(.hidden)',\n            minColWidth: 240,\n            fillMode: 'grid',\n            snapToGrid: 30\n        },\n        defaults: {\n            customizableTabs: true,\n            fieldInputName: 'fieldLayout[__TAB_NAME__][]',\n            requiredFieldInputName: 'requiredFields[]'\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend(\n    {\n        designer: null,\n        $insertion: null,\n        showingInsertion: false,\n        $caboose: null,\n        draggingUnusedItem: false,\n        addToTabGrid: false,\n\n        /**\n         * Constructor\n         */\n        init: function(designer, settings) {\n            this.designer = designer;\n\n            // Find all the items from both containers\n            var $items = this.designer.$tabContainer.find(this.itemSelector)\n                .add(this.designer.$unusedFieldContainer.find(this.itemSelector));\n\n            this.base($items, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.base();\n\n            // Are we dragging an unused item?\n            this.draggingUnusedItem = this.$draggee.hasClass('unused');\n\n            // Create the insertion\n            this.$insertion = this.getInsertion();\n\n            // Add the caboose\n            this.addCaboose();\n            this.$items = $().add(this.$items.add(this.$caboose));\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.addItems(this.$caboose);\n            }\n\n            // Swap the draggee with the insertion if dragging a selected item\n            if (this.draggingUnusedItem) {\n                this.showingInsertion = false;\n            }\n            else {\n                // Actually replace the draggee with the insertion\n                this.$insertion.insertBefore(this.$draggee);\n                this.$draggee.detach();\n                this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n                this.showingInsertion = true;\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$draggee);\n                    this.designer.tabGrid.addItems(this.$insertion);\n                }\n            }\n\n            this.setMidpoints();\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: $.noop,\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: $.noop,\n\n        /**\n         * Tests if an item is within the tab container.\n         */\n        isItemInTabContainer: function($item) {\n            return (this.getItemContainer($item)[0] === this.designer.$tabContainer[0]);\n        },\n\n        /**\n         * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n         */\n        setMidpoints: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                var $item = $(this.$items[i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer($item)) {\n                    continue;\n                }\n\n                var offset = $item.offset();\n\n                $item.data('midpoint', {\n                    left: offset.left + $item.outerWidth() / 2,\n                    top: offset.top + $item.outerHeight() / 2\n                });\n            }\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // Are we hovering over the tab container?\n            if (this.draggingUnusedItem && !Garnish.hitTest(this.mouseX, this.mouseY, this.designer.$tabContainer)) {\n                if (this.showingInsertion) {\n                    this.$insertion.remove();\n                    this.$items = $().add(this.$items.not(this.$insertion));\n                    this.showingInsertion = false;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.removeItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                this.onDrag._closestItem = this.getClosestItem();\n\n                if (this.onDrag._closestItem !== this.$insertion[0]) {\n                    if (this.showingInsertion &&\n                        ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.onDrag._closestItem, this.$items)) &&\n                        ($.inArray(this.onDrag._closestItem, this.$caboose) === -1)\n                    ) {\n                        this.$insertion.insertAfter(this.onDrag._closestItem);\n                    }\n                    else {\n                        this.$insertion.insertBefore(this.onDrag._closestItem);\n                    }\n\n                    this.$items = $().add(this.$items.add(this.$insertion));\n                    this.showingInsertion = true;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.addItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        getClosestItem: function() {\n            this.getClosestItem._closestItem = null;\n            this.getClosestItem._closestItemMouseDiff = null;\n\n            for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n                this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer(this.getClosestItem._$item)) {\n                    continue;\n                }\n\n                this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n                this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n                if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                    this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                    this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n                }\n            }\n\n            return this.getClosestItem._closestItem;\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.showingInsertion) {\n                this.$insertion.replaceWith(this.$draggee);\n                this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$insertion);\n                    this.designer.tabGrid.addItems(this.$draggee);\n                }\n            }\n\n            // Drop the caboose\n            this.$items = this.$items.not(this.$caboose);\n            this.$caboose.remove();\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.removeItems(this.$caboose);\n            }\n\n            // \"show\" the drag items, but make them invisible\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'hidden'\n            });\n\n            this.designer.tabGrid.refreshCols(true);\n            this.designer.unusedFieldGrid.refreshCols(true);\n\n            // return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab',\n        addToTabGrid: true,\n\n        /**\n         * Constructor\n         */\n        init: function(designer) {\n            var settings = {\n                handle: '.tab'\n            };\n\n            this.base(designer, settings);\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            var $tab = this.$draggee.find('.tab');\n\n            return $('<div class=\"fld-tab fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\">' +\n                '<div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ' + $tab.width() + 'px; height: ' + $tab.height() + 'px;\"></div></div>' +\n                '<div class=\"fld-tabcontent\" style=\"height: ' + this.$draggee.find('.fld-tabcontent').height() + 'px;\"></div>' +\n                '</div>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new tab based on that field group\n                var $tab = this.$draggee.clone().removeClass('unused'),\n                    tabName = $tab.find('.tab span').text();\n\n                $tab.find('.fld-field').removeClass('unused');\n\n                // Add the edit button\n                $tab.find('.tabs .tab').append('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                // Remove any hidden fields\n                var $fields = $tab.find('.fld-field'),\n                    $hiddenFields = $fields.filter('.hidden').remove();\n\n                $fields = $fields.not($hiddenFields);\n                $fields.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                for (var i = 0; i < $fields.length; i++) {\n                    var $field = $($fields[i]),\n                        inputName = this.designer.getFieldInputName(tabName);\n\n                    $field.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + $field.data('id') + '\">');\n                }\n\n                this.designer.fieldDrag.addItems($fields);\n\n                this.designer.initTab($tab);\n\n                // Set the unused field group and its fields to hidden\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n                this.$draggee.find('.fld-field').addClass('hidden');\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $tab;\n\n                // Remember it for later\n                this.addItems($tab);\n\n                // Update the grids\n                this.designer.tabGrid.addItems($tab);\n                this.designer.unusedFieldGrid.removeItems(this.$draggee);\n            }\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.FieldDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab .fld-field',\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $();\n\n            var $fieldContainers = this.designer.$tabContainer.children().children('.fld-tabcontent');\n\n            for (var i = 0; i < $fieldContainers.length; i++) {\n                var $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo($fieldContainers[i]);\n                this.$caboose = this.$caboose.add($caboose);\n            }\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            return $('<div class=\"fld-field fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\"/>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent().parent().parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new field based on that one\n                var $field = this.$draggee.clone().removeClass('unused');\n                $field.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n                this.designer.initField($field);\n\n                // Hide the unused field\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                // Hide the group too?\n                if (this.$draggee.siblings(':not(.hidden)').length === 0) {\n                    var $group = this.$draggee.parent().parent();\n                    $group.addClass('hidden');\n                    this.designer.unusedFieldGrid.removeItems($group);\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $field;\n\n                // Remember it for later\n                this.addItems($field);\n            }\n\n            if (this.showingInsertion) {\n                // Find the field's new tab name\n                var tabName = this.$insertion.parent().parent().find('.tab span').text(),\n                    inputName = this.designer.getFieldInputName(tabName);\n\n                if (this.draggingUnusedItem) {\n                    this.$draggee.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + this.$draggee.data('id') + '\">');\n                }\n                else {\n                    this.$draggee.find('.id-input').attr('name', inputName);\n                }\n            }\n\n            this.base();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            }\n            else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n            }\n            else {\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            if (\n                (this.$toggle.prop('nodeName') === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n            else if (this.$toggle.prop('nodeName') === 'SELECT') {\n                return 'select';\n            }\n            else if (this.$toggle.prop('nodeName') === 'A') {\n                return 'link';\n            }\n        },\n\n        findTargets: function() {\n            if (this.type === 'select') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            }\n            else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal = Garnish.getInputPostVal(this.$toggle);\n            return postVal === null ? null : postVal.replace(/[\\[\\]\\\\\\/]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            }\n            else {\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                }\n                else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                }\n                else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    $target.height('auto');\n                    this.showTarget._targetHeight = $target.height();\n                    $target.css({\n                        height: this.showTarget._currentHeight,\n                        overflow: 'hidden'\n                    });\n\n                    $target.velocity('stop');\n\n                    $target.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                        $target.css({\n                            height: '',\n                            overflow: ''\n                        });\n                    });\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select') {\n                    $target.addClass('hidden');\n                }\n                else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    $target.css('overflow', 'hidden');\n                    $target.velocity('stop');\n                    $target.velocity({height: 0}, 'fast', function() {\n                        $target.addClass('hidden');\n                    });\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function() {\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange();\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                var $saveBtn = $('<div class=\"btn submit\">' + Craft.t('app', 'Save') + '</div>').appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<div/>', {\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                        role: 'btn',\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: $.proxy(function(option) {\n                            this.switchTarget($(option).data('target'));\n                        }, this)\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', function() {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                }.bind(this));\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this._slideInOnIframeLoad = true;\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            }, this));\n        },\n\n        close: function() {\n            if (!this.isActive) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(function(url) {\n                // Maintain the current scroll position?\n                if (!resetScroll && this.iframeLoaded && this.$iframe) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                // Keep the iframe height consistent with its content\n                iFrameResize({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, $iframe[0])\n\n                this.url = url;\n                this.$iframe = $iframe;\n                this.afterUpdateIframe();\n            }.bind(this));\n        },\n\n        afterUpdateIframe: function() {\n            this.trigger('afterUpdateIframe', {\n                target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        var $cancelButton = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$promptButtons),\n            $submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'OK') + '\" />').appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelButton, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> td > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> td > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> td .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('td[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<div class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            return $container.lightswitch();\n        },\n\n        createLightswitchField: function(config) {\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                var startDate = $startDate.datepicker('getDate');\n                var endDate = $endDate.datepicker('getDate');\n                var startTime = startDate ? startDate.getTime() : null;\n                var endTime = endDate ? endDate.getTime() : null;\n\n                var $options = $ul.find('a');\n                var $option;\n                var foundOption = false;\n\n                for (var i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            var btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            var $btn = $('<div class=\"'+btnClasses+'\" data-icon=\"date\"/>')\n                .text(Craft.t('app', 'All'));\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label || config.instructions) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                if (label) {\n                    var $label = $('<label/>', {\n                        'id': config.labelId || (config.id ? config.id + '-label' : null),\n                        'class': (config.required ? 'required' : null),\n                        'for': config.id,\n                        text: label\n                    }).appendTo($heading);\n\n                    if (siteId) {\n                        for (var i = 0; i < Craft.sites.length; i++) {\n                            if (Craft.sites[i].id == siteId) {\n                                $('<span class=\"site\"/>').text(Craft.sites[i].name).appendTo($label);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (config.instructions) {\n                    $('<div class=\"instructions\"/>').text(config.instructions).appendTo($heading);\n                }\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}