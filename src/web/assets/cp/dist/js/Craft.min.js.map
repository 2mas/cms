{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","i","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","isArray","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","window","cmsLicenseKey","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","arr","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","key","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","obj","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","removeFromArray","index","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","remove","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","shortcutManager","registerShortcut","ESC_KEY","maybeCloseHud","$shade","$hud","$body","hide","switchSite","isDirty","newSiteId","reloadForm","refreshInitialData","$allInstructions","$instructions","$label","siblings","requestAnimationFrame","headHtml","footHtml","serialize","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","showing","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","data-icon","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","_deinitSources","_collapseSource","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$limitField","createTextField","placeholder","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","$scrollContainer","scrollTop","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","$uploadBtn","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_canvasSupported","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","$innerProgressBar","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","validateDeleteInputs","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$notesTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","newSites","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","autosaveDrafts","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","site","siteStatuses","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","addlSiteOptions","addlSiteIds","serializedStatuses","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_removeField","_updateSiteStatuses","$field","overflow","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","$lightswitch","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnsavedDraft","saveDraft","isActive","draftNotes","$spinners","saveDraftAction","prepareData","docTitle","draftName","revisionMenu","draftCreated","newHref","anchorPos","$actionButtonContainer","applyDraftAction","canDeleteDraft","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","currentTargets","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$deleteLink","saveMeta","onMetaHudHide","onMetaHudEscape","onNotesKeydown","shakeMetaHud","deleteDraft","deleteDraftAction","handleFormSubmit","abort","hashedRedirectUrl","enabledGlobally","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","$fields","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","initElement","Element","onTabOptionSelect","renameTab","removeTab","$prev","$next","$labelSpan","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","_onSettle","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","previewTarget","_useIframeResizer","previewIframeResizerOptions","resetScroll","refresh","sameHost","frameborder","iFrameResize","checkOrigin","scrolling","onInit","iframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","inputmode","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","num","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav > ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            return this.selectSource($source);\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n            };\n\n            // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n            if (this.trashed) {\n                criteria.trashed = true;\n            }\n            if (this.drafts) {\n                criteria.drafts = true;\n                criteria.draftOf = false;\n            }\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(e => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode') || 'table';\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw `View mode \"${mode}\" not supported.`;\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            let firstSite = this.siteId === null;\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            // Select a new source automatically if a site is already selected, but we don't have a selected source\n            // (or if the currently selected source ends up not supporting the new site)\n            var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (this.initialized && selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n        $addElementBtnContainer: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n\n            this.$addElementBtn = this.getAddElementsBtn();\n            if (this.$addElementBtn) {\n                this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n                if (!this.$addElementBtnContainer.length) {\n                    this.$addElementBtnContainer = null;\n                }\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            Garnish.requestAnimationFrame(() => {\n                this._initialized = true;\n            });\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.addClass('hidden');\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.removeClass('hidden');\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, () => {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            if (this.settings.allowDegreeFractions === null) {\n                this.settings.allowDegreeFractions = Craft.isImagick;\n            }\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: null,\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                options.fileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n\n                // Trigger a window resize in case the field is inside an element editor HUD\n                Garnish.$win.trigger('resize');\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            if (this.$uploadBtn) {\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    // We can't store a reference to the file input, because it gets replaced with a new input\n                    // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                    this.$uploadBtn.next('input[type=file]').trigger('click');\n                }, this));\n            }\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.settings.draftNotes = $('#revision-notes').val();\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Remove the revision notes field\n                        $('#revision-notes').remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            if (this.settings.draftNotes !== null) {\n                data += `&draftNotes=${this.settings.draftNotes}`;\n            }\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n        this.renameTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                previewTarget: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                previewTarget: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = window.cmsLicenseKey = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            } else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            } else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            } else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Cancel'),\n                }).appendTo($buttonsContainer);\n                this.$saveBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.maybeCloseHud.bind(this));\n                    this.hud.addListener(this.hud.$shade, 'click', this.maybeCloseHud.bind(this));\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                } else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({siteId: newSiteId}, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            let $allInstructions = this.$fieldsContainer.find('> .meta > .field > .instructions');\n\n            for (let i = 0; i < $allInstructions.length; i++) {\n                let $instructions = $allInstructions.eq(i);\n                let $label = $instructions.siblings('.heading').children('label');\n                $('<span/>', {\n                    'class': 'info',\n                    'html': $instructions.children().html()\n                }).appendTo($label);\n                $instructions.remove();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            } else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    } else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        isDirty: function() {\n            return this.hud.$body.serialize() !== this.initialData;\n        },\n\n        maybeCloseHud: function(ev) {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n                this.closeHud();\n            }\n        },\n\n        closeHud: function() {\n            if (!this.hud || !this.hud.showing) {\n                return;\n            }\n\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav > ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            return this.selectSource($source);\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n            };\n\n            // Only set trashed/drafts/draftOf params when needed, so we don't potentially override a source's criteria\n            if (this.trashed) {\n                criteria.trashed = true;\n            }\n            if (this.drafts) {\n                criteria.drafts = true;\n                criteria.draftOf = false;\n            }\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(e => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(action, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            if (typeof action === 'string') {\n                action = this._findAction(action);\n            }\n\n            if (action.confirm && !confirm(action.confirm)) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, action.settings || {}, actionParams, {\n                elementAction: action.type,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            if (action.download) {\n                if (Craft.csrfTokenName) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n                Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                    this.setIndexAvailable();\n                }).catch(e => {\n                    this.setIndexAvailable();\n                });\n            } else {\n                Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    this.setIndexAvailable();\n                    if (response.data.success) {\n                        // Update the count text too\n                        this._resetCount();\n                        this._updateView(viewParams, response.data);\n\n                        if (response.data.message) {\n                            Craft.cp.displayNotice(response.data.message);\n                        }\n\n                        this.afterAction(action, params);\n                    } else {\n                        Craft.cp.displayError(response.data.message);\n                    }\n                }).catch(() => {\n                    this.setIndexAvailable();\n                });\n            }\n        },\n\n        _findAction: function(actionClass) {\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    return this.actions[i];\n                }\n            }\n            throw `Invalid element action: ${actionClass}`;\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                if (attr === 'score') {\n                    this.setSortDirection('desc');\n                } else {\n                    this.setSortDirection($option.data('default-dir') || 'asc');\n                }\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode') || 'table';\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    let sourceViewMode = this.sourceViewModes[i];\n\n                    let $viewModeBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                        'data-view': sourceViewMode.mode,\n                        'data-icon': sourceViewMode.icon,\n                    }).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw `View mode \"${mode}\" not supported.`;\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($form.data('action'), Garnish.getPostData($form));\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            this.submitAction($option.data('action'));\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            let firstSite = this.siteId === null;\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            // Select a new source automatically if a site is already selected, but we don't have a selected source\n            // (or if the currently selected source ends up not supporting the new site)\n            var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (this.initialized && selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                if (this.settings.context === 'index') {\n                    // Remember this site for later\n                    Craft.cp.setSiteId(siteId);\n                }\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn menubtn',\n                    'data-icon': 'settings',\n                    title: Craft.t('app', 'Actions'),\n                }).appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<button/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                text: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        data: {\n                            action: actions[i],\n                        },\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            let $selectedElements;\n            try {\n                $selectedElements = this.getSelectedElements();\n            } catch (e) {\n            }\n\n            let ids = [];\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n        $addElementBtnContainer: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n\n            this.$addElementBtn = this.getAddElementsBtn();\n            if (this.$addElementBtn) {\n                this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n                if (!this.$addElementBtnContainer.length) {\n                    this.$addElementBtnContainer = null;\n                }\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            Garnish.requestAnimationFrame(() => {\n                this._initialized = true;\n            });\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.find('.btn.add:first');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.addClass('hidden');\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n            if ($btn) {\n                $btn.removeClass('hidden');\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, () => {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n                callback();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n            });\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn disabled submit',\n                text: Craft.t('app', 'Select'),\n            }).appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n            this.$target.trigger('input');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            if (this.settings.allowDegreeFractions === null) {\n                this.settings.allowDegreeFractions = Craft.isImagick;\n            }\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn cancel',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$replaceBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save replace',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit save copy',\n                    text: Craft.t('app', 'Save as a new asset'),\n                }).appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n\n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: null,\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    'data-icon': 'upload',\n                    style: 'position: relative; overflow: hidden;',\n                    text: Craft.t('app', 'Upload files'),\n                });\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        $uploadBtn: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n\n            if (this.settings.canUpload) {\n                this._attachUploader();\n            }\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            if (this.$addElementBtn) {\n                this.$uploadBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn dashed',\n                    'data-icon': 'upload',\n                    text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n                }).insertAfter(this.$addElementBtn);\n                options.fileInput = $('<input/>', {\n                    type: 'file',\n                    class: 'hidden',\n                    multiple: this.settings.limit != 1,\n                }).insertAfter(this.$uploadBtn);\n\n                // Trigger a window resize in case the field is inside an element editor HUD\n                Garnish.$win.trigger('resize');\n            }\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            if (this.$uploadBtn) {\n                this.$uploadBtn.on('click', $.proxy(function(ev) {\n                    // We can't store a reference to the file input, because it gets replaced with a new input\n                    // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                    this.$uploadBtn.next('input[type=file]').trigger('click');\n                }, this));\n            }\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn disabled',\n                text: Craft.t('app', 'Select transform'),\n            }).appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n                let $body = $('<div class=\"body\"/>').appendTo($form);\n                let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n                let $logoutBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Log out now'),\n                }).appendTo($buttons);\n                let $renewSessionBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Keep me logged in'),\n                }).appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Login'),\n                }).appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                        },\n                        {\n                            redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                            retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                        }\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                                retainScroll: action.retainScroll,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            // Should we match the previous scroll position?\n            let scrollY = Craft.getLocalStorage('scrollY');\n            if (typeof scrollY !== 'undefined') {\n                Craft.removeLocalStorage('scrollY');\n                Garnish.$doc.ready(() => {\n                    Garnish.requestAnimationFrame(() => {\n                        window.scrollTo(0, scrollY);\n                    });\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            if ($tab === this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            let href = $tab && $tab.attr('href');\n            if (href && href.charAt(0) === '#') {\n                let menubtn = $('#context-btn').menubtn().data('menubtn');\n                if (menubtn) {\n                    for (let i = 0; i < menubtn.menu.$options.length; i++) {\n                        let a = menubtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New category'),\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit add icon',\n                text: Craft.t('app', 'New heading'),\n            }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>').append(Craft.ui.createTextField({\n                label: Craft.t('app', 'Header Column Heading'),\n                id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n                name: `sources[${this.sourceData.key}][headerColHeading]`,\n                value: this.sourceData.headerColHeading,\n                placeholder: this.sourceData.defaultHeaderColHeading,\n            }));\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            let $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod);\n            let $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user'),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            try {\n                if (this.settings.onSubmit() === false) {\n                    ev.preventDefault();\n                }\n            } catch (e) {\n                ev.preventDefault();\n                this.$deleteSpinner.addClass('hidden');\n                throw e;\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        enableAutosave: null,\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.enableAutosave = Craft.autosaveDrafts;\n\n            this.$revisionBtn = $('#context-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                if (this.enableAutosave) {\n                    this.checkForm();\n                }\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            if (Craft.autosaveDrafts) {\n                this.listenForChanges();\n            }\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<button/>', {\n                type: 'button',\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#context-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = true;\n                        }\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId || !Craft.autosaveDrafts) {\n                        if (!Craft.autosaveDrafts) {\n                            this.enableAutosave = false;\n                            let $statusIcons = this.statusIcons();\n                            if ($statusIcons.hasClass('checkmark-icon')) {\n                                $statusIcons.addClass('hidden');\n                            }\n                        }\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.settings.draftNotes = $('#revision-notes').val();\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons()\n                    .velocity('stop')\n                    .css('opacity', '')\n                    .removeClass('invisible checkmark-icon alert-icon fade-out')\n                    .addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .velocity('stop')\n                            .css('opacity', '')\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Remove the \"Save as a Draft\" and \"Save\" buttons\n                        $('#save-draft-btn-container').remove();\n                        $('#save-btn-container').remove();\n\n                        let $actionButtonContainer = $('#action-buttons');\n\n                        // If they're allowed to update the source, add a \"Publish changes\" button\n                        if (this.settings.canUpdateSource) {\n                            $('<button/>', {\n                                type: 'button',\n                                class: 'btn secondary formsubmit',\n                                text: Craft.t('app', 'Publish changes'),\n                                data: {\n                                    action: this.settings.applyDraftAction,\n                                },\n                            }).appendTo($actionButtonContainer).formsubmit();\n                        }\n\n                        // If autosaving is disabled, add a \"Save draft\" button\n                        if (!Craft.autosaveDrafts) {\n                            $('<button/>', {\n                                type: 'submit',\n                                class: 'btn submit',\n                                text: Craft.t('app', 'Save draft'),\n                            }).appendTo($actionButtonContainer);\n                        }\n\n                        // Remove the revision notes field\n                        $('#revision-notes').remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    for (let oldId in response.duplicatedElements) {\n                        if (oldId != this.settings.sourceId && response.duplicatedElements.hasOwnProperty(oldId)) {\n                            this.duplicatedElements[oldId] = response.duplicatedElements[oldId];\n                        }\n                    }\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += `&draftId=${this.settings.draftId}`;\n            }\n\n            if (this.settings.draftName !== null) {\n                data += `&draftName=${this.settings.draftName}`;\n            }\n\n            if (this.settings.draftNotes !== null) {\n                data += `&draftNotes=${this.settings.draftNotes}`;\n            }\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            let idsRE = Object.keys(this.duplicatedElements).join('|');\n            if (idsRE === '') {\n                return data;\n            }\n            let lb = encodeURIComponent('[');\n            let rb = encodeURIComponent(']');\n            // Keep replacing field IDs until data stops changing\n            while (true) {\n                if (data === (\n                    data = data\n                        // &fields[...][X]\n                        .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                            return pre + this.duplicatedElements[id] + post;\n                        })\n                        // &fields[...=X\n                        .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                            return pre + this.duplicatedElements[id];\n                        })\n                )) {\n                    break;\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            Craft.initialDeltaValues = {};\n            let $statusIcons = this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            if (!this.enableAutosave) {\n                // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n                $statusIcons\n                    .velocity('stop')\n                    .velocity({\n                        opacity: 0,\n                    }, {\n                        delay: 2000,\n                        complete: () => {\n                            $statusIcons.addClass('hidden');\n                        },\n                    });\n            }\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // Is this a normal draft, and was this a normal save (either via submit button or save shortcut)?\n            if (this.settings.draftId && !this.settings.isUnsavedDraft && !ev.customTrigger) {\n                this.checkForm(true);\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (\n                    this.settings.isUnsavedDraft &&\n                    (!ev.customTrigger || !ev.customTrigger.data('action'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit disabled',\n                    text: Craft.t('app', 'Submit'),\n                }).appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<button/>', {\n                            type: 'button',\n                            class: 'btn submit menubtn',\n                        }).appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit add icon menubtn',\n                        text: Craft.t('app', 'New entry'),\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $labelSpan = $tab.find('.tabs .tab span');\n        let oldName = $labelSpan.text();\n        let newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>Tab ${this.tabGrid.$items.length + 1}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n        this.renameTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            } else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            switch (this.type) {\n                case 'link':\n                    this.addListener(this.$toggle, 'click', 'onToggleChange');\n                    break;\n                case 'fieldset':\n                    this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                    break;\n                default:\n                    this.addListener(this.$toggle, 'change', 'onToggleChange');\n                    this.onToggleChange();\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            let nodeName = this.$toggle.prop('nodeName');\n            if (\n                (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n\n            switch (nodeName) {\n                case 'SELECT':\n                    return 'select';\n                case 'A':\n                    return 'link';\n                case 'FIELDSET':\n                    return 'fieldset';\n            }\n\n            console.warn('Unexpected field toggle:', this.$toggle[0]);\n        },\n\n        findTargets: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            } else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal;\n            if (this.type === 'fieldset') {\n                postVal = this.$toggle.find('input:checked:first').val();\n            } else {\n                postVal = Garnish.getInputPostVal(this.$toggle);\n            }\n\n            // Normalize the value\n            return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            } else {\n                this.findTargets();\n\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                } else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                } else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select' && this.type !== 'fieldset') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.prop('nodeName') !== 'SPAN') {\n                                $t.height('auto');\n                                this.showTarget._targetHeight = $t.height();\n                                $t.css({\n                                    height: this.showTarget._currentHeight,\n                                    overflow: 'hidden'\n                                });\n\n                                $t.velocity('stop');\n\n                                $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                    $t.css({\n                                        height: '',\n                                        overflow: ''\n                                    });\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select' || this.type === 'fieldset') {\n                    $target.addClass('hidden');\n                } else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    for (let i = 0; i < $target.length; i++) {\n                        ($t => {\n                            if ($t.hasClass('hidden')) {\n                                return;\n                            }\n                            if ($t.prop('nodeName') === 'SPAN') {\n                                $t.addClass('hidden');\n                            } else {\n                                $t.css('overflow', 'hidden');\n                                $t.velocity('stop');\n                                $t.velocity({height: 0}, 'fast', function() {\n                                    $t.addClass('hidden');\n                                });\n                            }\n                        })($target.eq(i));\n                    }\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n            if (this.$icon.data('infoicon')) {\n                Garnish.log('Double-instantiating an info icon on an element');\n                this.$icon.data('infoicon').destroy();\n            }\n            this.$icon.data('infoicon', this);\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n\n            if (this.$outerContainer.attr('id')) {\n                $(`label[for=\"${this.$outerContainer.attr('id')}\"]`).on('click', () => {\n                    this.$outerContainer.focus();\n                });\n            }\n\n            // Does the input have on/off labels?\n            let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n            if ($wrapper.length) {\n                this.addListener($wrapper.children('label[data-toggle=\"off\"]'), 'click', this.turnOff);\n                this.addListener($wrapper.children('label[data-toggle=\"on\"]'), 'click', this.turnOn);\n            }\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange(this.on);\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                let $saveBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Save'),\n                }).appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        isVisible: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Close Preview'),\n                }).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: this._onDragStart.bind(this),\n                    onDrag: this._onDrag.bind(this),\n                    onDragStop: this._onDragStop.bind(this),\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', () => {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                });\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                previewTarget: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            if (!this.isActive || this.isVisible) {\n                return;\n            }\n\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            });\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            });\n\n            this.isVisible = true;\n        },\n\n        close: function() {\n            if (!this.isActive || !this.isVisible) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            });\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n                this.$previewContainer.hide();\n            });\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.isVisible = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - this.editorWidthInPx;\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        _useIframeResizer: function() {\n            return Craft.previewIframeResizerOptions !== false;\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                previewTarget: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                this.slideIn();\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n                // Maintain the current scroll position?\n                let sameHost;\n                if (resetScroll) {\n                    this.scrollTop = null;\n                } else if (this.iframeLoaded && this.$iframe) {\n                    if (this._useIframeResizer()) {\n                        this.iframeHeight = this.$iframe.height();\n                        this.scrollTop = this.$iframeContainer.scrollTop();\n                    } else {\n                        sameHost = Craft.isSameHost(url);\n                        if (sameHost && this.$iframe[0].contentWindow) {\n                            this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                        }\n                    }\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                // Keep the iframe height consistent with its content\n                if (this._useIframeResizer()) {\n                    if (!resetScroll && this.iframeHeight !== null) {\n                        $iframe.height(this.iframeHeight);\n                        this.$iframeContainer.scrollTop(this.scrollTop);\n                    }\n\n                    iFrameResize($.extend({\n                        checkOrigin: false,\n                        // Allow iframe scrolling until we've successfully initialized the resizer\n                        scrolling: true,\n                        onInit: iframe => {\n                            this.iframeLoaded = true;\n                            this.iframeHeight = null;\n                            this.scrollTop = null;\n                            iframe.scrolling = 'no';\n                        },\n                    }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n                } else {\n                    $iframe.on('load', () => {\n                        this.iframeLoaded = true;\n                        if (!resetScroll && sameHost && this.scrollTop !== null) {\n                            $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                        }\n                    });\n                }\n\n                this.url = url;\n                this.$iframe = $iframe;\n\n                this.trigger('afterUpdateIframe', {\n                    previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                    $iframe: this.$iframe,\n                });\n\n                this.slideIn();\n            });\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value: value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> th > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $('<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-label` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}