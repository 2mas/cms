{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlideRuleInput.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","i","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","isArray","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","shift","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","_processedApiHeaders","sendApiRequest","uri","cancelToken","getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","apiResponse","_apiHeaders","_resolveHeaderWaitlist","_apiHeaderWaitlist","_loadingApiHeaders","response","e","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","bind","stringToArray","arr","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","key","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","obj","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","removeFromArray","index","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","char","asciiStr","asciiCharMap","randomString","result","random","preventOutlineOnMouseFocus","$elem","namespace","on","addClass","trigger","event","keyCode","SHIFT_KEY","CTRL_KEY","CMD_KEY","removeClass","createErrorList","errors","$ul","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","pill","formsubmit","menubtn","datetime","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","each","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","Pill","ev","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","role","title","remove","checkDatetimeValue","$doc","ready","Base","elementId","initialData","$fieldsContainer","$cancelBtn","$saveBtn","$spinner","$siteSelect","$siteSpinner","hud","init","defaults","loadHud","setElementAttribute","attributes","getBaseData","prevalidate","onBeginLoading","includeSites","isMultiSite","showSiteSwitcher","proxy","showHud","onEndLoading","$hudContents","sites","$header","$siteSelectContainer","siteInfo","addListener","add","updateForm","onCreateForm","$footer","$buttonsContainer","updateBody","updateSizeAndPosition","hudTrigger","HUD","bodyClass","closeOtherHUDs","hideOnEsc","hideOnShadeClick","onShow","onShowHud","onHide","onHideHud","onSubmit","saveElement","$hud","$body","hide","switchSite","serialize","newSiteId","reloadForm","refreshInitialData","$instructions","requestAnimationFrame","headHtml","footHtml","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeHud","onSaveElement","shake","shortcutManager","registerShortcut","S_KEY","ctrl","runQueue","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","$sidebar","showingSidebar","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","$toolbar","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hideSidebar","initSources","menu","$option","$options","filter","first","_setSite","criteria","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","RETURN_KEY","preventDefault","updateElementsIfSearchTextChanged","isMobileBrowser","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","CancelToken","source","_cancelRequests","cancel","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","destroy","updateElementsAction","_updateView","showActionTriggers","css","height","_createTriggers","submitAction","actionClass","actionParams","selectedElementIds","getSelectedElementIds","viewParams","elementAction","elementIds","submitActionsAction","afterAction","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","base","onSelectSite","onUpdateElements","_handleSourceSelectionChange","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","_handleStatusChange","selectedOption","_handleSiteChange","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","_handleSortChange","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","stopPropagation","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_deinitSources","_collapseSource","$childSources","_countResults","total","itemLabel","itemsLabel","min","last","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","data-icon","$nextBtn","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$limitField","createTextField","placeholder","submitting","isNaN","data-action","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","container","insertAfter","getElementContainer","setTotalVisible","setMorePending","ElementThumbLoader","load","isVerticalList","handle","_handleElementEditing","$target","target","prop","isTouchCapable","$scrollContainer","scrollTop","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","$win","innerHeight","top","outerHeight","getLoadMoreParams","loadMoreElementsAction","$newElements","appendElements","onAppendElements","newElements","off","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","ADD_FX_DURATION","REMOVE_FX_DURATION","show","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","modalSettings","allowSelfRelations","sourceElementId","onModalSelect","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","draftEditor","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","onTargetTextChange","activeElement","onFormSubmit","updateTarget","sourceVal","targetVal","generateTargetValue","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","updateUI","addRow","row","maxItems","$row","$deleteBtn","reorderItems","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","reloadIndex","$imageEditorTrigger","showImageEditor","AssetImageEditor","onSave","allowDegreeFractions","isImagick","refreshThumbnail","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","x","y","allowSavingAsNew","saveImage","$shade","getMaxImageSize","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","loadEditor","$tabs","$viewsContainer","$views","innerWidth","_showSpinner","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","$tab","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","cropperData","_showCropper","_editorModeTransition","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","onDragStartProxy","onDropTargetChangeProxy","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","onDropTargetChange","onDragStop","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFileDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","_positionProgressBar","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","promptCallback","returnData","newParameterArray","choice","apply","_performBatchRequests","fadeOutHelpers","showBatchPrompts","returnHelpersToDraggees","_onFolderDragStop","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","fileuploadprogressall","fileuploaddone","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","_onUploadStart","_onUploadProgress","progress","loaded","setProgressPercentage","_onUploadComplete","files","doReload","file","isLastUpload","_updateAfterUpload","_uploadFollowup","finalCallback","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","shiftKey","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","_onDragStart","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","_onDropTargetChange","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","dropTargetFolderId","$excludedSources","_collapseFolder","_expandFolder","menuOptions","onClick","ContextMenu","menuClass","_createSubfolder","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","_deleteFolder","$targetFolder","folder","_cleanUpTree","_renameFolder","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","doRequest","parameters","AssetSelectInput","originalFilename","originalExtension","resetOriginalFilename","_renameHelper","validateElementForm","_attachUploader","defaultFieldLayoutId","formData","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","_parseFilename","parts","extension","pop","baseFileName","endPos","selectionStart","selectionEnd","createRange","select","range","collapse","moveEnd","moveStart","$filenameField","ext","oldExt","newExt","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","allowTransforms","onSelectTransform","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","submitLogin","showLoginModal","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","shadeClass","updateLogoutWarningMessage","time","decrementLogoutWarning","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$tabsContainer","$tabsList","$overflowTabBtn","$overflowTabList","$selectedTab","selectedTabIndex","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","ALT_KEY","initSpecialForms","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","_handleInputFocus","_handleInputBlur","saveShortcut","$label","toggleNav","toggleClass","toggleSidebar","selectTab","_selectTab","tab","deselectTab","updateTabs","updateResponsiveTables","maxWidth","totalWidth","showOverflowMenu","tabMargin","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_canvasSupported","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","$innerProgressBar","color","$canvas","ctx","lineCap","startPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","editableCategoryGroups","group","uid","defaultGroupHandle","updateButton","selectedSourceHandle","selectedGroup","$menuBtn","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","menuBtn","primarySiteId","groupId","newCategoryBtnText","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","style","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","updateColor","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$saveSpinner","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","caboose","Y_AXIS","getHelper","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","idParam","contentSummary","$deleteSubmitBtn","validateDeleteInputs","validates","handleSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$notesTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","newSites","lastSerializedValue","listeningForChanges","pauseLevel","saving","saveXhr","queue","submittingForm","duplicatedElements","preview","previewToken","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","draftId","initForDraft","createDraft","canUpdateSource","listenForChanges","statusIcons","stopListeningForChanges","pause","resume","createEditMetaBtn","showStatusHud","mergeChanges","reload","expandSiteStatuses","$enabledForSiteField","site","siteStatuses","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","addlSiteOptions","addlSiteIds","serializedStatuses","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_removeField","_updateSiteStatuses","$field","overflow","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","$lightswitch","bodyHtml","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","isUnsavedDraft","saveDraft","isActive","$spinners","$statusIcons","saveDraftAction","prepareData","docTitle","draftName","draftNotes","revisionMenu","draftCreated","newHref","anchorPos","$saveBtnContainer","$saveDraftBtn","canDeleteDraft","$draftsUl","$draftHeading","$draftLi","$draftA","$siteOptions","$siteOption","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","swapDuplicatedElementIds","getDeltaNames","oldId","currentTargets","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$deleteLink","saveMeta","onMetaHudHide","onMetaHudEscape","onNotesKeydown","shakeMetaHud","deleteDraft","deleteDraftAction","handleFormSubmit","abort","applyDraftAction","hashedRedirectUrl","enabledGlobally","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","log","copyDraggeeInputValuesToHelper","isVisible","initialize","minRows","createRowObj","updateAddRowButton","initializeIfVisible","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","focus","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","radioMode","toggle","applyToggleCheckbox","onTextareaHeightChange","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","alt","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$tabContainer","$unusedFieldContainer","$newTabBtn","$allFields","tabGrid","unusedFieldGrid","tabDrag","fieldDrag","gridSettings","initTab","FieldDrag","customizableTabs","TabDrag","$editBtn","$fields","initField","onTabOptionSelect","renameTab","deleteTab","onFieldOptionSelect","toggleRequiredField","removeField","$labelSpan","getFieldInputName","removeFieldById","requiredFieldInputName","refreshCols","$group","addTab","tabName","fieldInputName","BaseDrag","Drag","designer","$insertion","showingInsertion","$caboose","draggingUnusedItem","addToTabGrid","getInsertion","addCaboose","setMidpoints","getItemContainer","isItemInTabContainer","onDrag","hitTest","_closestItem","getClosestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","draggeeDisplay","visibility","$hiddenFields","$fieldContainers","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","getToggleVal","postVal","onToggleChange","hideTarget","showTarget","_show","_currentHeight","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","_onUploadError","$icon","hudClass","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","muteEvent","changed","_getOffMargin","_onMouseDown","_onMouseUp","dragging","RIGHT_KEY","LEFT_KEY","_getMargin","_onDrag","mouseDistX","_onDragStop","console","_onSettle","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_handleSuccessProxy","_handleErrorProxy","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","dragHandleWidth","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","ESC_KEY","$newClone","field","contentWindow","scrollLeft","X-Craft-Token","xhrFields","withCredentials","crossDomain","forceUpdateIframe","handleSuccess","write","onResponse","handleError","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","onKeyUp","onInputChange","onToggleMouseDown","$targetBtn","$targetMenu","iframeLoaded","$tempInput","activeTarget","iframeHeight","_updateIframeProxy","$previewHeader","switchTarget","resetScroll","refresh","frameborder","iFrameResize","checkOrigin","scrolling","onInit","iframe","afterUpdateIframe","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$cancelButton","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","$selectedOption","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","graduationsCalculatedWidth","_handleResize","valueToPosition","_handleTapStart","touch","startLeft","_handleTapMove","curX","positionToValue","_handleTapEnd","scaleMin","scaleMax","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_updateAncestorsProxy","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","helpers","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","_handleSelectedSortHeaderClick","newSortDir","_handleSortHeaderClick","_handleUnselectedSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","selectTag","searchForTags","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","config","maxlength","autofocus","getAutofocusValue","autocomplete","getDisabledValue","readonly","step","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","num","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","required","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","paramObject","getInProgress","onFileAdd","validateExtension","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n                let params = $form.data('params') || {};\n                if ($form.data('param')) {\n                    params[$form.data('param')] = $form.data('value');\n                }\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<div/>', {\n                                class: 'clear-btn',\n                                role: 'button',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        checkDatetimeValue: function() {\n\n        }\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            }\n            else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            }\n            else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            }\n            else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttonsContainer);\n                this.$saveBtn = $('<input class=\"btn submit\" type=\"submit\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                }\n                else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({ siteId: newSiteId }, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            var $instructions = this.$fieldsContainer.find('> .meta > .field > .heading > .instructions');\n\n            for (var i = 0; i < $instructions.length; i++) {\n                $instructions.eq(i)\n                    .replaceWith($('<span/>', {\n                        'class': 'info',\n                        'html': $instructions.eq(i).children().html()\n                    }))\n                    .infoicon();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            }\n                            else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    }\n                    else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(actionClass, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            // Find the action\n            var action;\n\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    action = this.actions[i];\n                    break;\n                }\n            }\n\n            if (!action || (action.confirm && !confirm(action.confirm))) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, actionParams, {\n                elementAction: actionClass,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                this.setSortDirection(attr === 'score' ? 'desc' : 'asc');\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    var sourceViewMode = this.sourceViewModes[i];\n\n                    var $viewModeBtn = $('<div data-view=\"' + sourceViewMode.mode + '\" role=\"button\"' +\n                        ' class=\"btn' + (typeof sourceViewMode.className !== 'undefined' ? ' ' + sourceViewMode.className : '') + '\"' +\n                        ' title=\"' + sourceViewMode.title + '\"' +\n                        (typeof sourceViewMode.icon !== 'undefined' ? ' data-icon=\"' + sourceViewMode.icon + '\"' : '') +\n                        '/>'\n                    ).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $form.data('action'),\n                params = Garnish.getPostData($form);\n\n            this.submitAction(actionClass, params);\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $option.data('action');\n            this.submitAction(actionClass);\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page > 1 ? '' : ' disabled'),\n                                'data-icon': 'leftangle',\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page < totalPages ? '' : ' disabled'),\n                                'data-icon': 'rightangle',\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action.type)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<div class=\"btn menubtn\" data-icon=\"settings\" title=\"' + Craft.t('app', 'Actions') + '\"/>').appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<input/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                value: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    var actionClass = actions[i].type;\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actionClass) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        'data-action': actionClass,\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            var $selectedElements = this.getSelectedElements(),\n                ids = [];\n\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, callback);\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<div class=\"btn disabled submit\">' + Craft.t('app', 'Select') + '</div>').appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn cancel\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n            this.$replaceBtn = $('<div class=\"btn submit save replace\">' + Craft.t('app', 'Save') + '</div>').appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<div class=\"btn submit save copy\">' + Craft.t('app', 'Save as a new asset') + '</div>').appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n        \n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<div class=\"btn submit\" data-icon=\"upload\" style=\"position: relative; overflow: hidden;\" role=\"button\">' + Craft.t('app', 'Upload files') + '</div>');\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<div class=\"btn menubtn disabled\">' + Craft.t('app', 'Select transform') + '</div>').appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                var $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"/>').appendTo($form),\n                    $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                    $logoutBtn = $('<div class=\"btn\">' + Craft.t('app', 'Log out now') + '</div>').appendTo($buttons),\n                    $renewSessionBtn = $('<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('app', 'Keep me logged in') + '\" />').appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Login') + '\" />').appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {keyCode: Garnish.S_KEY, ctrl: true},\n                        {redirect: this.$primaryForm.data('saveshortcut-redirect')}\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n\n            // Listen for Option/ALT presses\n            this.addListener(Garnish.$win, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.addClass('altkeydown');\n                }\n            });\n            this.addListener(Garnish.$win, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.removeClass('altkeydown');\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New category') + '</div>').appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn\" role=\"button\"/>').text(Craft.t('app', 'Cancel')).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\"/>').text(Craft.t('app', 'Save')).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<div class=\"btn submit add icon\"/>').text(Craft.t('app', 'New heading')).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            var $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod),\n                $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<div class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</div>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form),\n                $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                $cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + (Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user')) + '\" />').appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.$revisionBtn = $('#revision-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            this.listenForChanges();\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled everywhere'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<a/>', {\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#revision-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId) {\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId) {\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons().removeClass('invisible checkmark-icon alert-icon').addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the Save button with an Update button, if there is one.\n                        // Otherwise, the user must not have permission to update the source element\n                        var $saveBtnContainer = $('#save-btn-container');\n                        if ($saveBtnContainer.length) {\n                            $saveBtnContainer.replaceWith($('<input/>', {\n                                type: 'submit',\n                                'class': 'btn submit',\n                                value: Craft.t('app', 'Publish changes')\n                            }));\n                        }\n\n                        // Remove the \"Save as a Draft\" button\n                        var $saveDraftBtn = $('#save-draft-btn-container');\n                        $saveDraftBtn.add($saveDraftBtn.prev('.spacer')).remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    $.extend(this.duplicatedElements, response.duplicatedElements);\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            for (var oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    data = data\n                        .replace(\n                            new RegExp(Craft.escapeRegex(encodeURIComponent('][' + oldId + ']')), 'g'),\n                            '][' + this.duplicatedElements[oldId] + ']'\n                        )\n                        .replace(\n                            new RegExp('=' + oldId + '\\\\b', 'g'),\n                            '=' + this.duplicatedElements[oldId]\n                        );\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            this.statusIcons()\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If we're editing a draft, this isn't a custom trigger, and the user isn't allowed to update the source,\n            // then ignore the submission\n            if (!ev.customTrigger && !this.settings.isUnsavedDraft && this.settings.draftId && !this.settings.canUpdateSource) {\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (!ev.customTrigger || !ev.customTrigger.data('action')) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Submit') + '\" />').appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New entry') + '</div>').appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend(\n    {\n        $container: null,\n        $tabContainer: null,\n        $unusedFieldContainer: null,\n        $newTabBtn: null,\n        $allFields: null,\n\n        tabGrid: null,\n        unusedFieldGrid: null,\n\n        tabDrag: null,\n        fieldDrag: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n            this.$tabContainer = this.$container.children('.fld-tabs');\n            this.$unusedFieldContainer = this.$container.children('.unusedfields');\n            this.$newTabBtn = this.$container.find('> .newtabbtn-container > .btn');\n            this.$allFields = this.$unusedFieldContainer.find('.fld-field');\n\n            // Set up the layout grids\n            this.tabGrid = new Craft.Grid(this.$tabContainer, Craft.FieldLayoutDesigner.gridSettings);\n            this.unusedFieldGrid = new Craft.Grid(this.$unusedFieldContainer, Craft.FieldLayoutDesigner.gridSettings);\n\n            var $tabs = this.$tabContainer.children();\n            for (var i = 0; i < $tabs.length; i++) {\n                this.initTab($($tabs[i]));\n            }\n\n            this.fieldDrag = new Craft.FieldLayoutDesigner.FieldDrag(this);\n\n            if (this.settings.customizableTabs) {\n                this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n                this.addListener(this.$newTabBtn, 'activate', 'addTab');\n            }\n        },\n\n        initTab: function($tab) {\n            if (this.settings.customizableTabs) {\n                var $editBtn = $tab.find('.tabs .settings'),\n                    $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                    $ul = $('<ul/>').appendTo($menu);\n\n                $('<li><a data-action=\"rename\">' + Craft.t('app', 'Rename') + '</a></li>').appendTo($ul);\n                $('<li><a data-action=\"delete\">' + Craft.t('app', 'Delete') + '</a></li>').appendTo($ul);\n\n                new Garnish.MenuBtn($editBtn, {\n                    onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n                });\n            }\n\n            // Don't forget the fields!\n            var $fields = $tab.children('.fld-tabcontent').children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                this.initField($($fields[i]));\n            }\n        },\n\n        initField: function($field) {\n            var $editBtn = $field.find('.settings'),\n                $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                $ul = $('<ul/>').appendTo($menu);\n\n            if ($field.hasClass('fld-required')) {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make not required') + '</a></li>').appendTo($ul);\n            }\n            else {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make required') + '</a></li>').appendTo($ul);\n            }\n\n            $('<li><a data-action=\"remove\">' + Craft.t('app', 'Remove') + '</a></li>').appendTo($ul);\n\n            new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onFieldOptionSelect')\n            });\n        },\n\n        onTabOptionSelect: function(option) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $option = $(option),\n                $tab = $option.data('menu').$anchor.parent().parent().parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'rename': {\n                    this.renameTab($tab);\n                    break;\n                }\n                case 'delete': {\n                    this.deleteTab($tab);\n                    break;\n                }\n            }\n        },\n\n        onFieldOptionSelect: function(option) {\n            var $option = $(option),\n                $field = $option.data('menu').$anchor.parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'toggle-required': {\n                    this.toggleRequiredField($field, $option);\n                    break;\n                }\n                case 'remove': {\n                    this.removeField($field);\n                    break;\n                }\n            }\n        },\n\n        renameTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $labelSpan = $tab.find('.tabs .tab span'),\n                oldName = $labelSpan.text(),\n                newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n            if (newName && newName !== oldName) {\n                $labelSpan.text(newName);\n                $tab.find('.id-input').attr('name', this.getFieldInputName(newName));\n            }\n        },\n\n        deleteTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            // Find all the fields in this tab\n            var $fields = $tab.find('.fld-field');\n\n            for (var i = 0; i < $fields.length; i++) {\n                var fieldId = $($fields[i]).attr('data-id');\n                this.removeFieldById(fieldId);\n            }\n\n            this.tabGrid.removeItems($tab);\n            this.tabDrag.removeItems($tab);\n\n            $tab.remove();\n        },\n\n        toggleRequiredField: function($field, $option) {\n            if ($field.hasClass('fld-required')) {\n                $field.removeClass('fld-required');\n                $field.find('.required-input').remove();\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make required'));\n                }, 500);\n            }\n            else {\n                $field.addClass('fld-required');\n                $('<input class=\"required-input\" type=\"hidden\" name=\"' + this.settings.requiredFieldInputName + '\" value=\"' + $field.data('id') + '\">').appendTo($field);\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make not required'));\n                }, 500);\n            }\n        },\n\n        removeField: function($field) {\n            var fieldId = $field.attr('data-id');\n\n            $field.remove();\n\n            this.removeFieldById(fieldId);\n            this.tabGrid.refreshCols(true);\n        },\n\n        removeFieldById: function(fieldId) {\n            var $field = this.$allFields.filter('[data-id=' + fieldId + ']:first'),\n                $group = $field.closest('.fld-tab');\n\n            $field.removeClass('hidden');\n\n            if ($group.hasClass('hidden')) {\n                $group.removeClass('hidden');\n                this.unusedFieldGrid.addItems($group);\n\n                if (this.settings.customizableTabs) {\n                    this.tabDrag.addItems($group);\n                }\n            }\n            else {\n                this.unusedFieldGrid.refreshCols(true);\n            }\n        },\n\n        addTab: function() {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $tab = $('<div class=\"fld-tab\">' +\n                '<div class=\"tabs\">' +\n                '<div class=\"tab sel draggable\">' +\n                '<span>Tab ' + (this.tabGrid.$items.length + 1) + '</span>' +\n                '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Rename') + '\"></a>' +\n                '</div>' +\n                '</div>' +\n                '<div class=\"fld-tabcontent\"></div>' +\n                '</div>').appendTo(this.$tabContainer);\n\n            this.tabGrid.addItems($tab);\n            this.tabDrag.addItems($tab);\n\n            this.initTab($tab);\n        },\n\n        getFieldInputName: function(tabName) {\n            return this.settings.fieldInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n        }\n    },\n    {\n        gridSettings: {\n            itemSelector: '.fld-tab:not(.hidden)',\n            minColWidth: 240,\n            fillMode: 'grid',\n            snapToGrid: 30\n        },\n        defaults: {\n            customizableTabs: true,\n            fieldInputName: 'fieldLayout[__TAB_NAME__][]',\n            requiredFieldInputName: 'requiredFields[]'\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend(\n    {\n        designer: null,\n        $insertion: null,\n        showingInsertion: false,\n        $caboose: null,\n        draggingUnusedItem: false,\n        addToTabGrid: false,\n\n        /**\n         * Constructor\n         */\n        init: function(designer, settings) {\n            this.designer = designer;\n\n            // Find all the items from both containers\n            var $items = this.designer.$tabContainer.find(this.itemSelector)\n                .add(this.designer.$unusedFieldContainer.find(this.itemSelector));\n\n            this.base($items, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.base();\n\n            // Are we dragging an unused item?\n            this.draggingUnusedItem = this.$draggee.hasClass('unused');\n\n            // Create the insertion\n            this.$insertion = this.getInsertion();\n\n            // Add the caboose\n            this.addCaboose();\n            this.$items = $().add(this.$items.add(this.$caboose));\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.addItems(this.$caboose);\n            }\n\n            // Swap the draggee with the insertion if dragging a selected item\n            if (this.draggingUnusedItem) {\n                this.showingInsertion = false;\n            }\n            else {\n                // Actually replace the draggee with the insertion\n                this.$insertion.insertBefore(this.$draggee);\n                this.$draggee.detach();\n                this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n                this.showingInsertion = true;\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$draggee);\n                    this.designer.tabGrid.addItems(this.$insertion);\n                }\n            }\n\n            this.setMidpoints();\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: $.noop,\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: $.noop,\n\n        /**\n         * Tests if an item is within the tab container.\n         */\n        isItemInTabContainer: function($item) {\n            return (this.getItemContainer($item)[0] === this.designer.$tabContainer[0]);\n        },\n\n        /**\n         * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n         */\n        setMidpoints: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                var $item = $(this.$items[i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer($item)) {\n                    continue;\n                }\n\n                var offset = $item.offset();\n\n                $item.data('midpoint', {\n                    left: offset.left + $item.outerWidth() / 2,\n                    top: offset.top + $item.outerHeight() / 2\n                });\n            }\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // Are we hovering over the tab container?\n            if (this.draggingUnusedItem && !Garnish.hitTest(this.mouseX, this.mouseY, this.designer.$tabContainer)) {\n                if (this.showingInsertion) {\n                    this.$insertion.remove();\n                    this.$items = $().add(this.$items.not(this.$insertion));\n                    this.showingInsertion = false;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.removeItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                this.onDrag._closestItem = this.getClosestItem();\n\n                if (this.onDrag._closestItem !== this.$insertion[0]) {\n                    if (this.showingInsertion &&\n                        ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.onDrag._closestItem, this.$items)) &&\n                        ($.inArray(this.onDrag._closestItem, this.$caboose) === -1)\n                    ) {\n                        this.$insertion.insertAfter(this.onDrag._closestItem);\n                    }\n                    else {\n                        this.$insertion.insertBefore(this.onDrag._closestItem);\n                    }\n\n                    this.$items = $().add(this.$items.add(this.$insertion));\n                    this.showingInsertion = true;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.addItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        getClosestItem: function() {\n            this.getClosestItem._closestItem = null;\n            this.getClosestItem._closestItemMouseDiff = null;\n\n            for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n                this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer(this.getClosestItem._$item)) {\n                    continue;\n                }\n\n                this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n                this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n                if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                    this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                    this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n                }\n            }\n\n            return this.getClosestItem._closestItem;\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.showingInsertion) {\n                this.$insertion.replaceWith(this.$draggee);\n                this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$insertion);\n                    this.designer.tabGrid.addItems(this.$draggee);\n                }\n            }\n\n            // Drop the caboose\n            this.$items = this.$items.not(this.$caboose);\n            this.$caboose.remove();\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.removeItems(this.$caboose);\n            }\n\n            // \"show\" the drag items, but make them invisible\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'hidden'\n            });\n\n            this.designer.tabGrid.refreshCols(true);\n            this.designer.unusedFieldGrid.refreshCols(true);\n\n            // return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab',\n        addToTabGrid: true,\n\n        /**\n         * Constructor\n         */\n        init: function(designer) {\n            var settings = {\n                handle: '.tab'\n            };\n\n            this.base(designer, settings);\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            var $tab = this.$draggee.find('.tab');\n\n            return $('<div class=\"fld-tab fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\">' +\n                '<div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ' + $tab.width() + 'px; height: ' + $tab.height() + 'px;\"></div></div>' +\n                '<div class=\"fld-tabcontent\" style=\"height: ' + this.$draggee.find('.fld-tabcontent').height() + 'px;\"></div>' +\n                '</div>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new tab based on that field group\n                var $tab = this.$draggee.clone().removeClass('unused'),\n                    tabName = $tab.find('.tab span').text();\n\n                $tab.find('.fld-field').removeClass('unused');\n\n                // Add the edit button\n                $tab.find('.tabs .tab').append('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                // Remove any hidden fields\n                var $fields = $tab.find('.fld-field'),\n                    $hiddenFields = $fields.filter('.hidden').remove();\n\n                $fields = $fields.not($hiddenFields);\n                $fields.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                for (var i = 0; i < $fields.length; i++) {\n                    var $field = $($fields[i]),\n                        inputName = this.designer.getFieldInputName(tabName);\n\n                    $field.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + $field.data('id') + '\">');\n                }\n\n                this.designer.fieldDrag.addItems($fields);\n\n                this.designer.initTab($tab);\n\n                // Set the unused field group and its fields to hidden\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n                this.$draggee.find('.fld-field').addClass('hidden');\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $tab;\n\n                // Remember it for later\n                this.addItems($tab);\n\n                // Update the grids\n                this.designer.tabGrid.addItems($tab);\n                this.designer.unusedFieldGrid.removeItems(this.$draggee);\n            }\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.FieldDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab .fld-field',\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $();\n\n            var $fieldContainers = this.designer.$tabContainer.children().children('.fld-tabcontent');\n\n            for (var i = 0; i < $fieldContainers.length; i++) {\n                var $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo($fieldContainers[i]);\n                this.$caboose = this.$caboose.add($caboose);\n            }\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            return $('<div class=\"fld-field fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\"/>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent().parent().parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new field based on that one\n                var $field = this.$draggee.clone().removeClass('unused');\n                $field.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n                this.designer.initField($field);\n\n                // Hide the unused field\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                // Hide the group too?\n                if (this.$draggee.siblings(':not(.hidden)').length === 0) {\n                    var $group = this.$draggee.parent().parent();\n                    $group.addClass('hidden');\n                    this.designer.unusedFieldGrid.removeItems($group);\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $field;\n\n                // Remember it for later\n                this.addItems($field);\n            }\n\n            if (this.showingInsertion) {\n                // Find the field's new tab name\n                var tabName = this.$insertion.parent().parent().find('.tab span').text(),\n                    inputName = this.designer.getFieldInputName(tabName);\n\n                if (this.draggingUnusedItem) {\n                    this.$draggee.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + this.$draggee.data('id') + '\">');\n                }\n                else {\n                    this.$draggee.find('.id-input').attr('name', inputName);\n                }\n            }\n\n            this.base();\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            }\n            else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n            }\n            else {\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            if (\n                (this.$toggle.prop('nodeName') === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n            else if (this.$toggle.prop('nodeName') === 'SELECT') {\n                return 'select';\n            }\n            else if (this.$toggle.prop('nodeName') === 'A') {\n                return 'link';\n            }\n        },\n\n        findTargets: function() {\n            if (this.type === 'select') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            }\n            else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal = Garnish.getInputPostVal(this.$toggle);\n            return postVal === null ? null : postVal.replace(/[\\[\\]\\\\\\/]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            }\n            else {\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                }\n                else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                }\n                else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    $target.height('auto');\n                    this.showTarget._targetHeight = $target.height();\n                    $target.css({\n                        height: this.showTarget._currentHeight,\n                        overflow: 'hidden'\n                    });\n\n                    $target.velocity('stop');\n\n                    $target.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                        $target.css({\n                            height: '',\n                            overflow: ''\n                        });\n                    });\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select') {\n                    $target.addClass('hidden');\n                }\n                else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    $target.css('overflow', 'hidden');\n                    $target.velocity('stop');\n                    $target.velocity({height: 0}, 'fast', function() {\n                        $target.addClass('hidden');\n                    });\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function() {\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange();\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                var $saveBtn = $('<div class=\"btn submit\">' + Craft.t('app', 'Save') + '</div>').appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -(this.editorWidthInPx + Craft.LivePreview.dragHandleWidth) + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-(this.editorWidthInPx + Craft.LivePreview.dragHandleWidth), 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - (this.editorWidthInPx + Craft.LivePreview.dragHandleWidth);\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n        dragHandleWidth: 4,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<div/>', {\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                        role: 'btn',\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: $.proxy(function(option) {\n                            this.switchTarget($(option).data('target'));\n                        }, this)\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', function() {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                }.bind(this));\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -(this.editorWidthInPx + Craft.Preview.dragHandleWidth) + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this._slideInOnIframeLoad = true;\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            }, this));\n        },\n\n        close: function() {\n            if (!this.isActive) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-(this.editorWidthInPx + Craft.Preview.dragHandleWidth), 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - (this.editorWidthInPx + Craft.Preview.dragHandleWidth);\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(function(url) {\n                // Maintain the current scroll position?\n                if (!resetScroll && this.iframeLoaded && this.$iframe) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                // Keep the iframe height consistent with its content\n                iFrameResize({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, $iframe[0])\n\n                this.url = url;\n                this.$iframe = $iframe;\n                this.afterUpdateIframe();\n            }.bind(this));\n        },\n\n        afterUpdateIframe: function() {\n            this.trigger('afterUpdateIframe', {\n                target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n        dragHandleWidth: 2,\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        var $cancelButton = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$promptButtons),\n            $submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'OK') + '\" />').appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelButton, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> td > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> td > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> td .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('td[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<div class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            return $container.lightswitch();\n        },\n\n        createLightswitchField: function(config) {\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                var startDate = $startDate.datepicker('getDate');\n                var endDate = $endDate.datepicker('getDate');\n                var startTime = startDate ? startDate.getTime() : null;\n                var endTime = endDate ? endDate.getTime() : null;\n\n                var $options = $ul.find('a');\n                var $option;\n                var foundOption = false;\n\n                for (var i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            var btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            var $btn = $('<div class=\"'+btnClasses+'\" data-icon=\"date\"/>')\n                .text(Craft.t('app', 'All'));\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label || config.instructions) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                if (label) {\n                    var $label = $('<label/>', {\n                        'id': config.labelId || (config.id ? config.id + '-label' : null),\n                        'class': (config.required ? 'required' : null),\n                        'for': config.id,\n                        text: label\n                    }).appendTo($heading);\n\n                    if (siteId) {\n                        for (var i = 0; i < Craft.sites.length; i++) {\n                            if (Craft.sites[i].id == siteId) {\n                                $('<span class=\"site\"/>').text(Craft.sites[i].name).appendTo($label);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (config.instructions) {\n                    $('<div class=\"instructions\"/>').text(config.instructions).appendTo($heading);\n                }\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function( html ) {\n    return html.replace( rxhtmlTag, \"<$1></$2>\" );\n};\n\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        _processedApiHeaders: false,\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n                // Get the latest headers\n                this.getApiHeaders(cancelToken).then(apiHeaders => {\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    axios.request(options).then((apiResponse) => {\n                        // Send the API response back immediately\n                        resolve(apiResponse.data);\n\n                        if (!this._processedApiHeaders) {\n                            if (apiResponse.headers['x-craft-license-status']) {\n                                this._processedApiHeaders = true;\n                                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                                    data: {\n                                        headers: apiResponse.headers,\n                                    },\n                                    cancelToken: cancelToken,\n                                });\n\n                                // If we just got a new license key, set it and then resolve the header waitlist\n                                if (this._apiHeaders && this._apiHeaders['X-Craft-License'] === '__REQUEST__') {\n                                    this._apiHeaders['X-Craft-License'] = apiResponse.headers['x-craft-license'];\n                                    this._resolveHeaderWaitlist();\n                                }\n                            } else if (\n                                this._apiHeaders &&\n                                this._apiHeaders['X-Craft-License'] === '__REQUEST__' &&\n                                this._apiHeaderWaitlist.length\n                            ) {\n                                // The request didn't send headers. Go ahead and resolve the next request on the\n                                // header waitlist.\n                                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                            }\n                        }\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    resolve(this._apiHeaders);\n\n                    // If we are requesting a new Craft license, hold off on\n                    // resolving other API requests until we have one\n                    if (response.data['X-Craft-License'] !== '__REQUEST__') {\n                        this._resolveHeaderWaitlist();\n                    }\n                }).catch(e => {\n                    this._loadingApiHeaders = false;\n                    reject(e)\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[1](e);\n                    }\n                });\n            });\n        },\n\n        _resolveHeaderWaitlist: function() {\n            this._loadingApiHeaders = false;\n            // Was anything else waiting for them?\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._processedApiHeaders = false;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = function() {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                }.bind(this);\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         */\n        findDeltaData: function(oldData, newData, deltaNames) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return ($.inArray(elem, arr) !== -1);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Prevents the outline when an element is focused by the mouse.\n         *\n         * @param elem Either an actual element or a jQuery collection.\n         */\n        preventOutlineOnMouseFocus: function(elem) {\n            var $elem = $(elem),\n                namespace = '.preventOutlineOnMouseFocus';\n\n            $elem.on('mousedown' + namespace, function() {\n                    $elem.addClass('no-outline');\n                    $elem.trigger('focus');\n                })\n                .on('keydown' + namespace + ' blur' + namespace, function(event) {\n                    if (event.keyCode !== Garnish.SHIFT_KEY && event.keyCode !== Garnish.CTRL_KEY && event.keyCode !== Garnish.CMD_KEY) {\n                        $elem.removeClass('no-outline');\n                    }\n                });\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.pill', $container).pill();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n    });\n\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        pill: function() {\n            return this.each(function() {\n                if (!$.data(this, 'pill')) {\n                    new Garnish.Pill(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n                let params = $form.data('params') || {};\n                if ($form.data('param')) {\n                    params[$form.data('param')] = $form.data('value');\n                }\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<div/>', {\n                                class: 'clear-btn',\n                                role: 'button',\n                                title: Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n\n        checkDatetimeValue: function() {\n\n        }\n    });\n\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend(\n    {\n        $element: null,\n        elementId: null,\n        siteId: null,\n        deltaNames: null,\n        initialData: null,\n\n        $form: null,\n        $fieldsContainer: null,\n        $cancelBtn: null,\n        $saveBtn: null,\n        $spinner: null,\n\n        $siteSelect: null,\n        $siteSpinner: null,\n\n        hud: null,\n\n        init: function(element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            }\n\n            this.$element = $(element);\n            this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n            this.loadHud();\n        },\n\n        setElementAttribute: function(name, value) {\n            if (!this.settings.attributes) {\n                this.settings.attributes = {};\n            }\n\n            if (value === null) {\n                delete this.settings.attributes[name];\n            }\n            else {\n                this.settings.attributes[name] = value;\n            }\n        },\n\n        getBaseData: function() {\n            var data = $.extend({}, this.settings.params);\n\n            if (this.settings.siteId) {\n                data.siteId = this.settings.siteId;\n            }\n            else if (this.$element && this.$element.data('site-id')) {\n                data.siteId = this.$element.data('site-id');\n            }\n\n            if (this.settings.elementId) {\n                data.elementId = this.settings.elementId;\n            }\n            else if (this.$element && this.$element.data('id')) {\n                data.elementId = this.$element.data('id');\n            }\n\n            if (this.settings.elementType) {\n                data.elementType = this.settings.elementType;\n            }\n\n            if (this.settings.attributes) {\n                data.attributes = this.settings.attributes;\n            }\n\n            if (this.settings.prevalidate) {\n                data.prevalidate = 1;\n            }\n\n            return data;\n        },\n\n        loadHud: function() {\n            this.onBeginLoading();\n            var data = this.getBaseData();\n            data.includeSites = Craft.isMultiSite && this.settings.showSiteSwitcher;\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(this, 'showHud'));\n        },\n\n        showHud: function(response, textStatus) {\n            this.onEndLoading();\n\n            if (textStatus === 'success') {\n                var $hudContents = $();\n\n                if (response.sites) {\n                    var $header = $('<div class=\"hud-header\"/>');\n\n                    if (response.sites.length === 1) {\n                        $('<h5/>', {text: response.sites[0].name}).appendTo($header);\n                    } else {\n                        var $siteSelectContainer = $('<div class=\"select\"/>').appendTo($header);\n\n                        this.$siteSelect = $('<select/>').appendTo($siteSelectContainer);\n                        this.$siteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($header);\n\n                        for (var i = 0; i < response.sites.length; i++) {\n                            var siteInfo = response.sites[i];\n                            $('<option value=\"' + siteInfo.id + '\"' + (siteInfo.id == response.siteId ? ' selected=\"selected\"' : '') + '>' + siteInfo.name + '</option>').appendTo(this.$siteSelect);\n                        }\n\n                        this.addListener(this.$siteSelect, 'change', 'switchSite');\n                    }\n\n                    $hudContents = $hudContents.add($header);\n                }\n\n                this.$form = $('<div/>');\n                this.$fieldsContainer = $('<div class=\"fields\"/>').appendTo(this.$form);\n\n                this.updateForm(response, true);\n\n                this.onCreateForm(this.$form);\n\n                var $footer = $('<div class=\"hud-footer\"/>').appendTo(this.$form),\n                    $buttonsContainer = $('<div class=\"buttons right\"/>').appendTo($footer);\n                this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttonsContainer);\n                this.$saveBtn = $('<input class=\"btn submit\" type=\"submit\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($buttonsContainer);\n                this.$spinner = $('<div class=\"spinner hidden\"/>').appendTo($buttonsContainer);\n\n                $hudContents = $hudContents.add(this.$form);\n\n                if (!this.hud) {\n                    var hudTrigger = (this.settings.hudTrigger || this.$element);\n\n                    this.hud = new Garnish.HUD(hudTrigger, $hudContents, {\n                        bodyClass: 'body elementeditor',\n                        closeOtherHUDs: false,\n                        hideOnEsc: false,\n                        hideOnShadeClick: false,\n                        onShow: this.onShowHud.bind(this),\n                        onHide: this.onHideHud.bind(this),\n                        onSubmit: this.saveElement.bind(this),\n                    });\n\n                    this.hud.$hud.data('elementEditor', this);\n\n                    // Disable browser input validation\n                    this.hud.$body.attr('novalidate', '');\n\n                    this.hud.on('hide', $.proxy(function() {\n                        delete this.hud;\n                    }, this));\n                }\n                else {\n                    this.hud.updateBody($hudContents);\n                    this.hud.updateSizeAndPosition();\n                }\n\n                // Focus on the first text input\n                $hudContents.find('.text:first').trigger('focus');\n\n                this.addListener(this.$cancelBtn, 'click', function() {\n                    this.hud.hide();\n                });\n            }\n        },\n\n        switchSite: function() {\n            if (\n                this.hud.$body.serialize() !== this.initialData &&\n                !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))\n            ) {\n                this.$siteSelect.val(this.siteId);\n                return;\n            }\n\n            var newSiteId = this.$siteSelect.val();\n\n            if (newSiteId == this.siteId) {\n                return;\n            }\n\n            this.$siteSpinner.removeClass('hidden');\n\n            this.reloadForm({ siteId: newSiteId }, $.proxy(function(textStatus) {\n                this.$siteSpinner.addClass('hidden');\n                if (textStatus !== 'success') {\n                    // Reset the site select\n                    this.$siteSelect.val(this.siteId);\n                }\n            }, this));\n        },\n\n        reloadForm: function(data, callback) {\n            data = $.extend(this.getBaseData(), data);\n\n            Craft.postActionRequest('elements/get-editor-html', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.updateForm(response, true);\n                }\n\n                if (callback) {\n                    callback(textStatus);\n                }\n            }, this));\n        },\n\n        updateForm: function(response, refreshInitialData) {\n            this.siteId = response.siteId;\n            this.$fieldsContainer.html(response.html);\n\n            if (refreshInitialData !== false) {\n                this.deltaNames = response.deltaNames;\n            }\n\n            // Swap any instruction text with info icons\n            var $instructions = this.$fieldsContainer.find('> .meta > .field > .heading > .instructions');\n\n            for (var i = 0; i < $instructions.length; i++) {\n                $instructions.eq(i)\n                    .replaceWith($('<span/>', {\n                        'class': 'info',\n                        'html': $instructions.eq(i).children().html()\n                    }))\n                    .infoicon();\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                Craft.appendHeadHtml(response.headHtml);\n                Craft.appendFootHtml(response.footHtml);\n                Craft.initUiElements(this.$fieldsContainer);\n\n                if (refreshInitialData) {\n                    this.initialData = this.hud.$body.serialize();\n                }\n            }, this));\n        },\n\n        saveElement: function() {\n            var validators = this.settings.validators;\n\n            if ($.isArray(validators)) {\n                for (var i = 0; i < validators.length; i++) {\n                    if ($.isFunction(validators[i]) && !validators[i].call()) {\n                        return false;\n                    }\n                }\n            }\n\n            this.$spinner.removeClass('hidden');\n\n            var data = $.param(this.getBaseData()) + '&' + this.hud.$body.serialize();\n            data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n            Craft.postActionRequest('elements/save-element', data, $.proxy(function(response, textStatus) {\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (this.$element && this.siteId == this.$element.data('site-id')) {\n                            // Update the label\n                            var $title = this.$element.find('.title'),\n                                $a = $title.find('a');\n\n                            if ($a.length && response.cpEditUrl) {\n                                $a.attr('href', response.cpEditUrl);\n                                $a.text(response.newTitle);\n                            }\n                            else {\n                                $title.text(response.newTitle);\n                            }\n                        }\n\n                        if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                            Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                                type: Craft.elementTypeNames[this.settings.elementType][0],\n                            }));\n                        }\n\n                        this.closeHud();\n                        this.onSaveElement(response);\n                    }\n                    else {\n                        this.updateForm(response, false);\n                        Garnish.shake(this.hud.$hud);\n                    }\n                }\n            }, this));\n        },\n\n        closeHud: function() {\n            this.hud.hide();\n            delete this.hud;\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        onShowHud: function() {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n            }, this.saveElement.bind(this));\n            this.settings.onShowHud();\n            this.trigger('showHud');\n        },\n\n        onHideHud: function() {\n            this.settings.onHideHud();\n            this.trigger('hideHud');\n        },\n\n        onBeginLoading: function() {\n            if (this.$element) {\n                this.$element.addClass('loading');\n            }\n\n            this.settings.onBeginLoading();\n            this.trigger('beginLoading');\n        },\n\n        onEndLoading: function() {\n            if (this.$element) {\n                this.$element.removeClass('loading');\n            }\n\n            this.settings.onEndLoading();\n            this.trigger('endLoading');\n        },\n\n        onSaveElement: function(response) {\n            this.settings.onSaveElement(response);\n            this.trigger('saveElement', {\n                response: response\n            });\n\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n        },\n\n        onCreateForm: function($form) {\n            this.settings.onCreateForm($form);\n        }\n    },\n    {\n        defaults: {\n            hudTrigger: null,\n            showSiteSwitcher: true,\n            elementId: null,\n            elementType: null,\n            siteId: null,\n            attributes: null,\n            params: null,\n            prevalidate: false,\n            elementIndex: null,\n\n            onShowHud: $.noop,\n            onHideHud: $.noop,\n            onBeginLoading: $.noop,\n            onEndLoading: $.noop,\n            onCreateForm: $.noop,\n            onSaveElement: $.noop,\n\n            validators: []\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend(\n    {\n        initialized: false,\n        elementType: null,\n\n        instanceState: null,\n        sourceStates: null,\n        sourceStatesStorageKey: null,\n\n        searchTimeout: null,\n        sourceSelect: null,\n\n        $container: null,\n        $main: null,\n        isIndexBusy: false,\n\n        $sidebar: null,\n        showingSidebar: null,\n        sourceKey: null,\n        sourceViewModes: null,\n        $source: null,\n        sourcesByKey: null,\n        $visibleSources: null,\n\n        $customizeSourcesBtn: null,\n        customizeSourcesModal: null,\n\n        $toolbar: null,\n        toolbarOffset: null,\n\n        $search: null,\n        searching: false,\n        searchText: null,\n        trashed: false,\n        drafts: false,\n        $clearSearchBtn: null,\n\n        $statusMenuBtn: null,\n        $statusMenuContainer: null,\n        statusMenu: null,\n        status: null,\n\n        $siteMenuBtn: null,\n        siteMenu: null,\n        siteId: null,\n\n        $sortMenuBtn: null,\n        sortMenu: null,\n        $sortAttributesList: null,\n        $sortDirectionsList: null,\n        $scoreSortAttribute: null,\n        $structureSortAttribute: null,\n\n        $elements: null,\n        $viewModeBtnContainer: null,\n        viewModeBtns: null,\n        viewMode: null,\n        view: null,\n        _autoSelectElements: null,\n        $countSpinner: null,\n        $countContainer: null,\n        page: 1,\n        resultSet: null,\n        totalResults: null,\n        $exportBtn: null,\n\n        actions: null,\n        actionsHeadHtml: null,\n        actionsFootHtml: null,\n        $selectAllContainer: null,\n        $selectAllCheckbox: null,\n        showingActionTriggers: false,\n        exporters: null,\n        _$detachedToolbarItems: null,\n        _$triggers: null,\n\n        _ignoreFailedRequest: false,\n        _cancelToken: null,\n\n        /**\n         * Constructor\n         */\n        init: function(elementType, $container, settings) {\n            this.elementType = elementType;\n            this.$container = $container;\n            this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n            // Set the state objects\n            // ---------------------------------------------------------------------\n\n            this.instanceState = this.getDefaultInstanceState();\n\n            this.sourceStates = {};\n\n            // Instance states (selected source) are stored by a custom storage key defined in the settings\n            if (this.settings.storageKey) {\n                $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n            }\n\n            // Source states (view mode, etc.) are stored by the element type and context\n            this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n            $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n            // Find the DOM elements\n            // ---------------------------------------------------------------------\n\n            this.$main = this.$container.find('.main');\n            this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n            this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n            this.$statusMenuContainer = this.$statusMenuBtn.parent();\n            this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n            this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n            this.$search = this.$toolbar.find('.search:first input:first');\n            this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n            this.$sidebar = this.$container.find('.sidebar:first');\n            this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n            this.$elements = this.$container.find('.elements:first');\n            this.$countSpinner = this.$container.find('#count-spinner');\n            this.$countContainer = this.$container.find('#count-container');\n            this.$exportBtn = this.$container.find('#export-btn');\n\n            // Hide sidebar if needed\n            if (this.settings.hideSidebar) {\n                this.$sidebar.hide();\n                $('.body, .content', this.$container).removeClass('has-sidebar');\n            }\n\n            // Initialize the sources\n            // ---------------------------------------------------------------------\n\n            if (!this.initSources()) {\n                return;\n            }\n\n            // Customize button\n            if (this.$customizeSourcesBtn.length) {\n                this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n            }\n\n            // Initialize the status menu\n            // ---------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n                this.statusMenu.on('optionselect', $.proxy(this, '_handleStatusChange'));\n            }\n\n            // Initialize the site menu\n            // ---------------------------------------------------------------------\n\n            // Is there a site menu?\n            if (this.$siteMenuBtn.length) {\n                this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n                // Figure out the initial site\n                var $option = this.siteMenu.$options.filter('.sel:first');\n\n                if (!$option.length) {\n                    $option = this.siteMenu.$options.first();\n                }\n\n                if ($option.length) {\n                    this._setSite($option.data('site-id'));\n                } else {\n                    // No site options -- they must not have any site permissions\n                    this.settings.criteria = {id: '0'};\n                }\n\n                this.siteMenu.on('optionselect', $.proxy(this, '_handleSiteChange'));\n\n                if (this.siteId) {\n                    // Should we be using a different default site?\n                    var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                    if (defaultSiteId && defaultSiteId != this.siteId) {\n                        // Is that one available here?\n                        var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                        if ($storedSiteOption.length) {\n                            // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                            $storedSiteOption.trigger('click');\n                        }\n                    }\n                }\n            } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n                this._setSite(this.settings.criteria.siteId);\n            } else {\n                this._setSite(Craft.siteId);\n            }\n\n            // Initialize the search input\n            // ---------------------------------------------------------------------\n\n            // Automatically update the elements after new search text has been sitting for a 1/2 second\n            this.addListener(this.$search, 'input', $.proxy(function() {\n                if (!this.searching && this.$search.val()) {\n                    this.startSearching();\n                } else if (this.searching && !this.$search.val()) {\n                    this.stopSearching();\n                }\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'updateElementsIfSearchTextChanged'), 500);\n            }, this));\n\n            // Update the elements when the Return key is pressed\n            this.addListener(this.$search, 'keypress', $.proxy(function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchTimeout) {\n                        clearTimeout(this.searchTimeout);\n                    }\n\n                    this.updateElementsIfSearchTextChanged();\n                }\n            }, this));\n\n            // Clear the search when the X button is clicked\n            this.addListener(this.$clearSearchBtn, 'click', $.proxy(function() {\n                this.$search.val('');\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.$search.trigger('focus');\n                }\n\n                this.stopSearching();\n\n                this.updateElementsIfSearchTextChanged();\n            }, this));\n\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            // Initialize the sort menu\n            // ---------------------------------------------------------------------\n\n            // Is there a sort menu?\n            if (this.$sortMenuBtn.length) {\n                this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n                this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n                this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n                this.sortMenu.on('optionselect', $.proxy(this, '_handleSortChange'));\n            }\n\n            // Initialize the Export button\n            // ---------------------------------------------------------------------\n\n            this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n            // Let everyone know that the UI is initialized\n            // ---------------------------------------------------------------------\n\n            this.initialized = true;\n            this.afterInit();\n\n            // Select the initial source\n            // ---------------------------------------------------------------------\n\n            this.selectDefaultSource();\n\n            // Load the first batch of elements!\n            // ---------------------------------------------------------------------\n\n            // Default to whatever page is in the URL\n            this.setPage(Craft.pageNum);\n\n            this.updateElements(true);\n        },\n\n        afterInit: function() {\n            this.onAfterInit();\n        },\n\n        _createCancelToken: function() {\n            this._cancelToken = axios.CancelToken.source();\n            return this._cancelToken.token;\n        },\n\n        _cancelRequests: function() {\n            if (this._cancelToken) {\n                this._ignoreFailedRequest = true;\n                this._cancelToken.cancel();\n                Garnish.requestAnimationFrame(() => {\n                    this._ignoreFailedRequest = false;\n                });\n            }\n        },\n\n        getSourceContainer: function() {\n            return this.$sidebar.find('nav>ul');\n        },\n\n        get $sources() {\n            if (!this.sourceSelect) {\n                return undefined;\n            }\n\n            return this.sourceSelect.$items;\n        },\n\n        initSources: function() {\n            var $sources = this._getSourcesInList(this.getSourceContainer());\n\n            // No source, no party.\n            if ($sources.length === 0) {\n                return false;\n            }\n\n            // The source selector\n            if (!this.sourceSelect) {\n                this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                    multi: false,\n                    allowEmpty: false,\n                    vertical: true,\n                    onSelectionChange: $.proxy(this, '_handleSourceSelectionChange')\n                });\n            }\n\n            this.sourcesByKey = {};\n            this._initSources($sources);\n\n            return true;\n        },\n\n        selectDefaultSource: function() {\n            var sourceKey = this.getDefaultSourceKey(),\n                $source;\n\n            if (sourceKey) {\n                $source = this.getSourceByKey(sourceKey);\n\n                // Make sure it's visible\n                if (this.$visibleSources.index($source) === -1) {\n                    $source = null;\n                }\n            }\n\n            if (!sourceKey || !$source) {\n                // Select the first source by default\n                $source = this.$visibleSources.first();\n            }\n\n            if ($source.length) {\n                this.selectSource($source);\n            }\n        },\n\n        refreshSources: function() {\n            this.sourceSelect.removeAllItems();\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType\n            };\n\n            this.setIndexBusy();\n\n            Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n                data: params,\n            }).then((response) => {\n                this.setIndexAvailable();\n                this.getSourceContainer().replaceWith(response.data.html);\n                this.initSources();\n                this.selectDefaultSource();\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        initSource: function($source) {\n            this.sourceSelect.addItems($source);\n            this.initSourceToggle($source);\n            this.sourcesByKey[$source.data('key')] = $source;\n\n            if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n                this._expandSource($source);\n            }\n        },\n\n        initSourceToggle: function($source) {\n            // Remove handlers for the same thing. Just in case.\n            this.deinitSourceToggle($source);\n\n            var $toggle = this._getSourceToggle($source);\n\n            if ($toggle.length) {\n                this.addListener($source, 'dblclick', '_handleSourceDblClick');\n                this.addListener($toggle, 'click', '_handleSourceToggleClick');\n                $source.data('hasNestedSources', true);\n            } else {\n                $source.data('hasNestedSources', false);\n            }\n        },\n\n        deinitSource: function($source) {\n            this.sourceSelect.removeItems($source);\n            this.deinitSourceToggle($source);\n            delete this.sourcesByKey[$source.data('key')];\n        },\n\n        deinitSourceToggle: function($source) {\n            if ($source.data('hasNestedSources')) {\n                this.removeListener($source, 'dblclick');\n                this.removeListener(this._getSourceToggle($source), 'click');\n            }\n\n            $source.removeData('hasNestedSources');\n        },\n\n        getDefaultInstanceState: function() {\n            return {\n                selectedSource: null,\n                expandedSources: []\n            };\n        },\n\n        getDefaultSourceKey: function() {\n            if (this.settings.defaultSource) {\n                var paths = this.settings.defaultSource.split('/'),\n                    path = '';\n\n                // Expand the tree\n                for (var i = 0; i < paths.length; i++) {\n                    path += paths[i];\n                    var $source = this.getSourceByKey(path);\n\n                    // If the folder can't be found, then just go to the stored instance source.\n                    if (!$source) {\n                        return this.instanceState.selectedSource;\n                    }\n\n                    this._expandSource($source);\n                    path += '/';\n                }\n\n                // Just make sure that the modal is aware of the newly expanded sources, too.\n                this._setSite(this.siteId);\n\n                return this.settings.defaultSource;\n            }\n\n            return this.instanceState.selectedSource;\n        },\n\n        getDefaultExpandedSources: function() {\n            return this.instanceState.expandedSources;\n        },\n\n        startSearching: function() {\n            // Show the clear button and add/select the Score sort option\n            this.$clearSearchBtn.removeClass('hidden');\n\n            if (!this.$scoreSortAttribute) {\n                this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n                this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n            }\n\n            this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n            this.searching = true;\n\n            this._updateStructureSortOption();\n            this.setSortAttribute('score');\n        },\n\n        stopSearching: function() {\n            // Hide the clear button and Score sort option\n            this.$clearSearchBtn.addClass('hidden');\n\n            this.$scoreSortAttribute.detach();\n\n            this.searching = false;\n\n            this._updateStructureSortOption();\n        },\n\n        setInstanceState: function(key, value) {\n            if (typeof key === 'object') {\n                $.extend(this.instanceState, key);\n            } else {\n                this.instanceState[key] = value;\n            }\n\n            this.storeInstanceState();\n        },\n\n        storeInstanceState: function() {\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n            }\n        },\n\n        getSourceState: function(source, key, defaultValue) {\n            if (typeof this.sourceStates[source] === 'undefined') {\n                // Set it now so any modifications to it by whoever's calling this will be stored.\n                this.sourceStates[source] = {};\n            }\n\n            if (typeof key === 'undefined') {\n                return this.sourceStates[source];\n            } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n                return this.sourceStates[source][key];\n            } else {\n                return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n            }\n        },\n\n        getSelectedSourceState: function(key, defaultValue) {\n            return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n        },\n\n        setSelecetedSourceState: function(key, value) {\n            var viewState = this.getSelectedSourceState();\n\n            if (typeof key === 'object') {\n                $.extend(viewState, key);\n            } else {\n                viewState[key] = value;\n            }\n\n            this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n            // Store it in localStorage too\n            Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n        },\n\n        storeSortAttributeAndDirection: function() {\n            var attr = this.getSelectedSortAttribute();\n\n            if (attr !== 'score') {\n                this.setSelecetedSourceState({\n                    order: attr,\n                    sort: this.getSelectedSortDirection()\n                });\n            }\n        },\n\n        /**\n         * Sets the page number.\n         */\n        setPage: function(page) {\n            if (this.settings.context !== 'index') {\n                return;\n            }\n\n            page = Math.max(page, 1);\n            this.page = page;\n\n            // Update the URL\n            var url = document.location.href\n                .replace(/\\?.*$/, '')\n                .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n                .replace(/\\/+$/, '');\n\n            if (this.page !== 1) {\n                if (Craft.pageTrigger[0] !== '?') {\n                    url += '/';\n                }\n                url += Craft.pageTrigger + this.page;\n            }\n\n            history.replaceState({}, '', url);\n        },\n\n        _resetCount: function() {\n            this.resultSet = null;\n            this.totalResults = null;\n        },\n\n        /**\n         * Returns the data that should be passed to the elementIndex/getElements controller action\n         * when loading elements.\n         */\n        getViewParams: function() {\n            var criteria = {\n                siteId: this.siteId,\n                search: this.searchText,\n                offset: this.settings.batchSize * (this.page - 1),\n                limit: this.settings.batchSize,\n                trashed: this.trashed ? 1 : 0,\n                drafts: this.drafts ? 1 : 0,\n            };\n\n            if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n                criteria.status = this.status;\n            }\n\n            $.extend(criteria, this.settings.criteria);\n\n            var params = {\n                context: this.settings.context,\n                elementType: this.elementType,\n                source: this.instanceState.selectedSource,\n                criteria: criteria,\n                disabledElementIds: this.settings.disabledElementIds,\n                viewState: $.extend({}, this.getSelectedSourceState()),\n                paginated: this._isViewPaginated() ? 1 : 0,\n            };\n\n            // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n            params.viewState.order = this.getSelectedSortAttribute();\n            params.viewState.sort = this.getSelectedSortDirection();\n\n            if (this.getSelectedSortAttribute() === 'structure') {\n                if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                    this.instanceState.collapsedElementIds = [];\n                }\n                params.collapsedElementIds = this.instanceState.collapsedElementIds;\n            }\n\n            // Give plugins a chance to hook in here\n            this.trigger('registerViewParams', {\n                params: params,\n            });\n\n            return params;\n        },\n\n        updateElements: function(preservePagination) {\n            // Ignore if we're not fully initialized yet\n            if (!this.initialized) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            this.setIndexBusy();\n\n            // Kill the old view class\n            if (this.view) {\n                this.view.destroy();\n                delete this.view;\n            }\n\n            if (preservePagination !== true) {\n                this.setPage(1);\n                this._resetCount();\n            }\n\n            var params = this.getViewParams();\n\n            Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                this._updateView(params, response.data);\n            }).catch(() => {\n                this.setIndexAvailable();\n                if (!this._ignoreFailedRequest) {\n                    Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                }\n            });\n        },\n\n        updateElementsIfSearchTextChanged: function() {\n            if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n                this.updateElements();\n            }\n        },\n\n        showActionTriggers: function() {\n            // Ignore if they're already shown\n            if (this.showingActionTriggers) {\n                return;\n            }\n\n            // Hard-code the min toolbar height in case it was taller than the actions toolbar\n            // (prevents the elements from jumping if this ends up being a double-click)\n            this.$toolbar.css('min-height', this.$toolbar.height());\n\n            // Hide any toolbar inputs\n            this._$detachedToolbarItems = this.$toolbar.children();\n            this._$detachedToolbarItems.detach();\n\n            if (!this._$triggers) {\n                this._createTriggers();\n            } else {\n                this._$triggers.appendTo(this.$toolbar);\n            }\n\n            this.showingActionTriggers = true;\n        },\n\n        submitAction: function(actionClass, actionParams) {\n            // Make sure something's selected\n            var selectedElementIds = this.view.getSelectedElementIds(),\n                totalSelected = selectedElementIds.length;\n\n            if (totalSelected === 0) {\n                return;\n            }\n\n            // Find the action\n            var action;\n\n            for (var i = 0; i < this.actions.length; i++) {\n                if (this.actions[i].type === actionClass) {\n                    action = this.actions[i];\n                    break;\n                }\n            }\n\n            if (!action || (action.confirm && !confirm(action.confirm))) {\n                return;\n            }\n\n            // Cancel any ongoing requests\n            this._cancelRequests();\n\n            // Get ready to submit\n            var viewParams = this.getViewParams();\n\n            actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n            var params = $.extend(viewParams, actionParams, {\n                elementAction: actionClass,\n                elementIds: selectedElementIds\n            });\n\n            // Do it\n            this.setIndexBusy();\n            this._autoSelectElements = selectedElementIds;\n\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        },\n\n        afterAction: function(action, params) {\n            // There may be a new background job that needs to be run\n            Craft.cp.runQueue();\n\n            this.onAfterAction(action, params);\n        },\n\n        hideActionTriggers: function() {\n            // Ignore if there aren't any\n            if (!this.showingActionTriggers) {\n                return;\n            }\n\n            this._$detachedToolbarItems.appendTo(this.$toolbar);\n            this._$triggers.detach();\n            // this._$detachedToolbarItems.removeClass('hidden');\n\n            // Unset the min toolbar height\n            this.$toolbar.css('min-height', '');\n\n            this.showingActionTriggers = false;\n        },\n\n        updateActionTriggers: function() {\n            // Do we have an action UI to update?\n            if (this.actions) {\n                var totalSelected = this.view.getSelectedElements().length;\n\n                if (totalSelected !== 0) {\n                    if (totalSelected === this.view.getEnabledElements().length) {\n                        this.$selectAllCheckbox.removeClass('indeterminate');\n                        this.$selectAllCheckbox.addClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'true');\n                    } else {\n                        this.$selectAllCheckbox.addClass('indeterminate');\n                        this.$selectAllCheckbox.removeClass('checked');\n                        this.$selectAllContainer.attr('aria-checked', 'mixed');\n                    }\n\n                    this.showActionTriggers();\n                } else {\n                    this.$selectAllCheckbox.removeClass('indeterminate checked');\n                    this.$selectAllContainer.attr('aria-checked', 'false');\n                    this.hideActionTriggers();\n                }\n            }\n        },\n\n        getSelectedElements: function() {\n            return this.view ? this.view.getSelectedElements() : $();\n        },\n\n        getSelectedElementIds: function() {\n            return this.view ? this.view.getSelectedElementIds() : [];\n        },\n\n        setStatus: function(status) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n            if ($option.length) {\n                this.statusMenu.selectOption($option[0]);\n            }\n        },\n\n        getSortAttributeOption: function(attr) {\n            return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n        },\n\n        getSelectedSortAttribute: function() {\n            return this.$sortAttributesList.find('a.sel:first').data('attr');\n        },\n\n        setSortAttribute: function(attr) {\n            // Find the option (and make sure it actually exists)\n            var $option = this.getSortAttributeOption(attr);\n\n            if ($option.length) {\n                this.$sortAttributesList.find('a.sel').removeClass('sel');\n                $option.addClass('sel');\n\n                var label = $option.text();\n                this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n                this.$sortMenuBtn.text(label);\n\n                this.setSortDirection(attr === 'score' ? 'desc' : 'asc');\n\n                if (attr === 'structure') {\n                    this.$sortDirectionsList.find('a').addClass('disabled');\n                } else {\n                    this.$sortDirectionsList.find('a').removeClass('disabled');\n                }\n            }\n        },\n\n        getSortDirectionOption: function(dir) {\n            return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n        },\n\n        getSelectedSortDirection: function() {\n            return this.$sortDirectionsList.find('a.sel:first').data('dir');\n        },\n\n        getSelectedViewMode: function() {\n            return this.getSelectedSourceState('mode');\n        },\n\n        setSortDirection: function(dir) {\n            if (dir !== 'desc') {\n                dir = 'asc';\n            }\n\n            this.$sortMenuBtn.attr('data-icon', dir);\n            this.$sortDirectionsList.find('a.sel').removeClass('sel');\n            this.getSortDirectionOption(dir).addClass('sel');\n        },\n\n        getSourceByKey: function(key) {\n            if (typeof this.sourcesByKey[key] === 'undefined') {\n                return null;\n            }\n\n            return this.sourcesByKey[key];\n        },\n\n        selectSource: function($source) {\n            if (!$source || !$source.length) {\n                return false;\n            }\n\n            if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n                return false;\n            }\n\n            // Hide action triggers if they're currently being shown\n            this.hideActionTriggers();\n\n            this.$source = $source;\n            this.sourceKey = $source.data('key');\n            this.setInstanceState('selectedSource', this.sourceKey);\n            this.sourceSelect.selectItem($source);\n\n            Craft.cp.updateSidebarMenuLabel();\n\n            if (this.searching) {\n                // Clear the search value without causing it to update elements\n                this.searchText = null;\n                this.$search.val('');\n                this.stopSearching();\n            }\n\n            // Sort menu\n            // ----------------------------------------------------------------------\n\n            // Remove any existing custom sort options from the menu\n            this.$sortAttributesList.children('li[data-extra]').remove();\n\n            // Does this source have any custom sort options?\n            let sortOptions = this.$source.data('sort-options')\n            if (sortOptions) {\n                for (let i = 0; i < sortOptions.length; i++) {\n                    let $option = $('<li/>', {\n                        'data-extra': true,\n                    })\n                        .append(\n                            $('<a/>', {\n                                text: sortOptions[i][0],\n                                'data-attr': sortOptions[i][1],\n                            })\n                        )\n                        .appendTo(this.$sortAttributesList);\n                    this.sortMenu.addOptions($option.children());\n                }\n            }\n\n            // Does this source have a structure?\n            if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n                if (!this.$structureSortAttribute) {\n                    this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                    this.sortMenu.addOptions(this.$structureSortAttribute.children());\n                }\n\n                this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n            } else if (this.$structureSortAttribute) {\n                this.$structureSortAttribute.removeClass('sel').detach();\n            }\n\n            this.setStoredSortOptionsForSource();\n\n            // Status menu\n            // ----------------------------------------------------------------------\n\n            if (this.$statusMenuBtn.length) {\n                if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                    this.$statusMenuContainer.addClass('hidden');\n                } else {\n                    this.$statusMenuContainer.removeClass('hidden');\n                }\n\n                if (this.trashed) {\n                    // Swap to the initial status\n                    var $firstOption = this.statusMenu.$options.first();\n                    this.setStatus($firstOption.data('status'));\n                }\n            }\n\n            // View mode buttons\n            // ----------------------------------------------------------------------\n\n            // Clear out any previous view mode data\n            if (this.$viewModeBtnContainer) {\n                this.$viewModeBtnContainer.remove();\n            }\n\n            this.viewModeBtns = {};\n            this.viewMode = null;\n\n            // Get the new list of view modes\n            this.sourceViewModes = this.getViewModesForSource();\n\n            // Create the buttons if there's more than one mode available to this source\n            if (this.sourceViewModes.length > 1) {\n                this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n                for (var i = 0; i < this.sourceViewModes.length; i++) {\n                    var sourceViewMode = this.sourceViewModes[i];\n\n                    var $viewModeBtn = $('<div data-view=\"' + sourceViewMode.mode + '\" role=\"button\"' +\n                        ' class=\"btn' + (typeof sourceViewMode.className !== 'undefined' ? ' ' + sourceViewMode.className : '') + '\"' +\n                        ' title=\"' + sourceViewMode.title + '\"' +\n                        (typeof sourceViewMode.icon !== 'undefined' ? ' data-icon=\"' + sourceViewMode.icon + '\"' : '') +\n                        '/>'\n                    ).appendTo(this.$viewModeBtnContainer);\n\n                    this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                    this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                        this.selectViewMode(ev.data.mode);\n                        this.updateElements();\n                    });\n                }\n            }\n\n            // Figure out which mode we should start with\n            var viewMode = this.getSelectedViewMode();\n\n            if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n                // Try to keep using the current view mode\n                if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                    viewMode = this.viewMode;\n                }\n                // Just use the first one\n                else {\n                    viewMode = this.sourceViewModes[0].mode;\n                }\n            }\n\n            this.selectViewMode(viewMode);\n\n            this.onSelectSource();\n\n            return true;\n        },\n\n        selectSourceByKey: function(key) {\n            var $source = this.getSourceByKey(key);\n\n            if ($source) {\n                return this.selectSource($source);\n            } else {\n                return false;\n            }\n        },\n\n        setStoredSortOptionsForSource: function() {\n            var sortAttr = this.getSelectedSourceState('order'),\n                sortDir = this.getSelectedSourceState('sort');\n\n            if (!sortAttr || !sortDir) {\n                // Get the default\n                sortAttr = this.getDefaultSort();\n\n                if (Garnish.isArray(sortAttr)) {\n                    sortDir = sortAttr[1];\n                    sortAttr = sortAttr[0];\n                }\n            }\n\n            if (sortDir !== 'asc' && sortDir !== 'desc') {\n                sortDir = 'asc';\n            }\n\n            this.setSortAttribute(sortAttr);\n            this.setSortDirection(sortDir);\n        },\n\n        getDefaultSort: function() {\n            // Does the source specify what to do?\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n                return this.$source.attr('data-default-sort').split(':');\n            } else {\n                // Default to whatever's first\n                return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n            }\n        },\n\n        getViewModesForSource: function() {\n            var viewModes = [\n                {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n            ];\n\n            if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n                viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n            }\n\n            return viewModes;\n        },\n\n        doesSourceHaveViewMode: function(viewMode) {\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                if (this.sourceViewModes[i].mode === viewMode) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        selectViewMode: function(viewMode, force) {\n            // Make sure that the current source supports it\n            if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n\n            // Has anything changed?\n            if (viewMode === this.viewMode) {\n                return;\n            }\n\n            // Deselect the previous view mode\n            if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].removeClass('active');\n            }\n\n            this.viewMode = viewMode;\n            this.setSelecetedSourceState('mode', this.viewMode);\n\n            if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n                this.viewModeBtns[this.viewMode].addClass('active');\n            }\n        },\n\n        createView: function(mode, settings) {\n            var viewClass = this.getViewClass(mode);\n            return new viewClass(this, this.$elements, settings);\n        },\n\n        getViewClass: function(mode) {\n            switch (mode) {\n                case 'table':\n                    return Craft.TableElementIndexView;\n                case 'thumbs':\n                    return Craft.ThumbsElementIndexView;\n                default:\n                    throw 'View mode \"' + mode + '\" not supported.';\n            }\n        },\n\n        rememberDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index === -1) {\n                this.settings.disabledElementIds.push(id);\n            }\n        },\n\n        forgetDisabledElementId: function(id) {\n            var index = $.inArray(id, this.settings.disabledElementIds);\n\n            if (index !== -1) {\n                this.settings.disabledElementIds.splice(index, 1);\n            }\n        },\n\n        enableElements: function($elements) {\n            $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.forgetDisabledElementId(id);\n            }\n\n            this.onEnableElements($elements);\n        },\n\n        disableElements: function($elements) {\n            $elements.removeClass('sel').addClass('disabled');\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $($elements[i]).data('id');\n                this.rememberDisabledElementId(id);\n            }\n\n            this.onDisableElements($elements);\n        },\n\n        getElementById: function(id) {\n            return this.view.getElementById(id);\n        },\n\n        enableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.enableElements($element);\n                } else {\n                    this.forgetDisabledElementId(id);\n                }\n            }\n        },\n\n        disableElementsById: function(ids) {\n            ids = $.makeArray(ids);\n\n            for (var i = 0; i < ids.length; i++) {\n                var id = ids[i],\n                    $element = this.getElementById(id);\n\n                if ($element && $element.length) {\n                    this.disableElements($element);\n                } else {\n                    this.rememberDisabledElementId(id);\n                }\n            }\n        },\n\n        selectElementAfterUpdate: function(id) {\n            if (this._autoSelectElements === null) {\n                this._autoSelectElements = [];\n            }\n\n            this._autoSelectElements.push(id);\n        },\n\n        addButton: function($button) {\n            this.getButtonContainer().append($button);\n        },\n\n        isShowingSidebar: function() {\n            if (this.showingSidebar === null) {\n                this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n            }\n\n            return this.showingSidebar;\n        },\n\n        getButtonContainer: function() {\n            // Is there a predesignated place where buttons should go?\n            if (this.settings.buttonContainer) {\n                return $(this.settings.buttonContainer);\n            } else {\n                var $container = $('#action-button');\n\n                if (!$container.length) {\n                    $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n                }\n\n                return $container;\n            }\n        },\n\n        setIndexBusy: function() {\n            this.$elements.addClass('busy');\n            this.isIndexBusy = true;\n        },\n\n        setIndexAvailable: function() {\n            this.$elements.removeClass('busy');\n            this.isIndexBusy = false;\n        },\n\n        createCustomizeSourcesModal: function() {\n            // Recreate it each time\n            var modal = new Craft.CustomizeSourcesModal(this, {\n                onHide: function() {\n                    modal.destroy();\n                }\n            });\n\n            return modal;\n        },\n\n        disable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.disable();\n            }\n\n            if (this.view) {\n                this.view.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.sourceSelect) {\n                this.sourceSelect.enable();\n            }\n\n            if (this.view) {\n                this.view.enable();\n            }\n\n            this.base();\n        },\n\n        onAfterInit: function() {\n            this.settings.onAfterInit();\n            this.trigger('afterInit');\n        },\n\n        onSelectSource: function() {\n            this.settings.onSelectSource(this.sourceKey);\n            this.trigger('selectSource', {sourceKey: this.sourceKey});\n        },\n\n        onSelectSite: function() {\n            this.settings.onSelectSite(this.siteId);\n            this.trigger('selectSite', {siteId: this.siteId});\n        },\n\n        onUpdateElements: function() {\n            this.settings.onUpdateElements();\n            this.trigger('updateElements');\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        onEnableElements: function($elements) {\n            this.settings.onEnableElements($elements);\n            this.trigger('enableElements', {elements: $elements});\n        },\n\n        onDisableElements: function($elements) {\n            this.settings.onDisableElements($elements);\n            this.trigger('disableElements', {elements: $elements});\n        },\n\n        onAfterAction: function(action, params) {\n            this.settings.onAfterAction(action, params);\n            this.trigger('afterAction', {action: action, params: params});\n        },\n\n        // UI state handlers\n        // -------------------------------------------------------------------------\n\n        _handleSourceSelectionChange: function() {\n            // If the selected source was just removed (maybe because its parent was collapsed),\n            // there won't be a selected source\n            if (!this.sourceSelect.totalSelected) {\n                this.sourceSelect.selectItem(this.$visibleSources.first());\n                return;\n            }\n\n            if (this.selectSource(this.sourceSelect.$selectedItems)) {\n                this.updateElements();\n            }\n        },\n\n        _handleActionTriggerSubmit: function(ev) {\n            ev.preventDefault();\n\n            var $form = $(ev.currentTarget);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $form.data('action'),\n                params = Garnish.getPostData($form);\n\n            this.submitAction(actionClass, params);\n        },\n\n        _handleMenuActionTriggerSubmit: function(ev) {\n            var $option = $(ev.option);\n\n            // Make sure Craft.ElementActionTrigger isn't overriding this\n            if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n                return;\n            }\n\n            var actionClass = $option.data('action');\n            this.submitAction(actionClass);\n        },\n\n        _handleStatusChange: function(ev) {\n            this.statusMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$statusMenuBtn.html($option.html());\n\n            this.trashed = false;\n            this.drafts = false;\n            this.status = null;\n\n            if (Garnish.hasAttr($option, 'data-trashed')) {\n                this.trashed = true;\n            } else if (Garnish.hasAttr($option, 'data-drafts')) {\n                this.drafts = true;\n            } else {\n                this.status = $option.data('status');\n            }\n\n            this._updateStructureSortOption();\n            this.updateElements();\n        },\n\n        _handleSiteChange: function(ev) {\n            this.siteMenu.$options.removeClass('sel');\n            var $option = $(ev.selectedOption).addClass('sel');\n            this.$siteMenuBtn.html($option.html());\n            this._setSite($option.data('site-id'));\n            this.onSelectSite();\n        },\n\n        _setSite: function(siteId) {\n            this.siteId = siteId;\n            this.$visibleSources = $();\n\n            // Hide any sources that aren't available for this site\n            var $firstVisibleSource;\n            var $source;\n            var selectNewSource = false;\n\n            for (var i = 0; i < this.$sources.length; i++) {\n                $source = this.$sources.eq(i);\n                if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                    $source.parent().removeClass('hidden');\n                    this.$visibleSources = this.$visibleSources.add($source);\n                    if (!$firstVisibleSource) {\n                        $firstVisibleSource = $source;\n                    }\n                } else {\n                    $source.parent().addClass('hidden');\n\n                    // Is this the currently selected source?\n                    if (this.$source && this.$source.get(0) == $source.get(0)) {\n                        selectNewSource = true;\n                    }\n                }\n            }\n\n            if (selectNewSource) {\n                this.selectSource($firstVisibleSource);\n            }\n\n            // Hide any empty-nester headings\n            var $headings = this.getSourceContainer().children('.heading');\n            var $heading;\n\n            for (i = 0; i < $headings.length; i++) {\n                $heading = $headings.eq(i);\n                if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                    $heading.removeClass('hidden');\n                } else {\n                    $heading.addClass('hidden');\n                }\n            }\n\n            if (this.initialized) {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n\n                // Update the elements\n                this.updateElements();\n            }\n        },\n\n        _handleSortChange: function(ev) {\n            var $option = $(ev.selectedOption);\n\n            if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n                return;\n            }\n\n            // Is this an attribute or a direction?\n            if ($option.parent().parent().is(this.$sortAttributesList)) {\n                this.setSortAttribute($option.data('attr'));\n            } else {\n                this.setSortDirection($option.data('dir'));\n            }\n\n            this.storeSortAttributeAndDirection();\n            this.updateElements();\n        },\n\n        _handleSelectionChange: function() {\n            this.updateActionTriggers();\n            this.onSelectionChange();\n        },\n\n        _handleSourceDblClick: function(ev) {\n            this._toggleSource($(ev.currentTarget));\n            ev.stopPropagation();\n        },\n\n        _handleSourceToggleClick: function(ev) {\n            this._toggleSource($(ev.currentTarget).prev('a'));\n            ev.stopPropagation();\n        },\n\n        _updateStructureSortOption: function() {\n            var $option = this.getSortAttributeOption('structure');\n\n            if (!$option.length) {\n                return;\n            }\n\n            if (this.trashed || this.drafts || this.searching) {\n                $option.addClass('disabled');\n                if (this.getSelectedSortAttribute() === 'structure') {\n                    // Temporarily set the sort to the first option\n                    var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                    this.setSortAttribute($firstOption.data('attr'));\n                    this.setSortDirection('asc');\n                }\n            } else {\n                $option.removeClass('disabled');\n                this.setStoredSortOptionsForSource();\n            }\n        },\n\n        // Source managemnet\n        // -------------------------------------------------------------------------\n\n        _getSourcesInList: function($list) {\n            return $list.children('li').children('a');\n        },\n\n        _getChildSources: function($source) {\n            var $list = $source.siblings('ul');\n            return this._getSourcesInList($list);\n        },\n\n        _getSourceToggle: function($source) {\n            return $source.siblings('.toggle');\n        },\n\n        _initSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.initSource($($sources[i]));\n            }\n        },\n\n        _deinitSources: function($sources) {\n            for (var i = 0; i < $sources.length; i++) {\n                this.deinitSource($($sources[i]));\n            }\n        },\n\n        _toggleSource: function($source) {\n            if ($source.parent('li').hasClass('expanded')) {\n                this._collapseSource($source);\n            } else {\n                this._expandSource($source);\n            }\n        },\n\n        _expandSource: function($source) {\n            $source.parent('li').addClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._initSources($childSources);\n\n            var key = $source.data('key');\n            if (this.instanceState.expandedSources.indexOf(key) === -1) {\n                this.instanceState.expandedSources.push(key);\n                this.storeInstanceState();\n            }\n        },\n\n        _collapseSource: function($source) {\n            $source.parent('li').removeClass('expanded');\n\n            var $childSources = this._getChildSources($source);\n            this._deinitSources($childSources);\n\n            var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n            if (i !== -1) {\n                this.instanceState.expandedSources.splice(i, 1);\n                this.storeInstanceState();\n            }\n        },\n\n        // View\n        // -------------------------------------------------------------------------\n\n        _isViewPaginated: function() {\n            return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n        },\n\n        _updateView: function(params, response) {\n            // Cleanup\n            // -------------------------------------------------------------\n\n            // Get rid of the old action triggers regardless of whether the new batch has actions or not\n            if (this.actions) {\n                this.hideActionTriggers();\n                this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n            }\n\n            // Update the count text\n            // -------------------------------------------------------------\n\n            if (this.$countContainer.length) {\n                this.$countSpinner.removeClass('hidden');\n                this.$countContainer.html('');\n\n                this._countResults()\n                    .then((total) => {\n                        this.$countSpinner.addClass('hidden');\n\n                        let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                        let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                        if (!this._isViewPaginated()) {\n                            let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n                            this.$countContainer.text(countLabel);\n                        } else {\n                            let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                            let last = Math.min(first + (this.settings.batchSize - 1), total);\n                            let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                                first: first,\n                                last: last,\n                                total: total,\n                                item: itemLabel,\n                                items: itemsLabel,\n                            });\n\n                            let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                            let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                            let $prevBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page > 1 ? '' : ' disabled'),\n                                'data-icon': 'leftangle',\n                                title: Craft.t('app', 'Previous Page')\n                            }).appendTo($paginationContainer);\n                            let $nextBtn = $('<div/>', {\n                                'class': 'page-link' + (this.page < totalPages ? '' : ' disabled'),\n                                'data-icon': 'rightangle',\n                                title: Craft.t('app', 'Next Page')\n                            }).appendTo($paginationContainer);\n\n                            $('<div/>', {\n                                'class': 'page-info',\n                                text: countLabel\n                            }).appendTo($paginationContainer);\n\n                            if (this.page > 1) {\n                                this.addListener($prevBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page - 1);\n                                    this.updateElements(true);\n                                });\n                            }\n\n                            if (this.page < totalPages) {\n                                this.addListener($nextBtn, 'click', function() {\n                                    this.removeListener($prevBtn, 'click');\n                                    this.removeListener($nextBtn, 'click');\n                                    this.setPage(this.page + 1);\n                                    this.updateElements(true);\n                                });\n                            }\n                        }\n                    })\n                    .catch(() => {\n                        this.$countSpinner.addClass('hidden');\n                    });\n            }\n\n            // Update the view with the new container + elements HTML\n            // -------------------------------------------------------------\n\n            this.$elements.html(response.html);\n            Craft.appendHeadHtml(response.headHtml);\n            Craft.appendFootHtml(response.footHtml);\n\n            // Batch actions setup\n            // -------------------------------------------------------------\n\n            this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n            if (response.actions && response.actions.length) {\n                if (this.$selectAllContainer.length) {\n                    this.actions = response.actions;\n                    this.actionsHeadHtml = response.actionsHeadHtml;\n                    this.actionsFootHtml = response.actionsFootHtml;\n\n                    // Create the select all checkbox\n                    this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                    this.$selectAllContainer.attr({\n                        'role': 'checkbox',\n                        'tabindex': '0',\n                        'aria-checked': 'false'\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'click', function() {\n                        if (this.view.getSelectedElements().length === 0) {\n                            this.view.selectAllElements();\n                        } else {\n                            this.view.deselectAllElements();\n                        }\n                    });\n\n                    this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                        if (ev.keyCode === Garnish.SPACE_KEY) {\n                            ev.preventDefault();\n\n                            $(ev.currentTarget).trigger('click');\n                        }\n                    });\n                }\n            } else {\n                if (!this.$selectAllContainer.siblings().length) {\n                    this.$selectAllContainer.parent('.header').remove();\n                }\n                this.$selectAllContainer.remove();\n            }\n\n            // Exporters setup\n            // -------------------------------------------------------------\n\n            this.exporters = response.exporters;\n\n            if (this.exporters && this.exporters.length) {\n                this.$exportBtn.removeClass('hidden');\n            } else {\n                this.$exportBtn.addClass('hidden');\n            }\n\n            // Create the view\n            // -------------------------------------------------------------\n\n            // Should we make the view selectable?\n            var selectable = (this.actions || this.settings.selectable);\n\n            this.view = this.createView(this.getSelectedViewMode(), {\n                context: this.settings.context,\n                batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n                params: params,\n                selectable: selectable,\n                multiSelect: (this.actions || this.settings.multiSelect),\n                checkboxMode: !!this.actions,\n                onSelectionChange: $.proxy(this, '_handleSelectionChange')\n            });\n\n            // Auto-select elements\n            // -------------------------------------------------------------\n\n            if (this._autoSelectElements) {\n                if (selectable) {\n                    for (var i = 0; i < this._autoSelectElements.length; i++) {\n                        this.view.selectElementById(this._autoSelectElements[i]);\n                    }\n                }\n\n                this._autoSelectElements = null;\n            }\n\n            // Trigger the event\n            // -------------------------------------------------------------\n\n            this.onUpdateElements();\n        },\n\n        _countResults: function() {\n            return new Promise((resolve, reject) => {\n                if (this.totalResults !== null) {\n                    resolve(this.totalResults);\n                } else {\n                    var params = this.getViewParams();\n                    delete params.criteria.offset;\n                    delete params.criteria.limit;\n\n                    // Make sure we've got an active result set ID\n                    if (this.resultSet === null) {\n                        this.resultSet = Math.floor(Math.random() * 100000000);\n                    }\n                    params.resultSet = this.resultSet;\n\n                    Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                        data: params,\n                        cancelToken: this._createCancelToken(),\n                    }).then((response) => {\n                        if (response.data.resultSet == this.resultSet) {\n                            this.totalResults = response.data.count;\n                            resolve(response.data.count);\n                        } else {\n                            reject();\n                        }\n                    }).catch(reject);\n                }\n            });\n        },\n\n        _createTriggers: function() {\n            var triggers = [],\n                safeMenuActions = [],\n                destructiveMenuActions = [];\n\n            var i;\n\n            for (i = 0; i < this.actions.length; i++) {\n                var action = this.actions[i];\n\n                if (action.trigger) {\n                    var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                        .data('action', action.type)\n                        .append(action.trigger);\n\n                    this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                    triggers.push($form);\n                } else {\n                    if (!action.destructive) {\n                        safeMenuActions.push(action);\n                    } else {\n                        destructiveMenuActions.push(action);\n                    }\n                }\n            }\n\n            var $btn;\n\n            if (safeMenuActions.length || destructiveMenuActions.length) {\n                var $menuTrigger = $('<form/>');\n\n                $btn = $('<div class=\"btn menubtn\" data-icon=\"settings\" title=\"' + Craft.t('app', 'Actions') + '\"/>').appendTo($menuTrigger);\n\n                var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                    $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                    $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n                if ($safeList) {\n                    $safeList.appendTo($menu);\n                }\n\n                if ($safeList && $destructiveList) {\n                    $('<hr/>').appendTo($menu);\n                }\n\n                if ($destructiveList) {\n                    $destructiveList.appendTo($menu);\n                }\n\n                triggers.push($menuTrigger);\n            }\n\n            this._$triggers = $();\n\n            for (i = 0; i < triggers.length; i++) {\n                var $div = $('<div/>').append(triggers[i]);\n                this._$triggers = this._$triggers.add($div);\n            }\n\n            this._$triggers.appendTo(this.$toolbar);\n            Craft.appendHeadHtml(this.actionsHeadHtml);\n            Craft.appendFootHtml(this.actionsFootHtml);\n\n            Craft.initUiElements(this._$triggers);\n\n            if ($btn) {\n                $btn.data('menubtn').on('optionSelect', $.proxy(this, '_handleMenuActionTriggerSubmit'));\n            }\n        },\n\n        _showExportHud: function() {\n            this.$exportBtn.addClass('active');\n\n            var $form = $('<form/>', {\n                'class': 'export-form'\n            });\n\n            var typeOptions = [];\n            for (var i = 0; i < this.exporters.length; i++) {\n                typeOptions.push({ label: this.exporters[i].name, value: this.exporters[i].type });\n            }\n            var $typeField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Export Type'),\n                options: typeOptions,\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            var $formatField = Craft.ui.createSelectField({\n                label: Craft.t('app', 'Format'),\n                options: [\n                    { label: 'CSV', value: 'csv' },\n                    { label: 'JSON', value: 'json' },\n                    { label: 'XML', value: 'xml' },\n                ],\n                'class': 'fullwidth',\n            }).appendTo($form);\n\n            // Only show the Limit field if there aren't any selected elements\n            var selectedElementIds = this.view.getSelectedElementIds();\n\n            if (!selectedElementIds.length) {\n                var $limitField = Craft.ui.createTextField({\n                    label: Craft.t('app', 'Limit'),\n                    placeholder: Craft.t('app', 'No limit'),\n                    type: 'number',\n                    min: 1\n                }).appendTo($form);\n            }\n\n            $('<input/>', {\n                type: 'submit',\n                'class': 'btn submit fullwidth',\n                value: Craft.t('app', 'Export')\n            }).appendTo($form)\n\n            var $spinner = $('<div/>', {\n                'class': 'spinner hidden'\n            }).appendTo($form);\n\n            var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n            hud.on('hide', $.proxy(function() {\n                this.$exportBtn.removeClass('active');\n            }, this));\n\n            var submitting = false;\n\n            this.addListener($form, 'submit', function(ev) {\n                ev.preventDefault();\n                if (submitting) {\n                    return;\n                }\n\n                submitting = true;\n                $spinner.removeClass('hidden');\n\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                params.type = $typeField.find('select').val();\n                params.format = $formatField.find('select').val();\n\n                if (selectedElementIds.length) {\n                    params.criteria.id = selectedElementIds;\n                } else {\n                    var limit = parseInt($limitField.find('input').val());\n                    if (limit && !isNaN(limit)) {\n                        params.criteria.limit = limit;\n                    }\n                }\n\n                if (Craft.csrfTokenValue) {\n                    params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n                }\n\n                Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                    .then(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                    })\n                    .catch(function() {\n                        submitting = false;\n                        $spinner.addClass('hidden');\n                        if (!this._ignoreFailedRequest) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    });\n            });\n        },\n\n        _createMenuTriggerList: function(actions, destructive) {\n            if (actions && actions.length) {\n                var $ul = $('<ul/>');\n\n                for (var i = 0; i < actions.length; i++) {\n                    var actionClass = actions[i].type;\n                    $('<li/>').append($('<a/>', {\n                        id: Craft.formatInputId(actionClass) + '-actiontrigger',\n                        'class': (destructive ? 'error' : null),\n                        'data-action': actionClass,\n                        text: actions[i].name\n                    })).appendTo($ul);\n                }\n\n                return $ul;\n            }\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            modal: null,\n            storageKey: null,\n            criteria: null,\n            batchSize: 100,\n            disabledElementIds: [],\n            selectable: false,\n            multiSelect: false,\n            buttonContainer: null,\n            hideSidebar: false,\n            toolbarSelector: '.toolbar:first',\n            refreshSourcesAction: 'element-indexes/get-source-tree-html',\n            updateElementsAction: 'element-indexes/get-elements',\n            countElementsAction: 'element-indexes/count-elements',\n            submitActionsAction: 'element-indexes/perform-action',\n            defaultSiteId: null,\n            defaultSource: null,\n\n            onAfterInit: $.noop,\n            onSelectSource: $.noop,\n            onSelectSite: $.noop,\n            onUpdateElements: $.noop,\n            onSelectionChange: $.noop,\n            onEnableElements: $.noop,\n            onDisableElements: $.noop,\n            onAfterAction: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend(\n    {\n        $container: null,\n        $loadingMoreSpinner: null,\n        $elementContainer: null,\n        $scroller: null,\n\n        elementIndex: null,\n        thumbLoader: null,\n        elementSelect: null,\n\n        loadingMore: false,\n\n        _totalVisible: null,\n        _morePending: null,\n        _handleEnableElements: null,\n        _handleDisableElements: null,\n\n        init: function(elementIndex, container, settings) {\n            this.elementIndex = elementIndex;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n            // Create a \"loading-more\" spinner\n            this.$loadingMoreSpinner = $(\n                '<div class=\"centeralign hidden\">' +\n                '<div class=\"spinner loadingmore\"></div>' +\n                '</div>'\n            ).insertAfter(this.$container);\n\n            // Get the actual elements container and its child elements\n            this.$elementContainer = this.getElementContainer();\n            var $elements = this.$elementContainer.children();\n\n            this.setTotalVisible($elements.length);\n            this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n            // Instantiate the thumb loader\n            this.thumbLoader = new Craft.ElementThumbLoader();\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select(\n                    this.$elementContainer,\n                    $elements.filter(':not(.disabled)'),\n                    {\n                        multi: this.settings.multiSelect,\n                        vertical: this.isVerticalList(),\n                        handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                        filter: ':not(a):not(.toggle)',\n                        checkboxMode: this.settings.checkboxMode,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange')\n                    }\n                );\n\n                this._handleEnableElements = $.proxy(function(ev) {\n                    this.elementSelect.addItems(ev.elements);\n                }, this);\n\n                this._handleDisableElements = $.proxy(function(ev) {\n                    this.elementSelect.removeItems(ev.elements);\n                }, this);\n\n                this.elementIndex.on('enableElements', this._handleEnableElements);\n                this.elementIndex.on('disableElements', this._handleDisableElements);\n            }\n\n            // Enable inline element editing if this is an index page\n            if (this.settings.context === 'index') {\n                this._handleElementEditing = $.proxy(function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.prop('nodeName') === 'A') {\n                        // Let the link do its thing\n                        return;\n                    }\n\n                    var $element;\n\n                    if ($target.hasClass('element')) {\n                        $element = $target;\n                    }\n                    else {\n                        $element = $target.closest('.element');\n\n                        if (!$element.length) {\n                            return;\n                        }\n                    }\n\n                    if (Garnish.hasAttr($element, 'data-editable')) {\n                        this.createElementEditor($element);\n                    }\n                }, this);\n\n                if (!this.elementIndex.trashed) {\n                    this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                    if ($.isTouchCapable()) {\n                        this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                    }\n                }\n            }\n\n            // Give sub-classes a chance to do post-initialization stuff here\n            this.afterInit();\n\n            // Set up lazy-loading\n            if (this.settings.batchSize) {\n                if (this.settings.context === 'index') {\n                    this.$scroller = Garnish.$scrollContainer;\n                }\n                else {\n                    this.$scroller = this.elementIndex.$main;\n                }\n\n                this.$scroller.scrollTop(0);\n                this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                this.maybeLoadMore();\n            }\n        },\n\n        getElementContainer: function() {\n            throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n        },\n\n        afterInit: function() {\n        },\n\n        getAllElements: function() {\n            return this.$elementContainer.children();\n        },\n\n        getEnabledElements: function() {\n            return this.$elementContainer.children(':not(.disabled)');\n        },\n\n        getElementById: function(id) {\n            var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n            if ($element.length) {\n                return $element;\n            }\n            else {\n                return null;\n            }\n        },\n\n        getSelectedElements: function() {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            return this.elementSelect.$selectedItems;\n        },\n\n        getSelectedElementIds: function() {\n            var $selectedElements = this.getSelectedElements(),\n                ids = [];\n\n            if ($selectedElements) {\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    ids.push($selectedElements.eq(i).data('id'));\n                }\n            }\n\n            return ids;\n        },\n\n        selectElement: function($element) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            this.elementSelect.selectItem($element, true);\n            return true;\n        },\n\n        selectElementById: function(id) {\n            if (!this.elementSelect) {\n                throw 'This view is not selectable.';\n            }\n\n            var $element = this.getElementById(id);\n\n            if ($element) {\n                this.elementSelect.selectItem($element, true);\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        selectAllElements: function() {\n            this.elementSelect.selectAll();\n        },\n\n        deselectAllElements: function() {\n            this.elementSelect.deselectAll();\n        },\n\n        isVerticalList: function() {\n            return false;\n        },\n\n        getTotalVisible: function() {\n            return this._totalVisible;\n        },\n\n        setTotalVisible: function(totalVisible) {\n            this._totalVisible = totalVisible;\n        },\n\n        getMorePending: function() {\n            return this._morePending;\n        },\n\n        setMorePending: function(morePending) {\n            this._morePending = morePending;\n        },\n\n        /**\n         * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n         */\n        maybeLoadMore: function() {\n            if (this.canLoadMore()) {\n                this.loadMore();\n            }\n        },\n\n        /**\n         * Returns whether the user has reached the bottom of the scroll area.\n         */\n        canLoadMore: function() {\n            if (!this.getMorePending() || !this.settings.batchSize) {\n                return false;\n            }\n\n            // Check if the user has reached the bottom of the scroll area\n            var containerHeight;\n\n            if (this.$scroller[0] === Garnish.$win[0]) {\n                var winHeight = Garnish.$win.innerHeight(),\n                    winScrollTop = Garnish.$win.scrollTop(),\n                    containerOffset = this.$container.offset().top;\n                containerHeight = this.$container.height();\n\n                return (winHeight + winScrollTop >= containerOffset + containerHeight);\n            }\n            else {\n                var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                    containerScrollTop = this.$scroller.scrollTop();\n                containerHeight = this.$scroller.outerHeight();\n\n                return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n            }\n        },\n\n        /**\n         * Loads the next batch of elements.\n         */\n        loadMore: function() {\n            if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n                return;\n            }\n\n            this.loadingMore = true;\n            this.$loadingMoreSpinner.removeClass('hidden');\n            this.removeListener(this.$scroller, 'scroll');\n\n            var data = this.getLoadMoreParams();\n\n            Craft.postActionRequest(this.settings.loadMoreElementsAction, data, $.proxy(function(response, textStatus) {\n                this.loadingMore = false;\n                this.$loadingMoreSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $newElements = $(response.html);\n\n                    this.appendElements($newElements);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n\n                    if (this.elementSelect) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n                    this.setMorePending($newElements.length == this.settings.batchSize);\n\n                    // Is there room to load more right now?\n                    this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n                    this.maybeLoadMore();\n                }\n            }, this));\n        },\n\n        getLoadMoreParams: function() {\n            // Use the same params that were passed when initializing this view\n            var params = $.extend(true, {}, this.settings.params);\n            params.criteria.offset = this.getTotalVisible();\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            $newElements.appendTo(this.$elementContainer);\n            this.thumbLoader.load($newElements);\n            this.onAppendElements($newElements);\n        },\n\n        onAppendElements: function($newElements) {\n            this.settings.onAppendElements($newElements);\n            this.trigger('appendElements', {\n                newElements: $newElements\n            });\n        },\n\n        onSelectionChange: function() {\n            this.settings.onSelectionChange();\n            this.trigger('selectionChange');\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                elementIndex: this.elementIndex\n            });\n        },\n\n        disable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.disable();\n            }\n        },\n\n        enable: function() {\n            if (this.elementSelect) {\n                this.elementSelect.enable();\n            }\n        },\n\n        destroy: function() {\n            // Remove the \"loading-more\" spinner, since we added that outside of the view container\n            this.$loadingMoreSpinner.remove();\n\n            // Kill the thumb loader\n            this.thumbLoader.destroy();\n            delete this.thumbLoader;\n\n            // Delete the element select\n            if (this.elementSelect) {\n                this.elementIndex.off('enableElements', this._handleEnableElements);\n                this.elementIndex.off('disableElements', this._handleDisableElements);\n\n                this.elementSelect.destroy();\n                delete this.elementSelect;\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            context: 'index',\n            batchSize: null,\n            params: null,\n            selectable: false,\n            multiSelect: false,\n            checkboxMode: false,\n            loadMoreElementsAction: 'element-indexes/get-more-elements',\n            onAppendElements: $.noop,\n            onSelectionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend(\n    {\n        thumbLoader: null,\n        elementSelect: null,\n        elementSort: null,\n        modal: null,\n        elementEditor: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addElementBtn: null,\n\n        _initialized: false,\n\n        init: function(settings) {\n            // Normalize the settings and set them\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n            // Apply the storage key prefix\n            if (this.settings.modalStorageKey) {\n                this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n            }\n\n            // No reason for this to be sortable if we're only allowing 1 selection\n            if (this.settings.limit == 1) {\n                this.settings.sortable = false;\n            }\n\n            this.$container = this.getContainer();\n\n            // Store a reference to this class\n            this.$container.data('elementSelect', this);\n\n            this.$elementsContainer = this.getElementsContainer();\n            this.$addElementBtn = this.getAddElementsBtn();\n\n            if (this.$addElementBtn && this.settings.limit == 1) {\n                this.$addElementBtn\n                    .css('position', 'absolute')\n                    .css('top', 0)\n                    .css(Craft.left, 0);\n            }\n\n            this.thumbLoader = new Craft.ElementThumbLoader();\n\n            this.initElementSelect();\n            this.initElementSort();\n            this.resetElements();\n\n            if (this.$addElementBtn) {\n                this.addListener(this.$addElementBtn, 'activate', 'showModal');\n            }\n\n            this._initialized = true;\n        },\n\n        get totalSelected() {\n            return this.$elements.length;\n        },\n\n        getContainer: function() {\n            return $('#' + this.settings.id);\n        },\n\n        getElementsContainer: function() {\n            return this.$container.children('.elements');\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.children();\n        },\n\n        getAddElementsBtn: function() {\n            return this.$container.children('.btn.add');\n        },\n\n        initElementSelect: function() {\n            if (this.settings.selectable) {\n                this.elementSelect = new Garnish.Select({\n                    multi: this.settings.sortable,\n                    filter: ':not(.delete)'\n                });\n            }\n        },\n\n        initElementSort: function() {\n            if (this.settings.sortable) {\n                this.elementSort = new Garnish.DragSort({\n                    container: this.$elementsContainer,\n                    filter: (this.settings.selectable ? $.proxy(function() {\n                            // Only return all the selected items if the target item is selected\n                            if (this.elementSort.$targetItem.hasClass('sel')) {\n                                return this.elementSelect.getSelectedItems();\n                            }\n                            else {\n                                return this.elementSort.$targetItem;\n                            }\n                        }, this) : null),\n                    ignoreHandleSelector: '.delete',\n                    axis: this.getElementSortAxis(),\n                    collapseDraggees: true,\n                    magnetStrength: 4,\n                    helperLagBase: 1.5,\n                    onSortChange: (this.settings.selectable ? $.proxy(function() {\n                            this.elementSelect.resetItemOrder();\n                        }, this) : null)\n                });\n            }\n        },\n\n        getElementSortAxis: function() {\n            return (this.settings.viewMode === 'list' ? 'y' : null);\n        },\n\n        canAddMoreElements: function() {\n            return (!this.settings.limit || this.$elements.length < this.settings.limit);\n        },\n\n        updateAddElementsBtn: function() {\n            if (this.canAddMoreElements()) {\n                this.enableAddElementsBtn();\n            }\n            else {\n                this.disableAddElementsBtn();\n            }\n        },\n\n        disableAddElementsBtn: function() {\n            if (this.$addElementBtn && !this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.addClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeOut', Craft.BaseElementSelectInput.ADD_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.hide();\n                    }\n                }\n            }\n        },\n\n        enableAddElementsBtn: function() {\n            if (this.$addElementBtn && this.$addElementBtn.hasClass('disabled')) {\n                this.$addElementBtn.removeClass('disabled');\n\n                if (this.settings.limit == 1) {\n                    if (this._initialized) {\n                        this.$addElementBtn.velocity('fadeIn', Craft.BaseElementSelectInput.REMOVE_FX_DURATION);\n                    }\n                    else {\n                        this.$addElementBtn.show();\n                    }\n                }\n            }\n        },\n\n        resetElements: function() {\n            if (this.$elements !== null) {\n                this.removeElements(this.$elements);\n            } else {\n                this.$elements = $();\n            }\n\n            this.addElements(this.getElements());\n        },\n\n        addElements: function($elements) {\n            this.thumbLoader.load($elements);\n\n            if (this.settings.selectable) {\n                this.elementSelect.addItems($elements);\n            }\n\n            if (this.settings.sortable) {\n                this.elementSort.addItems($elements);\n            }\n\n            if (this.settings.editable) {\n                this._handleShowElementEditor = $.proxy(function(ev) {\n                    var $element = $(ev.currentTarget);\n                    if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                        this.elementEditor = this.createElementEditor($element);\n                    }\n                }, this);\n\n                this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n                if ($.isTouchCapable()) {\n                    this.addListener($elements, 'taphold', this._handleShowElementEditor);\n                }\n            }\n\n            $elements.find('.delete').on('click dblclick', $.proxy(function(ev) {\n                this.removeElement($(ev.currentTarget).closest('.element'));\n                // Prevent this from acting as one of a double-click\n                ev.stopPropagation();\n            }, this));\n\n            this.$elements = this.$elements.add($elements);\n            this.updateAddElementsBtn();\n        },\n\n        createElementEditor: function($element, settings) {\n            if (!settings) {\n                settings = {};\n            }\n            settings.prevalidate = this.settings.prevalidate;\n            return Craft.createElementEditor(this.settings.elementType, $element, settings);\n        },\n\n        removeElements: function($elements) {\n            if (this.settings.selectable) {\n                this.elementSelect.removeItems($elements);\n            }\n\n            if (this.modal) {\n                var ids = [];\n\n                for (var i = 0; i < $elements.length; i++) {\n                    var id = $elements.eq(i).data('id');\n\n                    if (id) {\n                        ids.push(id);\n                    }\n                }\n\n                if (ids.length) {\n                    this.modal.elementIndex.enableElementsById(ids);\n                }\n            }\n\n            // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n            $elements.children('input').prop('disabled', true);\n\n            this.$elements = this.$elements.not($elements);\n            this.updateAddElementsBtn();\n\n            this.onRemoveElements();\n        },\n\n        removeElement: function($element) {\n            this.removeElements($element);\n            this.animateElementAway($element, function() {\n                $element.remove();\n            });\n        },\n\n        animateElementAway: function($element, callback) {\n            $element.css('z-index', 0);\n\n            var animateCss = {\n                opacity: -1\n            };\n            animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n            if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n                animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n            }\n\n            $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, callback);\n        },\n\n        showModal: function() {\n            // Make sure we haven't reached the limit\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            if (!this.modal) {\n                this.modal = this.createModal();\n            }\n            else {\n                this.modal.show();\n            }\n        },\n\n        createModal: function() {\n            return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n        },\n\n        getModalSettings: function() {\n            return $.extend({\n                closeOtherModals: false,\n                storageKey: this.modalStorageKey,\n                sources: this.settings.sources,\n                criteria: this.settings.criteria,\n                multiSelect: (this.settings.limit != 1),\n                showSiteMenu: this.settings.showSiteMenu,\n                disabledElementIds: this.getDisabledElementIds(),\n                onSelect: $.proxy(this, 'onModalSelect')\n            }, this.settings.modalSettings);\n        },\n\n        getSelectedElementIds: function() {\n            var ids = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                ids.push(this.$elements.eq(i).data('id'));\n            }\n\n            return ids;\n        },\n\n        getDisabledElementIds: function() {\n            var ids = this.getSelectedElementIds();\n\n            if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n                ids.push(this.settings.sourceElementId);\n            }\n\n            if (this.settings.disabledElementIds) {\n                ids.push(...this.settings.disabledElementIds);\n            }\n\n            return ids;\n        },\n\n        onModalSelect: function(elements) {\n            if (this.settings.limit) {\n                // Cut off any excess elements\n                var slotsLeft = this.settings.limit - this.$elements.length;\n\n                if (elements.length > slotsLeft) {\n                    elements = elements.slice(0, slotsLeft);\n                }\n            }\n\n            this.selectElements(elements);\n            this.updateDisabledElementsInModal();\n        },\n\n        selectElements: function(elements) {\n            for (let i = 0; i < elements.length; i++) {\n                let elementInfo = elements[i],\n                    $element = this.createNewElement(elementInfo);\n\n                this.appendElement($element);\n                this.addElements($element);\n                this.animateElementIntoPlace(elementInfo.$element, $element);\n\n                // Override the element reference with the new one\n                elementInfo.$element = $element;\n            }\n\n            this.onSelectElements(elements);\n        },\n\n        createNewElement: function(elementInfo) {\n            var $element = elementInfo.$element.clone();\n\n            // Make a couple tweaks\n            Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n            $element.addClass('removable');\n            $element.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + elementInfo.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            return $element;\n        },\n\n        appendElement: function($element) {\n            $element.appendTo(this.$elementsContainer);\n        },\n\n        animateElementIntoPlace: function($modalElement, $inputElement) {\n            var origOffset = $modalElement.offset(),\n                destOffset = $inputElement.offset(),\n                $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n            $inputElement.css('visibility', 'hidden');\n\n            $helper.css({\n                position: 'absolute',\n                zIndex: 10000,\n                top: origOffset.top,\n                left: origOffset.left\n            });\n\n            var animateCss = {\n                top: destOffset.top,\n                left: destOffset.left\n            };\n\n            $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n                $helper.remove();\n                $inputElement.css('visibility', 'visible');\n            });\n        },\n\n        updateDisabledElementsInModal: function() {\n            if (this.modal.elementIndex) {\n                this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n            }\n        },\n\n        getElementById: function(id) {\n            for (var i = 0; i < this.$elements.length; i++) {\n                var $element = this.$elements.eq(i);\n\n                if ($element.data('id') == id) {\n                    return $element;\n                }\n            }\n        },\n\n        onSelectElements: function(elements) {\n            this.trigger('selectElements', {elements: elements});\n            this.settings.onSelectElements(elements);\n\n            if (window.draftEditor) {\n                window.draftEditor.checkForm();\n            }\n        },\n\n        onRemoveElements: function() {\n            this.trigger('removeElements');\n            this.settings.onRemoveElements();\n        }\n    },\n    {\n        ADD_FX_DURATION: 200,\n        REMOVE_FX_DURATION: 200,\n\n        defaults: {\n            id: null,\n            name: null,\n            fieldId: null,\n            elementType: null,\n            sources: null,\n            criteria: {},\n            allowSelfRelations: false,\n            sourceElementId: null,\n            disabledElementIds: null,\n            viewMode: 'list',\n            limit: null,\n            showSiteMenu: false,\n            modalStorageKey: null,\n            modalSettings: {},\n            onSelectElements: $.noop,\n            onRemoveElements: $.noop,\n            sortable: true,\n            selectable: true,\n            editable: true,\n            prevalidate: false,\n            editorSettings: {}\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend(\n    {\n        elementType: null,\n        elementIndex: null,\n\n        $body: null,\n        $selectBtn: null,\n        $sidebar: null,\n        $sources: null,\n        $sourceToggles: null,\n        $main: null,\n        $search: null,\n        $elements: null,\n        $tbody: null,\n        $primaryButtons: null,\n        $secondaryButtons: null,\n        $cancelBtn: null,\n        $footerSpinner: null,\n\n        init: function(elementType, settings) {\n            this.elementType = elementType;\n            this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n            // Build the modal\n            var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n                $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n            this.base($container, this.settings);\n\n            this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n            this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n            this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n            this.$cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$primaryButtons);\n            this.$selectBtn = $('<div class=\"btn disabled submit\">' + Craft.t('app', 'Select') + '</div>').appendTo(this.$primaryButtons);\n\n            this.$body = $body;\n\n            this.addListener(this.$cancelBtn, 'activate', 'cancel');\n            this.addListener(this.$selectBtn, 'activate', 'selectElements');\n        },\n\n        onFadeIn: function() {\n            if (!this.elementIndex) {\n                this._createElementIndex();\n            }\n            else {\n                // Auto-focus the Search box\n                if (!Garnish.isMobileBrowser(true)) {\n                    this.elementIndex.$search.trigger('focus');\n                }\n            }\n\n            this.base();\n        },\n\n        onSelectionChange: function() {\n            this.updateSelectBtnState();\n        },\n\n        updateSelectBtnState: function() {\n            if (this.$selectBtn) {\n                if (this.elementIndex.getSelectedElements().length) {\n                    this.enableSelectBtn();\n                }\n                else {\n                    this.disableSelectBtn();\n                }\n            }\n        },\n\n        enableSelectBtn: function() {\n            this.$selectBtn.removeClass('disabled');\n        },\n\n        disableSelectBtn: function() {\n            this.$selectBtn.addClass('disabled');\n        },\n\n        enableCancelBtn: function() {\n            this.$cancelBtn.removeClass('disabled');\n        },\n\n        disableCancelBtn: function() {\n            this.$cancelBtn.addClass('disabled');\n        },\n\n        showFooterSpinner: function() {\n            this.$footerSpinner.removeClass('hidden');\n        },\n\n        hideFooterSpinner: function() {\n            this.$footerSpinner.addClass('hidden');\n        },\n\n        cancel: function() {\n            if (!this.$cancelBtn.hasClass('disabled')) {\n                this.hide();\n            }\n        },\n\n        selectElements: function() {\n            if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n                // TODO: This code shouldn't know about views' elementSelect objects\n                this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n                var $selectedElements = this.elementIndex.getSelectedElements(),\n                    elementInfo = this.getElementInfo($selectedElements);\n\n                this.onSelect(elementInfo);\n\n                if (this.settings.disableElementsOnSelect) {\n                    this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n                }\n\n                if (this.settings.hideOnSelect) {\n                    this.hide();\n                }\n            }\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $element = $($selectedElements[i]);\n                var elementInfo = Craft.getElementInfo($element);\n\n                info.push(elementInfo);\n            }\n\n            return info;\n        },\n\n        show: function() {\n            this.updateSelectBtnState();\n            this.base();\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo);\n        },\n\n        disable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.disable();\n            }\n\n            this.base();\n        },\n\n        enable: function() {\n            if (this.elementIndex) {\n                this.elementIndex.enable();\n            }\n\n            this.base();\n        },\n\n        _createElementIndex: function() {\n            // Get the modal body HTML based on the settings\n            var data = {\n                context: 'modal',\n                elementType: this.elementType,\n                sources: this.settings.sources\n            };\n\n            if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n                data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n            }\n\n            Craft.postActionRequest('elements/get-modal-body', data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.$body.html(response.html);\n\n                    if (this.$body.has('.sidebar:not(.hidden)').length) {\n                        this.$body.addClass('has-sidebar');\n                    }\n\n                    // Initialize the element index\n                    this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                        context: 'modal',\n                        modal: this,\n                        storageKey: this.settings.storageKey,\n                        criteria: this.settings.criteria,\n                        disabledElementIds: this.settings.disabledElementIds,\n                        selectable: true,\n                        multiSelect: this.settings.multiSelect,\n                        buttonContainer: this.$secondaryButtons,\n                        onSelectionChange: $.proxy(this, 'onSelectionChange'),\n                        hideSidebar: this.settings.hideSidebar,\n                        defaultSiteId: this.settings.defaultSiteId,\n                        defaultSource: this.settings.defaultSource\n                    });\n\n                    // Double-clicking or double-tapping should select the elements\n                    this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                        // Make sure the touch targets are the same\n                        // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                        if (touchData.firstTap.target === touchData.secondTap.target) {\n                            this.selectElements();\n                        }\n                    });\n                }\n            }, this));\n        }\n    },\n    {\n        defaults: {\n            resizable: true,\n            storageKey: null,\n            sources: null,\n            criteria: null,\n            multiSelect: false,\n            showSiteMenu: null,\n            disabledElementIds: [],\n            disableElementsOnSelect: false,\n            hideOnSelect: true,\n            onCancel: $.noop,\n            onSelect: $.noop,\n            hideSidebar: false,\n            defaultSiteId: null,\n            defaultSource: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend(\n    {\n        $source: null,\n        $target: null,\n        $form: null,\n        settings: null,\n\n        listening: null,\n        timeout: null,\n\n        init: function(source, target, settings) {\n            this.$source = $(source);\n            this.$target = $(target);\n            this.$form = this.$source.closest('form');\n\n            this.setSettings(settings);\n\n            this.startListening();\n        },\n\n        setNewSource: function(source) {\n            var listening = this.listening;\n            this.stopListening();\n\n            this.$source = $(source);\n\n            if (listening) {\n                this.startListening();\n            }\n        },\n\n        startListening: function() {\n            if (this.listening) {\n                return;\n            }\n\n            this.listening = true;\n\n            this.addListener(this.$source, 'input', 'onSourceTextChange');\n            this.addListener(this.$target, 'input', 'onTargetTextChange');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n        },\n\n        stopListening: function() {\n            if (!this.listening) {\n                return;\n            }\n\n            this.listening = false;\n\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.removeAllListeners(this.$source);\n            this.removeAllListeners(this.$target);\n            this.removeAllListeners(this.$form);\n        },\n\n        onSourceTextChange: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.timeout = setTimeout($.proxy(this, 'updateTarget'), 250);\n        },\n\n        onTargetTextChange: function() {\n            if (this.$target.get(0) === document.activeElement) {\n                this.stopListening();\n            }\n        },\n\n        onFormSubmit: function() {\n            if (this.timeout) {\n                clearTimeout(this.timeout);\n            }\n\n            this.updateTarget();\n        },\n\n        updateTarget: function() {\n            if (!this.$target.is(':visible')) {\n                return;\n            }\n\n            var sourceVal = this.$source.val();\n\n            if (typeof sourceVal === 'undefined') {\n                // The source input may not exist anymore\n                return;\n            }\n\n            var targetVal = this.generateTargetValue(sourceVal);\n\n            this.$target.val(targetVal);\n            this.$target.trigger('change');\n\n            // If the target already has focus, select its whole value to mimic\n            // the behavior if the value had already been generated and they just tabbed in\n            if (this.$target.is(':focus')) {\n                Craft.selectFullValue(this.$target);\n            }\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return sourceVal;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend(\n    {\n        settings: null,\n        totalItems: null,\n        sorter: null,\n\n        $noItems: null,\n        $table: null,\n        $tbody: null,\n        $deleteBtns: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.AdminTable.defaults);\n\n            if (!this.settings.allowDeleteAll) {\n                this.settings.minItems = 1;\n            }\n\n            this.$noItems = $(this.settings.noItemsSelector);\n            this.$table = $(this.settings.tableSelector);\n            this.$tbody = this.$table.children('tbody');\n            this.totalItems = this.$tbody.children().length;\n\n            if (this.settings.sortable) {\n                this.sorter = new Craft.DataTableSorter(this.$table, {\n                    onSortChange: $.proxy(this, 'reorderItems')\n                });\n            }\n\n            this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n            this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n            this.updateUI();\n        },\n\n        addRow: function(row) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(row).appendTo(this.$tbody),\n                $deleteBtn = $row.find('.delete');\n\n            if (this.settings.sortable) {\n                this.sorter.addItems($row);\n            }\n\n            this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n            this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n            this.totalItems++;\n\n            this.updateUI();\n        },\n\n        reorderItems: function() {\n            if (!this.settings.sortable) {\n                return;\n            }\n\n            // Get the new field order\n            var ids = [];\n\n            for (var i = 0; i < this.sorter.$items.length; i++) {\n                var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n                ids.push(id);\n            }\n\n            // Send it to the server\n            var data = {\n                ids: JSON.stringify(ids)\n            };\n\n            Craft.postActionRequest(this.settings.reorderAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.onReorderItems(ids);\n                        Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                    }\n                    else {\n                        Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                    }\n                }\n            }, this));\n        },\n\n        handleDeleteBtnClick: function(event) {\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                // Sorry pal.\n                return;\n            }\n\n            var $row = $(event.target).closest('tr');\n\n            if (this.confirmDeleteItem($row)) {\n                this.deleteItem($row);\n            }\n        },\n\n        confirmDeleteItem: function($row) {\n            var name = this.getItemName($row);\n            return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name: name}));\n        },\n\n        deleteItem: function($row) {\n            var data = {\n                id: this.getItemId($row)\n            };\n\n            Craft.postActionRequest(this.settings.deleteAction, data, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.handleDeleteItemResponse(response, $row);\n                }\n            }, this));\n        },\n\n        handleDeleteItemResponse: function(response, $row) {\n            var id = this.getItemId($row),\n                name = this.getItemName($row);\n\n            if (response.success) {\n                if (this.sorter) {\n                    this.sorter.removeItems($row);\n                }\n\n                $row.remove();\n                this.totalItems--;\n                this.updateUI();\n                this.onDeleteItem(id);\n\n                Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name: name}));\n            }\n            else {\n                Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name: name}));\n            }\n        },\n\n        onReorderItems: function(ids) {\n            this.settings.onReorderItems(ids);\n        },\n\n        onDeleteItem: function(id) {\n            this.settings.onDeleteItem(id);\n        },\n\n        getItemId: function($row) {\n            return $row.attr(this.settings.idAttribute);\n        },\n\n        getItemName: function($row) {\n            return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n        },\n\n        updateUI: function() {\n            // Show the \"No Whatever Exists\" message if there aren't any\n            if (this.totalItems === 0) {\n                this.$table.hide();\n                this.$noItems.removeClass('hidden');\n            }\n            else {\n                this.$table.show();\n                this.$noItems.addClass('hidden');\n            }\n\n            // Disable the sort buttons if there's only one row\n            if (this.settings.sortable) {\n                var $moveButtons = this.$table.find('.move');\n\n                if (this.totalItems === 1) {\n                    $moveButtons.addClass('disabled');\n                }\n                else {\n                    $moveButtons.removeClass('disabled');\n                }\n            }\n\n            // Disable the delete buttons if we've reached the minimum items\n            if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n                this.$deleteBtns.addClass('disabled');\n            }\n            else {\n                this.$deleteBtns.removeClass('disabled');\n            }\n\n            // Hide the New Whatever button if we've reached the maximum items\n            if (this.settings.newItemBtnSelector) {\n                if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                    $(this.settings.newItemBtnSelector).addClass('hidden');\n                }\n                else {\n                    $(this.settings.newItemBtnSelector).removeClass('hidden');\n                }\n            }\n        }\n    },\n    {\n        defaults: {\n            tableSelector: null,\n            noItemsSelector: null,\n            newItemBtnSelector: null,\n            idAttribute: 'data-id',\n            nameAttribute: 'data-name',\n            sortable: false,\n            allowDeleteAll: true,\n            minItems: 0,\n            maxItems: null,\n            reorderAction: null,\n            deleteAction: null,\n            reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n            reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n            confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n            deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n            deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n            onReorderItems: $.noop,\n            onDeleteItem: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend(\n    {\n        reloadIndex: false,\n\n        updateForm: function(response, refreshInitialData) {\n            this.base(response, refreshInitialData);\n\n            if (this.$element.data('id')) {\n                var $imageEditorTrigger = this.$fieldsContainer.find('> .meta > .preview-thumb-container.editable');\n\n                if ($imageEditorTrigger.length) {\n                    this.addListener($imageEditorTrigger, 'click', 'showImageEditor');\n                }\n            }\n        },\n\n        showImageEditor: function()\n        {\n            new Craft.AssetImageEditor(this.$element.data('id'), {\n                onSave: function () {\n                    this.reloadIndex = true;\n                    this.reloadForm();\n                }.bind(this),\n                allowDegreeFractions: Craft.isImagick\n            });\n        },\n\n        onHideHud: function () {\n            if (this.reloadIndex && this.settings.elementIndex) {\n                this.settings.elementIndex.updateElements();\n            } else if (this.reloadIndex && this.settings.input) {\n                this.settings.input.refreshThumbnail(this.$element.data('id'));\n            }\n\n            this.base();\n        }\n    });\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend(\n    {\n        // jQuery objects\n        $body: null,\n        $footer: null,\n        $imageTools: null,\n        $buttons: null,\n        $cancelBtn: null,\n        $replaceBtn: null,\n        $saveBtn: null,\n        $editorContainer: null,\n        $straighten: null,\n        $croppingCanvas: null,\n        $spinnerCanvas: null,\n\n        // FabricJS objects\n        canvas: null,\n        image: null,\n        viewport: null,\n        focalPoint: null,\n        grid: null,\n        croppingCanvas: null,\n        clipper: null,\n        croppingRectangle: null,\n        cropperHandles: null,\n        cropperGrid: null,\n        croppingShade: null,\n        croppingAreaText: null,\n\n        // Image state attributes\n        imageStraightenAngle: 0,\n        viewportRotation: 0,\n        originalWidth: 0,\n        originalHeight: 0,\n        imageVerticeCoords: null,\n        zoomRatio: 1,\n\n        // Editor state attributes\n        animationInProgress: false,\n        currentView: '',\n        assetId: null,\n        cacheBust: null,\n        draggingCropper: false,\n        scalingCropper: false,\n        draggingFocal: false,\n        previousMouseX: 0,\n        previousMouseY: 0,\n        shiftKeyHeld: false,\n        editorHeight: 0,\n        editorWidth: 0,\n        cropperState: false,\n        scaleFactor: 1,\n        flipData: {},\n        focalPointState: false,\n        spinnerInterval: null,\n        maxImageSize: null,\n        lastLoadedDimensions: null,\n        imageIsLoading: false,\n        mouseMoveEvent: null,\n        croppingConstraint: false,\n        constraintOrientation: 'landscape',\n        showingCustomConstraint: false,\n\n        // Rendering proxy functions\n        renderImage: null,\n        renderCropper: null,\n\n        init: function(assetId, settings) {\n            this.cacheBust = Date.now();\n\n            this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n            this.assetId = assetId;\n            this.flipData = {x: 0, y: 0};\n\n            // Build the modal\n            this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n            this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n            this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n            this.base(this.$container, this.settings);\n\n            this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn cancel\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$buttons);\n            this.$replaceBtn = $('<div class=\"btn submit save replace\">' + Craft.t('app', 'Save') + '</div>').appendTo(this.$buttons);\n\n            if (this.settings.allowSavingAsNew) {\n                this.$saveBtn = $('<div class=\"btn submit save copy\">' + Craft.t('app', 'Save as a new asset') + '</div>').appendTo(this.$buttons);\n                this.addListener(this.$saveBtn, 'activate', this.saveImage);\n            }\n\n            this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n            this.addListener(this.$cancelBtn, 'activate', this.hide);\n            this.removeListener(this.$shade, 'click');\n\n            this.maxImageSize = this.getMaxImageSize();\n\n            Craft.postActionRequest('assets/image-editor', {assetId: assetId}, $.proxy(this, 'loadEditor'));\n        },\n\n        /**\n         * Get the max image size that is viewable in the editor currently\n         */\n        getMaxImageSize: function() {\n            var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n            var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n            return  Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n        },\n\n        /**\n         * Load the editor markup and start loading components and the image.\n         *\n         * @param data\n         */\n        loadEditor: function(data) {\n            if (!data.html) {\n                alert(Craft.t('app', 'Could not load the image editor.'));\n            }\n\n            this.$body.html(data.html);\n            this.$tabs = $('.tabs li', this.$body);\n            this.$viewsContainer = $('.views', this.$body);\n            this.$views = $('> div', this.$viewsContainer);\n            this.$imageTools = $('.image-container .image-tools', this.$body);\n            this.$editorContainer = $('.image-container .image', this.$body);\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this._showSpinner();\n\n            this.updateSizeAndPosition();\n\n            // Load the canvas on which we'll host our image and set up the proxy render function\n            this.canvas = new fabric.StaticCanvas('image-canvas');\n\n            // Set up the cropping canvas jquery element for tracking all the nice events\n            this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n            this.$croppingCanvas.width(this.editorWidth);\n            this.$croppingCanvas.height(this.editorHeight);\n\n            this.canvas.enableRetinaScaling = true;\n            this.renderImage = function() {\n                Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n            }.bind(this);\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            // Load image and set up the initial properties\n            fabric.Image.fromURL(imageUrl, $.proxy(function(imageObject) {\n                this.image = imageObject;\n                this.image.set({\n                    originX: 'center',\n                    originY: 'center',\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                });\n                this.canvas.add(this.image);\n\n                this.originalHeight = this.image.getHeight();\n                this.originalWidth = this.image.getWidth();\n                this.zoomRatio = 1;\n\n                this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n                // Set up the image bounding box, viewport and position everything\n                this._setFittedImageVerticeCoordinates();\n                this._repositionEditorElements();\n\n                // Set up the focal point\n                var focalState = {\n                    imageDimensions: this.getScaledImageDimensions(),\n                    offsetX: 0,\n                    offsetY: 0\n                };\n\n                var focal = false;\n                if (data.focalPoint) {\n                    // Transform the focal point coordinates from relative to absolute\n                    var focalData = data.focalPoint;\n\n                    // Resolve for the current image dimensions.\n                    var adjustedX = focalState.imageDimensions.width * focalData.x;\n                    var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                    focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                    focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                    focal = true;\n                }\n\n                this.storeFocalPointState(focalState);\n\n                if (focal) {\n                    this._createFocalPoint();\n                }\n\n                this._createViewport();\n                this.storeCropperState();\n\n                // Add listeners to buttons\n                this._addControlListeners();\n\n                // Add mouse event listeners\n                this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n                this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n                this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n                this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n                this._hideSpinner();\n\n                // Render it, finally\n                this.renderImage();\n\n                // Make sure verything gets fired for the first tab\n                this.$tabs.first().trigger('click');\n            }, this));\n        },\n\n        /**\n         * Reload the image to better fit the current available image editor viewport.\n         */\n        _reloadImage: function () {\n            if (this.imageIsLoading) {\n                return;\n            }\n\n            this.imageIsLoading = true;\n            this.maxImageSize = this.getMaxImageSize();\n\n            // Load the image from URL\n            var imageUrl = Craft.getActionUrl('assets/edit-image', {\n                assetId: this.assetId,\n                size: this.maxImageSize,\n                cacheBust: this.cacheBust\n            });\n\n            this.image.setSrc(imageUrl, function(imageObject) {\n                this.originalHeight = imageObject.getHeight();\n                this.originalWidth = imageObject.getWidth();\n                this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n                this.updateSizeAndPosition();\n                this.renderImage();\n                this.imageIsLoading = false;\n            }.bind(this));\n        },\n\n        /**\n         * Update the modal size and position on browser resize\n         */\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            // Fullscreen modal\n            var innerWidth = window.innerWidth;\n            var innerHeight = window.innerHeight;\n\n            this.$container.css({\n                'width': innerWidth,\n                'min-width': innerWidth,\n                'left': 0,\n\n                'height': innerHeight,\n                'min-height': innerHeight,\n                'top': 0\n            });\n\n            this.$body.css({\n                'height': innerHeight - 62\n            });\n\n            if (innerWidth < innerHeight) {\n                this.$container.addClass('vertical');\n            }\n            else {\n                this.$container.removeClass('vertical');\n            }\n\n            if (this.$spinnerCanvas) {\n                this.$spinnerCanvas.css({\n                    left: ((this.$spinnerCanvas.parent().width()/2)-(this.$spinnerCanvas.width()/2))+'px',\n                    top: ((this.$spinnerCanvas.parent().height()/2)-(this.$spinnerCanvas.height()/2))+'px'\n                });\n            }\n\n            // If image is already loaded, make sure it looks pretty.\n            if (this.$editorContainer && this.image) {\n                this._repositionEditorElements();\n            }\n        },\n\n        /**\n         * Reposition the editor elements to accurately reflect the editor state with current dimensions\n         */\n        _repositionEditorElements: function() {\n            // Remember what the dimensions were before the resize took place\n            var previousEditorDimensions = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            this.editorHeight = this.$editorContainer.innerHeight();\n            this.editorWidth = this.$editorContainer.innerWidth();\n\n            this.canvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            var currentScaledDimensions = this.getScaledImageDimensions();\n\n            // If we're cropping now, we have to reposition the cropper correctly in case\n            // the area for image changes, forcing the image size to change as well.\n            if (this.currentView === 'crop') {\n                this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n                var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n                this._setFittedImageVerticeCoordinates();\n                this._repositionCropper(previouslyOccupiedArea);\n            } else {\n                // Otherwise just recalculate the image zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            }\n\n            // Reposition the image relatively to the previous editor dimensions.\n            this._repositionImage(previousEditorDimensions);\n            this._repositionViewport();\n            this._repositionFocalPoint(previousEditorDimensions);\n            this._zoomImage();\n\n            this.renderImage();\n\n            if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n                this._reloadImage();\n            }\n        },\n\n        /**\n         * Reposition image based on how the editor dimensions have changed.\n         * This ensures keeping the image center offset, if there is any.\n         *\n         * @param previousEditorDimensions\n         */\n        _repositionImage: function(previousEditorDimensions) {\n            this.image.set({\n                left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n                top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n            });\n        },\n\n        /**\n         * Create the viewport for image editor.\n         */\n        _createViewport: function() {\n            this.viewport = new fabric.Rect({\n                width: this.image.width,\n                height: this.image.height,\n                fill: 'rgba(127,0,0,1)',\n                originX: 'center',\n                originY: 'center',\n                globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n                left: this.image.left,\n                top: this.image.top\n            });\n            this.canvas.add(this.viewport);\n            this.renderImage();\n        },\n\n        /**\n         * Create the focal point.\n         */\n        _createFocalPoint: function() {\n            var focalPointState = this.focalPointState;\n            var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n            var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            // Adjust by image margins\n            focalX += this.image.left;\n            focalY += this.image.top;\n\n            var deltaX = 0;\n            var deltaY = 0;\n\n            // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n            if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n                if (this.currentView !== 'crop') {\n                    deltaX = this.viewport.left - this.image.left;\n                    deltaY = this.viewport.top - this.image.top;\n                } else {\n                    // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                    deltaX = this.clipper.left - this.image.left;\n                    deltaY = this.clipper.top - this.image.top;\n                }\n\n                // Bump focal to middle of viewport\n                focalX += deltaX;\n                focalY += deltaY;\n\n                // Reflect changes in saved state\n                focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n                focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            }\n\n            this.focalPoint = new fabric.Group([\n                new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n                new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n            ], {\n                originX: 'center',\n                originY: 'center',\n                left: focalX,\n                top: focalY\n            });\n\n            this.storeFocalPointState(focalPointState);\n            this.canvas.add(this.focalPoint);\n        },\n\n        /**\n         * Toggle focal point\n         */\n        toggleFocalPoint: function() {\n            if (!this.focalPoint) {\n                this._createFocalPoint();\n            } else {\n                this.canvas.remove(this.focalPoint);\n                this.focalPoint = null;\n            }\n\n            this.renderImage();\n        },\n\n        /**\n         * Reposition the viewport to handle editor resizing.\n         */\n        _repositionViewport: function() {\n            if (this.viewport) {\n                var dimensions = {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2\n                };\n\n                // If we're cropping, nothing exciting happens for the viewport\n                if (this.currentView === 'crop') {\n                    dimensions.width = this.editorWidth;\n                    dimensions.height = this.editorHeight;\n                } else {\n                    // If this is the first initial reposition, no cropper state yet\n                    if (this.cropperState) {\n                        // Recall the state\n                        var state = this.cropperState;\n\n                        var scaledImageDimensions = this.getScaledImageDimensions();\n                        // Make sure we have the correct current image size\n                        var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                        // Set the viewport dimensions\n                        dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                        dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                        // Adjust the image position to show the correct part of the image in the viewport\n                        this.image.set({\n                            left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                            top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                        });\n                    } else {\n                        $.extend(dimensions, this.getScaledImageDimensions());\n                    }\n                }\n                this.viewport.set(dimensions);\n            }\n        },\n\n        _repositionFocalPoint: function(previousEditorDimensions) {\n            if (this.focalPoint) {\n                var offsetX = this.focalPoint.left - this.editorWidth / 2;\n                var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n                var currentWidth = this.image.width;\n                var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n                var ratio = newWidth / currentWidth / this.scaleFactor;\n\n                offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n                offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n                offsetX *= ratio;\n                offsetY *= ratio;\n\n                this.focalPoint.set({\n                    left: this.editorWidth / 2 + offsetX,\n                    top: this.editorHeight / 2 + offsetY\n                });\n            }\n        },\n\n        /**\n         * Return true if the image orientation has changed\n         */\n        hasOrientationChanged: function() {\n            return this.viewportRotation % 180 !== 0;\n        },\n\n        /**\n         * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n         */\n        getScaledImageDimensions: function() {\n            if (typeof this.getScaledImageDimensions._ === 'undefined') {\n                this.getScaledImageDimensions._ = {};\n            }\n\n            this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n            this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n            this.getScaledImageDimensions._.dimensions = {};\n            if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n                this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n                this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n            } else {\n                this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n                this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n            }\n\n            return this.getScaledImageDimensions._.dimensions;\n        },\n\n        /**\n         * Set the image dimensions to reflect the current zoom ratio.\n         */\n        _zoomImage: function() {\n            if (typeof this._zoomImage._ === 'undefined') {\n                this._zoomImage._ = {};\n            }\n\n            this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n            this.image.set({\n                width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n                height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n            });\n        },\n\n        /**\n         * Set up listeners for the controls.\n         */\n        _addControlListeners: function() {\n            // Tabs\n            this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n            // Focal point\n            this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n            // Rotate controls\n            this.addListener($('.rotate-left'), 'click', function() {\n                this.rotateImage(-90);\n            });\n            this.addListener($('.rotate-right'), 'click', function() {\n                this.rotateImage(90);\n            });\n            this.addListener($('.flip-vertical'), 'click', function() {\n                this.flipImage('y');\n            });\n            this.addListener($('.flip-horizontal'), 'click', function() {\n                this.flipImage('x');\n            });\n\n            // Straighten slider\n            this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n                onStart: function() {\n                    this._showGrid();\n                }.bind(this),\n                onChange: function(slider) {\n                    this.straighten(slider);\n                }.bind(this),\n                onEnd: function() {\n                    this._hideGrid();\n                    this._cleanupFocalPointAfterStraighten();\n                }.bind(this)\n            });\n\n            // Cropper scale modifier key\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = true;\n                }\n            });\n            this.addListener(Garnish.$doc, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.SHIFT_KEY) {\n                    this.shiftKeyHeld = false;\n                }\n            });\n\n            this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n            this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n            this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n        },\n\n        /**\n         * Handle a constraint button click.\n         *\n         * @param ev\n         */\n        _handleConstraintClick: function (ev) {\n            var constraint = $(ev.currentTarget).data('constraint');\n            var $target = $(ev.currentTarget);\n            $target.siblings().removeClass('active');\n            $target.addClass('active');\n\n            if (constraint == 'custom') {\n                this._showCustomConstraint();\n                this._applyCustomConstraint();\n                return;\n            }\n\n            this._hideCustomConstraint();\n\n            this.setCroppingConstraint(constraint);\n            this.enforceCroppingConstraint();\n        },\n\n        /**\n         * Handle an orientation switch click.\n         *\n         * @param ev\n         */\n        _handleOrientationClick: function (ev) {\n            if (ev.currentTarget.value === this.constraintOrientation) {\n                return;\n            }\n            this.constraintOrientation = ev.currentTarget.value;\n\n            var $constraints = $('.constraint.flip', this.$container);\n\n            for (var i = 0; i < $constraints.length; i++) {\n                var $constraint = $($constraints[i]);\n                $constraint.data('constraint', 1 / $constraint.data('constraint'));\n                $constraint.html($constraint.html().split(':').reverse().join(':'));\n            }\n\n            $constraints.filter('.active').click();\n        },\n\n        /**\n         * Apply the custom ratio set in the inputs\n         */\n        _applyCustomConstraint: function () {\n            var constraint = this._getCustomConstraint();\n\n            if (constraint.w > 0 && constraint.h > 0) {\n                this.setCroppingConstraint(constraint.w / constraint.h);\n                this.enforceCroppingConstraint();\n            }\n        },\n\n        /**\n         * Get the custom constraint.\n         *\n         * @returns {{w: *, h: *}}\n         */\n        _getCustomConstraint: function () {\n            var w = parseFloat($('.custom-constraint-w').val());\n            var h = parseFloat($('.custom-constraint-h').val());\n            return {\n                w: isNaN(w) ? 0 : w,\n                h: isNaN(h) ? 0 : h,\n            }\n        },\n\n        /**\n         * Set the custom constraint.\n         *\n         * @param w\n         * @param h\n         */\n        _setCustomConstraint: function (w, h) {\n            $('.custom-constraint-w').val(parseFloat(w));\n            $('.custom-constraint-h').val(parseFloat(h));\n        },\n\n        /**\n         * Hide the custom constraint inputs.\n         */\n        _hideCustomConstraint: function () {\n            this.showingCustomConstraint = false;\n            $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n            $('.orientation', this.$container).removeClass('hidden');\n        },\n\n        /**\n         * Show the custom constraint inputs.\n         */\n        _showCustomConstraint: function () {\n            if (this.showingCustomConstraint) {\n                return;\n            }\n\n            this.showingCustomConstraint = true;\n            $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n            $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n            $('.orientation', this.$container).addClass('hidden');\n        },\n\n        /**\n         * Handle tab click.\n         *\n         * @param ev\n         */\n        _handleTabClick: function(ev) {\n            if (!this.animationInProgress) {\n                var $tab = $(ev.currentTarget);\n                var view = $tab.data('view');\n                this.$tabs.removeClass('selected');\n                $tab.addClass('selected');\n                this.showView(view);\n            }\n        },\n\n        /**\n         * Show a view.\n         *\n         * @param view\n         */\n        showView: function(view) {\n            if (this.currentView === view) {\n                return;\n            }\n\n            this.$views.addClass('hidden');\n            var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n            $view.removeClass('hidden');\n\n            if (view === 'rotate') {\n                this.enableSlider();\n            } else {\n                this.disableSlider();\n            }\n\n\n            // Now that most likely our editor dimensions have changed, time to reposition stuff\n            this.updateSizeAndPosition();\n\n            // See if we have to enable or disable crop mode as we transition between tabs\n            if (this.currentView === 'crop' && view !== 'crop') {\n                this.disableCropMode();\n            } else if (this.currentView !== 'crop' && view === 'crop') {\n                this.enableCropMode();\n            }\n\n            // Mark the current view\n            this.currentView = view;\n        },\n\n        /**\n         * Store the current cropper state.\n         *\n         * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n         * as the basis for recalculating the cropper position and dimensions.\n         *\n         * @param [state]\n         */\n        storeCropperState: function(state) {\n            if (typeof this.storeCropperState._ === 'undefined') {\n                this.storeCropperState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.cropperState = state;\n            } else if (this.clipper) {\n                this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n                this.cropperState = {\n                    offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                    offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                    height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                    width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            } else {\n                this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n                this.cropperState = {\n                    offsetX: 0,\n                    offsetY: 0,\n                    height: this.storeCropperState._.dimensions.height,\n                    width: this.storeCropperState._.dimensions.width,\n                    imageDimensions: this.storeCropperState._.dimensions\n                };\n            }\n        },\n\n        /**\n         * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n         */\n        storeFocalPointState: function(state) {\n            if (typeof this.storeFocalPointState._ === 'undefined') {\n                this.storeFocalPointState._ = {};\n            }\n\n            // If we're asked to store a specific state.\n            if (state) {\n                this.focalPointState = state;\n            } else if (this.focalPoint) {\n                this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n                this.focalPointState = {\n                    offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                    imageDimensions: this.getScaledImageDimensions()\n                };\n            }\n        },\n\n        /**\n         * Rotate the image along with the viewport.\n         *\n         * @param degrees\n         */\n        rotateImage: function(degrees) {\n            if (!this.animationInProgress) {\n                // We're not that kind of an establishment, sir.\n                if (degrees !== 90 && degrees !== -90) {\n                    return false;\n                }\n\n                this.animationInProgress = true;\n                this.viewportRotation += degrees;\n\n                // Normalize the viewport rotation angle so it's between 0 and 359\n                this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n                var newAngle = this.image.angle + degrees;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var imageZoomRatio;\n\n                if (this.hasOrientationChanged()) {\n                    imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n                } else {\n                    imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n                }\n\n                // In cases when for some reason we've already zoomed in on the image,\n                // use existing zoom.\n                if (this.zoomRatio > imageZoomRatio) {\n                    imageZoomRatio = this.zoomRatio;\n                }\n\n                var viewportProperties = {\n                    angle: degrees === 90 ? '+=90' : '-=90'\n                };\n\n                var imageProperties = {\n                    angle: newAngle,\n                    width: scaledImageDimensions.width * imageZoomRatio,\n                    height: scaledImageDimensions.height * imageZoomRatio\n                };\n\n                var scaleFactor = 1;\n                if (this.scaleFactor < 1) {\n                    scaleFactor = 1 / this.scaleFactor;\n                    this.scaleFactor = 1;\n                } else {\n                    if (this.viewport.width > this.editorHeight) {\n                        scaleFactor = this.editorHeight / this.viewport.width;\n                    } else if (this.viewport.height > this.editorWidth) {\n                        scaleFactor = this.editorWidth / this.viewport.height;\n                    }\n                    this.scaleFactor = scaleFactor;\n                }\n\n                if (scaleFactor < 1) {\n                    imageProperties.width *= scaleFactor;\n                    imageProperties.height *= scaleFactor;\n                }\n\n                var state = this.cropperState;\n\n                // Make sure we reposition the image as well to focus on the same image area\n                var deltaX = state.offsetX;\n                var deltaY = state.offsetY;\n                var angleInRadians = degrees * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n                var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n                var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n                imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n                imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n                state.offsetX = newDeltaX;\n                state.offsetY = newDeltaY;\n\n                var temp = state.width;\n                state.width = state.height;\n                state.height = temp;\n\n                this.storeCropperState(state);\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                }\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        // If we're zooming the image in or out, better do the same to viewport\n                        var temp = this.viewport.height * scaleFactor;\n                        this.viewport.height = this.viewport.width * scaleFactor;\n                        this.viewport.width = temp;\n                        this.viewport.set({angle: 0});\n                    }.bind(this)\n                });\n\n                // Animate the rotation and dimension change\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                        this.image.set({angle: cleanAngle});\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            this._adjustFocalPointByAngle(degrees);\n                            this.straighten(this.straighteningInput);\n                            this.canvas.add(this.focalPoint);\n                        } else {\n                            this._resetFocalPointPosition();\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Flip an image along an axis.\n         *\n         * @param axis\n         */\n        flipImage: function(axis) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                if (this.hasOrientationChanged()) {\n                    axis = axis === 'y' ? 'x' : 'y';\n                }\n\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                } else {\n                    this._resetFocalPointPosition();\n                }\n\n                var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n                this.straighteningInput.setValue(-this.imageStraightenAngle);\n                this.imageStraightenAngle = -this.imageStraightenAngle;\n                var properties = {\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                };\n\n                var deltaY, deltaX;\n                var cropperState = this.cropperState;\n                var focalPointState = this.focalPointState;\n\n                // Reposition the image, viewport, and stored cropper and focal point states.\n                if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                    cropperState.offsetX = -cropperState.offsetX;\n                    focalPointState.offsetX = -focalPointState.offsetX;\n                    deltaX = this.image.left - editorCenter.x;\n                    properties.left = editorCenter.x - deltaX;\n                } else {\n                    cropperState.offsetY = -cropperState.offsetY;\n                    focalPointState.offsetY = -focalPointState.offsetY;\n                    deltaY = this.image.top - editorCenter.y;\n                    properties.top = editorCenter.y - deltaY;\n                }\n\n                if (axis === 'y') {\n                    properties.scaleY = this.image.scaleY * -1;\n                    this.flipData.y = 1 - this.flipData.y;\n                } else {\n                    properties.scaleX = this.image.scaleX * -1;\n                    this.flipData.x = 1 - this.flipData.x;\n                }\n\n                this.storeCropperState(cropperState);\n                this.storeFocalPointState(focalPointState);\n\n                this.image.animate(properties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        this.animationInProgress = false;\n                        if (this.focalPoint) {\n                            // Well this is handy\n                            this._adjustFocalPointByAngle(0);\n                            this.canvas.add(this.focalPoint);\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        /**\n         * Perform the straightening with input slider.\n         *\n         * @param {Craft.SlideRuleInput} slider\n         */\n        straighten: function(slider) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                var previousAngle = this.image.angle;\n\n                this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n                // Straighten the image\n                this.image.set({\n                    angle: this.viewportRotation + this.imageStraightenAngle\n                });\n\n                // Set the new zoom ratio\n                this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n                this._zoomImage();\n\n                if (this.cropperState) {\n                    this._adjustEditorElementsOnStraighten(previousAngle);\n                }\n\n                this.renderImage();\n\n                this.animationInProgress = false;\n            }\n        },\n\n        /**\n         * Adjust the cropped viewport when straightening the image to correct for\n         * bumping into edges, keeping focus on the cropped area center and to\n         * maintain the illusion that the image is being straightened relative to the viewport center.\n         *\n         * @param {integer} previousAngle integer the previous image angle before straightening\n         */\n        _adjustEditorElementsOnStraighten: function(previousAngle) {\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var angleDelta = this.image.angle - previousAngle;\n            var state = this.cropperState;\n\n            var currentZoomRatio = this.zoomRatio;\n            var adjustmentRatio = 1;\n\n            var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n            do {\n                // Get the cropper center coordinates\n                var cropperCenterX = state.offsetX;\n                var cropperCenterY = state.offsetY;\n                var angleInRadians = angleDelta * (Math.PI / 180);\n\n                // Calculate how the cropper would need to move in a circle to maintain\n                // the focus on the same region if the image was rotated with zoom intact.\n                newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n                newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n                sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Figure out the final image offset to keep the viewport focused where we need it\n                deltaX = newCenterX * currentZoomRatio * sizeFactor;\n                deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n                // If the image would creep in the viewport, figure out how to math around it.\n                var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n                var rectangle = {\n                    width: this.viewport.width,\n                    height: this.viewport.height,\n                    left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                    top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n                };\n                adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n                currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n                // If we had to make adjustments, do the calculations again\n            } while (adjustmentRatio !== 1);\n\n            // Reposition the image correctly\n            this.image.set({\n                left: this.editorWidth / 2 - deltaX,\n                top: this.editorHeight / 2 - deltaY\n            });\n\n            // Finally, store the new cropper state to reflect the rotation change.\n            state.offsetX = newCenterX;\n            state.offsetY = newCenterY;\n            state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n            state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n            this.storeCropperState(state);\n\n            // Zoom the image in and we're done.\n            this.zoomRatio = currentZoomRatio;\n\n            if (this.focalPoint) {\n                this._adjustFocalPointByAngle(angleDelta);\n\n                if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                    this.focalPoint.set({opacity: 0});\n                } else {\n                    this.focalPoint.set({opacity: 1});\n                }\n            } else if (angleDelta !== 0) {\n                this._resetFocalPointPosition();\n            }\n\n            this._zoomImage();\n        },\n\n        /**\n         * If focal point is active and outside of viewport after straightening, reset it.\n         */\n        _cleanupFocalPointAfterStraighten: function() {\n            if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 1});\n                var state = this.focalPointState;\n                state.offsetX = 0;\n                state.offsetY = 0;\n                this.storeFocalPointState(state);\n                this.toggleFocalPoint();\n            }\n        },\n\n        /**\n         * Reset focal point to the middle of image.\n         */\n        _resetFocalPointPosition: function () {\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n         *\n         * @param object\n         * @param containingObject\n         *\n         * @returns {boolean}\n         */\n        _isCenterInside: function(object, containingObject) {\n            return (object.left > containingObject.left - containingObject.width / 2\n                && object.top > containingObject.top - containingObject.height / 2\n                && object.left < containingObject.left + containingObject.width / 2\n                && object.top < containingObject.top + containingObject.height / 2\n            );\n        },\n\n        /**\n         * Adjust the focal point by an angle in degrees.\n         * @param angle\n         */\n        _adjustFocalPointByAngle: function(angle) {\n            var angleInRadians = angle * (Math.PI / 180);\n            var state = this.focalPointState;\n\n            var focalX = state.offsetX;\n            var focalY = state.offsetY;\n\n            // Calculate how the focal point would need to move in a circle to keep on the same spot\n            // on the image if it was rotated with zoom intact.\n            var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n            var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n            var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n            var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n            var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n            this.focalPoint.left = this.image.left + adjustedFocalX;\n            this.focalPoint.top = this.image.top + adjustedFocalY;\n\n            state.offsetX = newFocalX;\n            state.offsetY = newFocalY;\n            this.storeFocalPointState(state);\n        },\n\n        /**\n         * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n         * If the rectangle fits, 1 will be returned.\n         *\n         * @param rectangle\n         * @param containingVertices\n         */\n        _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n            var rectangleVertices = this._getRectangleVertices(rectangle);\n            var vertex;\n\n            // Check if any of the viewport vertices end up out of bounds\n            for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n                vertex = rectangleVertices[verticeIndex];\n\n                if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                    break;\n                }\n\n                vertex = false;\n            }\n\n            // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n            var adjustmentRatio;\n\n            if (!vertex) {\n                adjustmentRatio = 1;\n            } else {\n                // Find out which edge got crossed by the vertex\n                var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n                var rectangleCenter = {\n                    x: rectangle.left + rectangle.width / 2,\n                    y: rectangle.top + rectangle.height / 2\n                };\n\n                // Calculate how much further that edge needs to be.\n                // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n                var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n                var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n                // Adjust the zoom ratio\n                adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n            }\n\n            return adjustmentRatio;\n        },\n\n        /**\n         * Save the image.\n         *\n         * @param ev\n         */\n        saveImage: function(ev) {\n            var $button = $(ev.currentTarget);\n            if ($button.hasClass('disabled')) {\n                return false;\n            }\n\n            $('.btn', this.$buttons).addClass('disabled');\n            this.$buttons.append('<div class=\"spinner\"></div>');\n\n            var postData = {\n                assetId: this.assetId,\n                viewportRotation: this.viewportRotation,\n                imageRotation: this.imageStraightenAngle,\n                replace: $button.hasClass('replace') ? 1 : 0\n            };\n\n            if (this.cropperState) {\n                var cropData = {};\n\n                cropData.height = this.cropperState.height;\n                cropData.width = this.cropperState.width;\n                cropData.offsetX = this.cropperState.offsetX;\n                cropData.offsetY = this.cropperState.offsetY;\n\n                postData.imageDimensions = this.cropperState.imageDimensions;\n\n                postData.cropData = cropData;\n            } else {\n                postData.imageDimensions = this.getScaledImageDimensions();\n            }\n\n            if (this.focalPoint) {\n                postData.focalPoint = this.focalPointState;\n            }\n\n            postData.flipData = this.flipData;\n            postData.zoom = this.zoomRatio;\n\n            Craft.postActionRequest('assets/save-image', postData, function(data) {\n                this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n\n                this.onSave();\n                this.hide();\n                Craft.cp.runQueue();\n            }.bind(this));\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToCoverRatio: function(dimensions) {\n            // Convert the angle to radians\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            // Calculate the dimensions of the scaled image using the magic of math\n            var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n            var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n            // Calculate the ratio\n            return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n        },\n\n        /**\n         * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n         *\n         * @param dimensions\n         */\n        getZoomToFitRatio: function(dimensions) {\n            // Get the bounding box for a rotated image\n            var boundingBox = this._getImageBoundingBox(dimensions);\n\n            // Scale the bounding box to fit\n            var scale = 1;\n            if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n                var vertScale = this.editorHeight / boundingBox.height;\n                var horiScale = this.editorWidth / boundingBox.width;\n                scale = Math.min(horiScale, vertScale);\n            }\n\n            return scale;\n        },\n\n        /**\n         * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n         */\n        getCombinedZoomRatio: function(dimensions) {\n            return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n        },\n\n        /**\n         * Draw the grid.\n         *\n         * @private\n         */\n        _showGrid: function() {\n            if (!this.grid) {\n                var strokeOptions = {\n                    strokeWidth: 1,\n                    stroke: 'rgba(255,255,255,0.5)'\n                };\n\n                var lineCount = 8;\n                var gridWidth = this.viewport.width;\n                var gridHeight = this.viewport.height;\n                var xStep = gridWidth / (lineCount + 1);\n                var yStep = gridHeight / (lineCount + 1);\n\n                var grid = [\n                    new fabric.Rect({\n                        strokeWidth: 2,\n                        stroke: 'rgba(255,255,255,1)',\n                        originX: 'center',\n                        originY: 'center',\n                        width: gridWidth,\n                        height: gridHeight,\n                        left: gridWidth / 2,\n                        top: gridHeight / 2,\n                        fill: 'rgba(255,255,255,0)'\n                    })\n                ];\n\n                var i;\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n                }\n                for (i = 1; i <= lineCount; i++) {\n                    grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n                }\n\n                this.grid = new fabric.Group(grid, {\n                    left: this.editorWidth / 2,\n                    top: this.editorHeight / 2,\n                    originX: 'center',\n                    originY: 'center',\n                    angle: this.viewport.angle\n                });\n\n                this.canvas.add(this.grid);\n                this.renderImage();\n            }\n        },\n\n        /**\n         * Hide the grid\n         */\n        _hideGrid: function() {\n            this.canvas.remove(this.grid);\n            this.grid = null;\n            this.renderImage();\n        },\n\n        /**\n         * Remove all the events when hiding the editor.\n         */\n        onFadeOut: function() {\n            this.destroy();\n        },\n\n        /**\n         * Make sure underlying content is not scrolled by accident.\n         */\n        show: function() {\n            this.base();\n\n            $('html').addClass('noscroll');\n        },\n\n        /**\n         * Allow the content to scroll.\n         */\n        hide: function() {\n            this.removeAllListeners();\n            this.straighteningInput.removeAllListeners();\n            $('html').removeClass('noscroll');\n            this.base();\n        },\n\n        /**\n         * onSave callback.\n         */\n        onSave: function() {\n            this.settings.onSave();\n            this.trigger('save');\n        },\n\n        /**\n         * Enable the rotation slider.\n         */\n        enableSlider: function() {\n            this.$imageTools.removeClass('hidden');\n        },\n\n        /**\n         * Disable the rotation slider.\n         */\n        disableSlider: function() {\n            this.$imageTools.addClass('hidden');\n        },\n\n        /**\n         * Switch to crop mode.\n         */\n        enableCropMode: function() {\n            var imageDimensions = this.getScaledImageDimensions();\n            this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n            var viewportProperties = {\n                width: this.editorWidth,\n                height: this.editorHeight\n            };\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var callback = function() {\n                this._setFittedImageVerticeCoordinates();\n\n                // Restore cropper\n                var state = this.cropperState;\n                var scaledImageDimensions = this.getScaledImageDimensions();\n                var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                // Restore based on the stored information\n                var cropperData = {\n                    left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                    top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                    width: state.width * sizeFactor * this.zoomRatio,\n                    height: state.height * sizeFactor * this.zoomRatio\n                };\n\n                this._showCropper(cropperData);\n\n                if (this.focalPoint) {\n                    sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Switch out of crop mode.\n         */\n        disableCropMode: function() {\n            var viewportProperties = {};\n\n            this._hideCropper();\n            var imageDimensions = this.getScaledImageDimensions();\n            var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n            var inverseZoomFactor = targetZoom / this.zoomRatio;\n            this.zoomRatio = targetZoom;\n\n            var imageProperties = {\n                width: imageDimensions.width * this.zoomRatio,\n                height: imageDimensions.height * this.zoomRatio,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            var offsetX = this.clipper.left - this.image.left;\n            var offsetY = this.clipper.top - this.image.top;\n\n            var imageOffsetX = offsetX * inverseZoomFactor;\n            var imageOffsetY = offsetY * inverseZoomFactor;\n            imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n            imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n            // Calculate the cropper dimensions after all the zooming\n            viewportProperties.height = this.clipper.height * inverseZoomFactor;\n            viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n            if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n                if (this.focalPoint) {\n                    this.toggleFocalPoint();\n                }\n\n                this._resetFocalPointPosition();\n            }\n\n            var callback = function() {\n                // Reposition focal point correctly\n                if (this.focalPoint) {\n                    var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                    this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                    this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                    this.canvas.add(this.focalPoint);\n                }\n            }.bind(this);\n\n            this._editorModeTransition(callback, imageProperties, viewportProperties);\n        },\n\n        /**\n         * Transition between cropping end editor modes\n         *\n         * @param callback\n         * @param imageProperties\n         * @param viewportProperties\n         * @private\n         */\n        _editorModeTransition: function (callback, imageProperties, viewportProperties) {\n            if (!this.animationInProgress) {\n                this.animationInProgress = true;\n\n                // Without this it looks semi-broken during animation\n                if (this.focalPoint) {\n                    this.canvas.remove(this.focalPoint);\n                    this.renderImage();\n                }\n\n                this.image.animate(imageProperties, {\n                    onChange: this.canvas.renderAll.bind(this.canvas),\n                    duration: this.settings.animationDuration,\n                    onComplete: function() {\n                        callback();\n                        this.animationInProgress = false;\n                        this.renderImage();\n                    }.bind(this)\n                });\n\n                this.viewport.animate(viewportProperties, {\n                    duration: this.settings.animationDuration\n                });\n            }\n        },\n\n        _showSpinner: function() {\n            this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n            var canvas = document.getElementById('spinner-canvas');\n            var context = canvas.getContext('2d');\n            var start = new Date();\n            var lines = 16,\n                cW = context.canvas.width,\n                cH = context.canvas.height;\n\n            var draw = function() {\n                var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n                context.save();\n                context.clearRect(0, 0, cW, cH);\n                context.translate(cW / 2, cH / 2);\n                context.rotate(Math.PI * 2 * rotation);\n                for (var i = 0; i < lines; i++) {\n                    context.beginPath();\n                    context.rotate(Math.PI * 2 / lines);\n                    context.moveTo(cW / 10, 0);\n                    context.lineTo(cW / 4, 0);\n                    context.lineWidth = cW / 30;\n                    context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                    context.stroke();\n                }\n                context.restore();\n            };\n            this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n        },\n\n        _hideSpinner: function () {\n            window.clearInterval(this.spinnerInterval);\n            this.$spinnerCanvas.remove();\n            this.$spinnerCanvas = null;\n        },\n\n        /**\n         * Show the cropper.\n         *\n         * @param clipperData\n         */\n        _showCropper: function(clipperData) {\n            this._setupCropperLayer(clipperData);\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Hide the cropper.\n         */\n        _hideCropper: function() {\n            if (this.clipper) {\n                this.croppingCanvas.remove(this.clipper);\n                this.croppingCanvas.remove(this.croppingShade);\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n\n                this.croppingCanvas = null;\n                this.renderCropper = null;\n            }\n        },\n\n        /**\n         * Draw the cropper.\n         *\n         * @param clipperData\n         */\n        _setupCropperLayer: function(clipperData) {\n            // Set up the canvas for cropper\n            this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n                backgroundColor: 'rgba(0,0,0,0)',\n                hoverCursor: 'default',\n                selection: false\n            });\n\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            this.renderCropper = function() {\n                Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n            }.bind(this);\n\n\n            $('#cropping-canvas', this.$editorContainer).css({\n                position: 'absolute',\n                top: 0,\n                left: 0\n            });\n\n            this.croppingShade = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: this.editorWidth,\n                height: this.editorHeight,\n                fill: 'rgba(0,0,0,0.7)'\n            });\n\n            // Calculate the cropping rectangle size\n            var imageDimensions = this.getScaledImageDimensions();\n            var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n            var rectWidth = imageDimensions.width / rectangleRatio;\n            var rectHeight = imageDimensions.height / rectangleRatio;\n\n            if (this.hasOrientationChanged()) {\n                var temp = rectHeight;\n                rectHeight = rectWidth;\n                rectWidth = temp;\n            }\n\n            // Set up the cropping viewport rectangle\n            this.clipper = new fabric.Rect({\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                width: rectWidth,\n                height: rectHeight,\n                stroke: 'black',\n                fill: 'rgba(128,0,0,1)',\n                strokeWidth: 0\n            });\n\n            // Set from clipper data\n            if (clipperData) {\n                this.clipper.set(clipperData);\n            }\n\n            this.clipper.globalCompositeOperation = 'destination-out';\n            this.croppingCanvas.add(this.croppingShade);\n            this.croppingCanvas.add(this.clipper);\n        },\n\n        /**\n         * Redraw the cropper boundaries\n         */\n        _redrawCropperElements: function() {\n            if (typeof this._redrawCropperElements._ === 'undefined') {\n                this._redrawCropperElements._ = {};\n            }\n\n            if (this.cropperHandles) {\n                this.croppingCanvas.remove(this.cropperHandles);\n                this.croppingCanvas.remove(this.cropperGrid);\n                this.croppingCanvas.remove(this.croppingRectangle);\n                this.croppingCanvas.remove(this.croppingAreaText);\n            }\n            this._redrawCropperElements._.lineOptions = {\n                strokeWidth: 4,\n                stroke: 'rgb(255,255,255)',\n                fill: false\n            };\n\n            this._redrawCropperElements._.gridOptions = {\n                strokeWidth: 2,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            // Draw the handles\n            this._redrawCropperElements._.pathGroup = [\n                new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n                new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n            ];\n\n            this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            // Don't forget the rectangle\n            this.croppingRectangle = new fabric.Rect({\n                left: this.clipper.left,\n                top: this.clipper.top,\n                width: this.clipper.width,\n                height: this.clipper.height,\n                fill: 'rgba(0,0,0,0)',\n                stroke: 'rgba(255,255,255,0.8)',\n                strokeWidth: 2,\n                originX: 'center',\n                originY: 'center'\n            });\n\n            this.cropperGrid = new fabric.Group(\n                [\n                    new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                    new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n                ], {\n                    left: this.clipper.left,\n                    top: this.clipper.top,\n                    originX: 'center',\n                    originY: 'center'\n                }\n            );\n\n            this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n            if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n                this._redrawCropperElements._.cropTextTop -= 24;\n                this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n            }\n\n            this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n                left: this.croppingRectangle.left,\n                top: this._redrawCropperElements._.cropTextTop,\n                fontSize: 13,\n                fill: 'rgb(200,200,200)',\n                backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n                font: 'Craft',\n                width: 70,\n                height: 15,\n                originX: 'center',\n                originY: 'center',\n                textAlign: 'center'\n            });\n\n            this.croppingCanvas.add(this.cropperHandles);\n            this.croppingCanvas.add(this.cropperGrid);\n            this.croppingCanvas.add(this.croppingRectangle);\n            this.croppingCanvas.add(this.croppingAreaText);\n        },\n\n        /**\n         * Reposition the cropper when the image editor dimensions change.\n         *\n         * @param previousImageArea\n         */\n        _repositionCropper: function(previousImageArea) {\n            if (!this.croppingCanvas) {\n                return;\n            }\n\n            // Get the current clipper offset relative to center\n            var currentOffset = {\n                x: this.clipper.left - this.croppingCanvas.width / 2,\n                y: this.clipper.top - this.croppingCanvas.height / 2\n            };\n\n            // Resize the cropping canvas\n            this.croppingCanvas.setDimensions({\n                width: this.editorWidth,\n                height: this.editorHeight\n            });\n\n            // Check by what factor will the new final bounding box be different\n            var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            var areaFactor = currentArea.width / previousImageArea.width;\n\n            // Adjust the cropper size to scale along with the bounding box\n            this.clipper.width = Math.round(this.clipper.width * areaFactor);\n            this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n            // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n            // for editor size changes and then multiply by the size factor to adjust for image size changes\n            this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n            this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n            // Resize the cropping shade\n            this.croppingShade.set({\n                width: this.editorWidth,\n                height: this.editorHeight,\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n\n            this._redrawCropperElements();\n            this.renderCropper();\n        },\n\n        /**\n         * Get the dimensions of a bounding rectangle by a set of four coordinates.\n         *\n         * @param coordinateSet\n         */\n        _getBoundingRectangle: function(coordinateSet) {\n            return {\n                width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n                height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n            };\n        },\n\n        /**\n         * Handle the mouse being clicked.\n         *\n         * @param ev\n         */\n        _handleMouseDown: function(ev) {\n            // Focal before resize before dragging\n            var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n            var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n            var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n            if (handle || move || focal) {\n                this.previousMouseX = ev.pageX;\n                this.previousMouseY = ev.pageY;\n\n                if (focal) {\n                    this.draggingFocal = true;\n                } else if (handle) {\n                    this.scalingCropper = handle;\n                } else if (move) {\n                    this.draggingCropper = true;\n                }\n            }\n        },\n\n        /**\n         * Handle the mouse being moved.\n         *\n         * @param ev\n         */\n        _handleMouseMove: function(ev) {\n            if (this.mouseMoveEvent !== null) {\n                Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n            }\n            this.mouseMoveEvent = ev;\n        },\n\n        _handleMouseMoveInternal: function() {\n            if (this.mouseMoveEvent === null) {\n                return;\n            }\n\n            if (this.focalPoint && this.draggingFocal) {\n                this._handleFocalDrag(this.mouseMoveEvent);\n                this.storeFocalPointState();\n                this.renderImage();\n            } else if (this.draggingCropper || this.scalingCropper) {\n                if (this.draggingCropper) {\n                    this._handleCropperDrag(this.mouseMoveEvent);\n                } else {\n                    this._handleCropperResize(this.mouseMoveEvent);\n                }\n\n                this._redrawCropperElements();\n\n                this.storeCropperState();\n                this.renderCropper();\n            } else {\n                this._setMouseCursor(this.mouseMoveEvent);\n            }\n\n            this.previousMouseX = this.mouseMoveEvent.pageX;\n            this.previousMouseY = this.mouseMoveEvent.pageY;\n\n            this.mouseMoveEvent = null;\n        },\n\n        /**\n         * Handle mouse being released.\n         *\n         * @param ev\n         */\n        _handleMouseUp: function(ev) {\n            this.draggingCropper = false;\n            this.scalingCropper = false;\n            this.draggingFocal = false;\n        },\n\n        /**\n         * Handle mouse out\n         *\n         * @param ev\n         */\n        _handleMouseOut: function(ev) {\n            this._handleMouseUp(ev);\n            this.mouseMoveEvent = ev;\n            this._handleMouseMoveInternal();\n        },\n\n        /**\n         * Handle cropper being dragged.\n         *\n         * @param ev\n         */\n        _handleCropperDrag: function(ev) {\n            if (typeof this._handleCropperDrag._ === 'undefined') {\n                this._handleCropperDrag._ = {};\n            }\n\n            this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n                return false;\n            }\n\n            this._handleCropperDrag._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n            // If this would drag it outside of the image\n            if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                // Try to find the furthest point in the same general direction where we can drag it\n\n                // Delta iterator setup\n                this._handleCropperDrag._.dxi = 0;\n                this._handleCropperDrag._.dyi = 0;\n                this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n                this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n                // The furthest we can move\n                this._handleCropperDrag._.furthest = 0;\n                this._handleCropperDrag._.furthestDeltas = {};\n\n                // Loop through every combination of dragging it not so far\n                for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                    for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                        if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                            if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                                this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                                this._handleCropperDrag._.furthestDeltas = {\n                                    x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                    y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // REALLY can't drag along the cursor movement\n                if (this._handleCropperDrag._.furthest == 0) {\n                    return;\n                } else {\n                    this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                    this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n                }\n            }\n\n            this.clipper.set({\n                left: this.clipper.left + this._handleCropperDrag._.deltaX,\n                top: this.clipper.top + this._handleCropperDrag._.deltaY\n            });\n        },\n\n        /**\n         * Handle focal point being dragged.\n         *\n         * @param ev\n         */\n        _handleFocalDrag: function(ev) {\n            if (typeof this._handleFocalDrag._ === 'undefined') {\n                this._handleFocalDrag._ = {};\n            }\n\n            if (this.focalPoint) {\n                this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n                this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n                if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                    return;\n                }\n\n                this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n                this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n                // Just make sure that the focal point stays inside the image\n                if (this.currentView === 'crop') {\n                    if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                        return;\n                    }\n                } else {\n                    if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                        && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                        return;\n                    }\n                }\n\n                this.focalPoint.set({\n                    left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                    top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n                });\n            }\n        },\n\n        /**\n         * Set the cropping constraint\n         * @param constraint\n         */\n        setCroppingConstraint: function(constraint) {\n            // In case this caused the sidebar width to change.\n            this.updateSizeAndPosition();\n\n            switch (constraint) {\n                case 'none':\n                    this.croppingConstraint = false;\n                    break;\n\n                case 'original':\n                    this.croppingConstraint = this.originalWidth / this.originalHeight;\n                    break;\n\n                case 'current':\n                    this.croppingConstraint = this.clipper.width / this.clipper.height;\n                    break;\n\n                case 'custom':\n\n                    break;\n                default:\n                    this.croppingConstraint = parseFloat(constraint);\n\n                    break;\n            }\n        },\n\n        /**\n         * Enforce the cropping constraint\n         */\n        enforceCroppingConstraint: function () {\n            if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n                this.enforceCroppingConstraint._ = {};\n            }\n\n            if (this.animationInProgress || !this.croppingConstraint) {\n                return;\n            }\n\n            this.animationInProgress = true;\n\n            // Mock the clipping rectangle for collision tests\n            this.enforceCroppingConstraint._.rectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            };\n\n            // If wider than it should be\n            if (this.clipper.width > this.clipper.height * this.croppingConstraint)\n            {\n                this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n                // Make it taller!\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n                // Getting really awkward having to convert between 0;0 being center or top-left corner.\n                this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n                // If the clipper would end up out of bounds, make it narrower instead.\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n                }\n            } else {\n                // Follow the same pattern, if taller than it should be.\n                this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n                if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                    this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                    this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n                }\n            }\n\n            this.enforceCroppingConstraint._.properties = {\n                height: this.enforceCroppingConstraint._.rectangle.height,\n                width: this.enforceCroppingConstraint._.rectangle.width\n            };\n\n            // Make sure to redraw cropper handles and gridlines when resizing\n            this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n                onChange: function() {\n                    this._redrawCropperElements();\n                    this.croppingCanvas.renderAll();\n                }.bind(this),\n                duration: this.settings.animationDuration,\n                onComplete: function() {\n                    this._redrawCropperElements();\n                    this.animationInProgress = false;\n                    this.renderCropper();\n                    this.storeCropperState();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Handle cropper being resized.\n         *\n         * @param ev\n         */\n        _handleCropperResize: function(ev) {\n            if (typeof this._handleCropperResize._ === 'undefined') {\n                this._handleCropperResize._ = {};\n            }\n\n            // Size deltas\n            this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n                this._handleCropperResize._.deltaX = 0;\n            }\n\n            if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n                this._handleCropperResize._.deltaY = 0;\n            }\n\n            if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n                return;\n            }\n\n            // Translate from center-center origin to absolute coords\n            this._handleCropperResize._.startingRectangle = {\n                left: this.clipper.left - this.clipper.width / 2,\n                top: this.clipper.top - this.clipper.height / 2,\n                width: this.clipper.width,\n                height: this.clipper.height\n            }\n\n            this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n            if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n                return;\n            }\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n                return;\n            }\n\n            // Translate back to center-center origin.\n            this.clipper.set({\n                top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n                left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n                width: this._handleCropperResize._.rectangle.width,\n                height: this._handleCropperResize._.rectangle.height\n            });\n\n            this._redrawCropperElements();\n        },\n\n        _calculateNewCropperSizeByDeltas: function (startingRectangle, deltaX, deltaY, cropperDirection) {\n            if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n                this._calculateNewCropperSizeByDeltas._ = {};\n            }\n\n            // Center deltas\n            this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n            this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n            this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n            this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n            this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n            // Lock the aspect ratio if needed\n            if (this.croppingConstraint) {\n                this._calculateNewCropperSizeByDeltas._.change = 0;\n\n                // Take into account the mouse direction and figure out the \"real\" change in cropper size\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'br':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n\n                if (this.croppingConstraint > 1) {\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n                }\n\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n                // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n                switch (cropperDirection) {\n                    case 't':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'b':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                        break;\n                    case 'r':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        break;\n                    case 'l':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'tr':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        break;\n                    case 'tl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                    case 'bl':\n                        this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                        break;\n                }\n            } else {\n                // Lock the aspect ratio\n                if (this.shiftKeyHeld &&\n                    (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                        cropperDirection === 'bl' || cropperDirection === 'br')\n                ) {\n                    this._calculateNewCropperSizeByDeltas._.ratio;\n                    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    } else {\n                        this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                        this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                        this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                    }\n                }\n\n                if (cropperDirection.match(/t/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/b/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n                }\n                if (cropperDirection.match(/r/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n                if (cropperDirection.match(/l/)) {\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                }\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n            this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n            this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n            return this._calculateNewCropperSizeByDeltas._.rectangle;\n        },\n        \n        /**\n         * Set mouse cursor by it's position over cropper.\n         *\n         * @param ev\n         */\n        _setMouseCursor: function(ev) {\n            if (typeof this._setMouseCursor._ === 'undefined') {\n                this._setMouseCursor._ = {};\n            }\n\n            if (Garnish.isMobileBrowser(true)) {\n                return;\n            }\n            this._setMouseCursor._.cursor = 'default';\n            this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n            if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n                this._setMouseCursor._.cursor = 'pointer';\n            } else if (this._setMouseCursor._.handle) {\n                if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                    this._setMouseCursor._.cursor = 'ns-resize';\n                } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                    this._setMouseCursor._.cursor = 'ew-resize';\n                } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                    this._setMouseCursor._.cursor = 'nwse-resize';\n                } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                    this._setMouseCursor._.cursor = 'nesw-resize';\n                }\n            } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n                this._setMouseCursor._.cursor = 'move';\n            }\n\n            $('.body').css('cursor', this._setMouseCursor._.cursor);\n        },\n\n        /**\n         * Test whether the mouse cursor is on any cropper handles.\n         *\n         * @param ev\n         */\n        _cropperHandleHitTest: function(ev) {\n            if (typeof this._cropperHandleHitTest._ === 'undefined') {\n                this._cropperHandleHitTest._ = {};\n            }\n\n            this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n            this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n            this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n            this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n            this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n            this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n            // Left side top/bottom\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tl';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'bl';\n                }\n            }\n            // Right side top/bottom\n            if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n                if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                    return 'tr';\n                } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                    return 'br';\n                }\n            }\n\n            // Left or right\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'l';\n            }\n            if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n                return 'r';\n            }\n\n            // Top or bottom\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 't';\n            }\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n                return 'b';\n            }\n\n            return false;\n        },\n\n        /**\n         * Test whether the mouse cursor is on a fabricJS object.\n         *\n         * @param object\n         * @param event\n         *\n         * @return boolean\n         */\n\n        _isMouseOver: function(event, object) {\n            if (typeof this._isMouseOver._ === 'undefined') {\n                this._isMouseOver._ = {};\n            }\n\n            this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n            this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n            this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n            // Compensate for center origin coordinate-wise\n            this._isMouseOver._.lb = object.left - object.width / 2;\n            this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n            this._isMouseOver._.tb = object.top - object.height / 2;\n            this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n            return (\n                this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n                this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n                this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n                this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n            );\n        },\n\n        /**\n         * Get vertices of a rectangle defined by left,top,height and width properties.\n         * Optionally it's possible to provide offsetX and offsetY values.\n         * Left and top properties of rectangle reference the top-left corner.\n         *\n         * @param rectangle\n         * @param [offsetX]\n         * @param [offsetY]\n         */\n        _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n            if (typeof this._getRectangleVertices._ === 'undefined') {\n                this._getRectangleVertices._ = {};\n            }\n\n            if (typeof offsetX === 'undefined') {\n                offsetX = 0;\n            }\n            if (typeof offsetY === 'undefined') {\n                offsetY = 0;\n            }\n\n            this._getRectangleVertices._.topLeft = {\n                x: rectangle.left + offsetX,\n                y: rectangle.top + offsetY\n            };\n\n            this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n            this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n            this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n            return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n        },\n\n        /**\n         * Set image vertice coordinates for an image that's been zoomed to fit.\n         */\n        _setFittedImageVerticeCoordinates: function() {\n            this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n        },\n\n        /**\n         * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n         * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n         *\n         * @param zoomMode\n         */\n        getImageVerticeCoords: function(zoomMode) {\n            var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n            var imageDimensions = this.getScaledImageDimensions();\n\n            var ratio;\n\n            if (typeof zoomMode === \"number\") {\n                ratio = zoomMode;\n            } else if (zoomMode === \"cover\") {\n                ratio = this.getZoomToCoverRatio(imageDimensions);\n            } else {\n                ratio = this.getZoomToFitRatio(imageDimensions);\n            }\n\n            // Get the dimensions of the scaled image\n            var scaledHeight = imageDimensions.height * ratio;\n            var scaledWidth = imageDimensions.width * ratio;\n\n            // Calculate the segments of the containing box for the image.\n            // When referring to top/bottom or right/left segments, these are on the\n            // right-side and bottom projection of the containing box for the zoomed out image.\n            var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n            var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n            var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n            var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n            // Calculate the offsets from editor box for the image-containing box\n            var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n            var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n            // Finally, calculate the image vertice coordinates\n            return {\n                a: {\n                    x: horizontalOffset + rightHorizontalSegment,\n                    y: verticalOffset\n                },\n                b: {\n                    x: this.editorWidth - horizontalOffset,\n                    y: verticalOffset + topVerticalSegment\n                },\n                c: {\n                    x: horizontalOffset + leftHorizontalSegment,\n                    y: this.editorHeight - verticalOffset\n                },\n                d: {\n                    x: horizontalOffset,\n                    y: verticalOffset + bottomVerticalSegment\n                }\n            };\n        },\n\n        /**\n         * Debug stuff by continuously rendering a fabric object on canvas.\n         *\n         * @param fabricObj\n         */\n        _debug: function(fabricObj) {\n            this.canvas.remove(this.debugger);\n            this.debugger = fabricObj;\n            this.canvas.add(this.debugger);\n        },\n\n        /**\n         * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n         * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n         * return true if the point is in the rectangle.\n         *\n         * Adapted from: http://stackoverflow.com/a/2763387/2040791\n         *\n         * @param points\n         * @param rectangle\n         */\n        arePointsInsideRectangle: function(points, rectangle) {\n            if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n                this.arePointsInsideRectangle._ = {};\n            }\n\n            // Pre-calculate the vectors and scalar products for two rectangle edges\n            this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n            this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n            this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n            this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n            for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n                this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n                // Calculate the vectors for two rectangle sides and for\n                // the vector from vertices a and b to the point P\n                this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n                this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n                // Calculate scalar or dot products for some vector combinations\n                this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n                this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n                this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n                this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n                if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Returns an object representing the vector between points a and b.\n         *\n         * @param a\n         * @param b\n         */\n        _getVector: function(a, b) {\n            return {x: b.x - a.x, y: b.y - a.y};\n        },\n\n        /**\n         * Returns the scalar product of two vectors\n         *\n         * @param a\n         * @param b\n         */\n        _getScalarProduct: function(a, b) {\n            return a.x * b.x + a.y * b.y;\n        },\n\n        /**\n         * Returns the magnitude of a vector_redrawCropperElements\n         * .\n         *\n         * @param vector\n         */\n        _getVectorMagnitude: function(vector) {\n            return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n        },\n\n        /**\n         * Returns the angle between two vectors in degrees with two decimal points\n         *\n         * @param a\n         * @param b\n         */\n        _getAngleBetweenVectors: function(a, b) {\n            return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n        },\n\n        /**\n         * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n         *\n         * @param rectangle\n         * @param vertex\n         *\n         * @returns {*}\n         */\n        _getEdgeCrossed: function(rectangle, vertex) {\n            // Determine over which edge the vertex is\n            var edgePoints = [\n                [rectangle.a, rectangle.b],\n                [rectangle.b, rectangle.c],\n                [rectangle.c, rectangle.d],\n                [rectangle.d, rectangle.a]\n            ];\n\n            var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            var smallestDiff = 180;\n            var edgeCrossed = null;\n\n            // Test each edge\n            for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n                var edge = edgePoints[edgeIndex];\n                var toCenter = this._getVector(edge[0], centerPoint);\n                var edgeVector = this._getVector(edge[0], edge[1]);\n                var toVertex = this._getVector(edge[0], vertex);\n\n                // If the angle between toCenter/toVertex is the sum of\n                // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n                // the edgeVector is between the other two meaning that this is the offending vertex.\n                // To avoid the rounding errors, we'll take the closest match\n                var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n                if (diff < smallestDiff) {\n                    smallestDiff = diff;\n                    edgeCrossed = edge;\n                }\n            }\n\n            return edgeCrossed;\n        },\n\n        /**\n         * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n         *\n         * @param dimensions\n         */\n        _getImageBoundingBox: function(dimensions) {\n            var box = {};\n\n            var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n            var proportion = dimensions.height / dimensions.width;\n            box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n            box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n            if (this.hasOrientationChanged()) {\n                var temp = box.width;\n                box.width = box.height;\n                box.height = temp;\n            }\n\n            return box;\n        }\n    },\n    {\n        defaults: {\n            animationDuration: 100,\n            allowSavingAsNew: true,\n            onSave: $.noop,\n            allowDegreeFractions: true\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend(\n    {\n        $includeSubfoldersContainer: null,\n        $includeSubfoldersCheckbox: null,\n        showingIncludeSubfoldersCheckbox: false,\n\n        $uploadButton: null,\n        $uploadInput: null,\n        $progressBar: null,\n        $folders: null,\n\n        uploader: null,\n        promptHandler: null,\n        progressBar: null,\n\n        _uploadTotalFiles: 0,\n        _uploadFileProgress: {},\n        _uploadedAssetIds: [],\n        _currentUploaderSettings: {},\n\n        _assetDrag: null,\n        _folderDrag: null,\n        _expandDropTargetFolderTimeout: null,\n        _tempExpandedFolders: [],\n\n        _fileConflictTemplate: {\n            choices: [\n                {value: 'keepBoth', title: Craft.t('app', 'Keep both')},\n                {value: 'replace', title: Craft.t('app', 'Replace it')}\n            ]\n        },\n        _folderConflictTemplate: {\n            choices: [\n                {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')},\n                {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n            ]\n        },\n\n        init: function(elementType, $container, settings) {\n            this.base(elementType, $container, settings);\n\n            if (this.settings.context === 'index') {\n                if (!this._folderDrag) {\n                    this._initIndexPageMode();\n                }\n\n                this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n            } else {\n                this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n                if (this.settings.modal) {\n                    this.settings.modal.on('updateSizeAndPosition', $.proxy(this, '_positionProgressBar'));\n                }\n            }\n        },\n\n        initSources: function() {\n            if (this.settings.context === 'index' && !this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            return this.base();\n        },\n\n        initSource: function($source) {\n            this.base($source);\n\n            this._createFolderContextMenu($source);\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    if ($source.data('folder-id')) {\n                        this._folderDrag.addItems($source.parent());\n                    }\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        deinitSource: function($source) {\n            this.base($source);\n\n            // Does this source have a context menu?\n            var contextMenu = $source.data('contextmenu');\n\n            if (contextMenu) {\n                contextMenu.destroy();\n            }\n\n            if (this.settings.context === 'index') {\n                if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                    this._folderDrag.removeItems($source.parent());\n                }\n\n                if (this._assetDrag) {\n                    this._assetDrag.updateDropTargets();\n                }\n            }\n        },\n\n        _getSourceLevel: function($source) {\n            return $source.parentsUntil('nav', 'ul').length;\n        },\n\n        /**\n         * Initialize the index page-specific features\n         */\n        _initIndexPageMode: function() {\n            if (this._folderDrag) {\n                return;\n            }\n\n            // Make the elements selectable\n            this.settings.selectable = true;\n            this.settings.multiSelect = true;\n\n            var onDragStartProxy = $.proxy(this, '_onDragStart'),\n                onDropTargetChangeProxy = $.proxy(this, '_onDropTargetChange');\n\n            // Asset dragging\n            // ---------------------------------------------------------------------\n\n            this._assetDrag = new Garnish.DragDrop({\n                activeDropTargetClass: 'sel',\n                helperOpacity: 0.75,\n\n                filter: $.proxy(function() {\n                    return this.view.getSelectedElements().has('div.element[data-movable]');\n                }, this),\n\n                helper: $.proxy(function($file) {\n                    return this._getFileDragHelper($file);\n                }, this),\n\n                dropTargets: $.proxy(function() {\n                    // Which data attribute should we be checking?\n                    var attr;\n                    if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                        attr = 'data-can-move-peer-files-to';\n                    } else {\n                        attr = 'data-can-move-to';\n                    }\n\n                    var targets = [];\n\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        // Make sure it's a volume folder\n                        var $source = this.$sources.eq(i);\n                        if (Garnish.hasAttr($source, attr)) {\n                            targets.push($source);\n                        }\n                    }\n\n                    return targets;\n                }, this),\n\n                onDragStart: onDragStartProxy,\n                onDropTargetChange: onDropTargetChangeProxy,\n                onDragStop: $.proxy(this, '_onFileDragStop')\n            });\n\n            // Folder dragging\n            // ---------------------------------------------------------------------\n\n            this._folderDrag = new Garnish.DragDrop(\n                {\n                    activeDropTargetClass: 'sel',\n                    helperOpacity: 0.75,\n\n                    filter: $.proxy(function() {\n                        // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                        var $selected = this.sourceSelect.getSelectedItems(),\n                            draggees = [];\n\n                        for (var i = 0; i < $selected.length; i++) {\n                            var $source = $selected.eq(i);\n\n                            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                                continue;\n                            }\n\n                            if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                                draggees.push($source.parent()[0]);\n                            }\n                        }\n\n                        return $(draggees);\n                    }, this),\n\n                    helper: $.proxy(function($draggeeHelper) {\n                        var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                            $helperNav = $('<nav/>').appendTo($helperSidebar),\n                            $helperUl = $('<ul/>').appendTo($helperNav);\n\n                        $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                        $draggeeHelper.children('a').addClass('sel');\n\n                        // Match the style\n                        $draggeeHelper.css({\n                            'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                            'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                            'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                            'padding-left': this._folderDrag.$draggee.css('padding-left')\n                        });\n\n                        return $helperSidebar;\n                    }, this),\n\n                    dropTargets: $.proxy(function() {\n                        var targets = [];\n\n                        // Tag the dragged folder and it's subfolders\n                        var draggedSourceIds = [];\n                        this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                            draggedSourceIds.push($(this).data('key'));\n                        });\n\n                        for (var i = 0; i < this.$sources.length; i++) {\n                            // Make sure it's a volume folder and not one of the dragged folders\n                            var $source = this.$sources.eq(i),\n                                key = $source.data('key');\n\n                            if (!this._getFolderUidFromSourceKey(key)) {\n                                continue;\n                            }\n\n                            if (!Craft.inArray(key, draggedSourceIds)) {\n                                targets.push($source);\n                            }\n                        }\n\n                        return targets;\n                    }, this),\n\n                    onDragStart: onDragStartProxy,\n                    onDropTargetChange: onDropTargetChangeProxy,\n                    onDragStop: $.proxy(this, '_onFolderDragStop')\n                });\n        },\n\n        /**\n         * On file drag stop\n         */\n        _onFileDragStop: function() {\n            if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n                // Keep it selected\n                var originatingSource = this.$source;\n\n                var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                    originalAssetIds = [];\n\n                // For each file, prepare array data.\n                for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                    var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                    originalAssetIds.push(originalAssetId);\n                }\n\n                // Are any files actually getting moved?\n                if (originalAssetIds.length) {\n                    this.setIndexBusy();\n\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(originalAssetIds.length);\n                    this.progressBar.showProgressBar();\n\n\n                    // For each file to move a separate request\n                    var parameterArray = [];\n                    for (i = 0; i < originalAssetIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-asset',\n                            params: {\n                                assetId: originalAssetIds[i],\n                                folderId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Define the callback for when all file moves are complete\n                    var onMoveFinish = $.proxy(function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var response = responseArray[i];\n\n                            // Push prompt into prompt array\n                            if (response.conflict) {\n                                this.promptHandler.addPrompt({\n                                    assetId: response.assetId,\n                                    suggestedFilename: response.suggestedFilename,\n                                    prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                                });\n                            }\n\n                            if (response.error) {\n                                alert(response.error);\n                            }\n                        }\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        var reloadIndex = false;\n\n                        var performAfterMoveActions = function() {\n                            // Select original source\n                            this.sourceSelect.selectItem(originatingSource);\n\n                            // Make sure we use the correct offset when fetching the next page\n                            this._totalVisible -= this._assetDrag.$draggee.length;\n\n                            // And remove the elements that have been moved away\n                            for (var i = 0; i < originalAssetIds.length; i++) {\n                                $('[data-id=' + originalAssetIds[i] + ']').remove();\n                            }\n\n                            this.view.deselectAllElements();\n                            this._collapseExtraExpandedFolders(targetFolderId);\n\n                            if (reloadIndex) {\n                                this.updateElements();\n                            }\n                        };\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                var newParameterArray = [];\n\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        reloadIndex = true;\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'keepBoth') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                filename: returnData[i].suggestedFilename\n                                            }\n                                        });\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        newParameterArray.push({\n                                            action: 'assets/move-asset',\n                                            params: {\n                                                folderId: targetFolderId,\n                                                assetId: returnData[i].assetId,\n                                                force: true\n                                            }\n                                        });\n                                    }\n                                }\n\n                                // Nothing to do, carry on\n                                if (newParameterArray.length === 0) {\n                                    performAfterMoveActions.apply(this);\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    // Move conflicting files again with resolutions now\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this._assetDrag.fadeOutHelpers();\n                            this.promptHandler.showBatchPrompts(promptCallback);\n                        }\n                        else {\n                            performAfterMoveActions.apply(this);\n                            this._assetDrag.fadeOutHelpers();\n                        }\n                    }, this);\n\n                    // Initiate the file move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._assetDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * On folder drag stop\n         */\n        _onFolderDragStop: function() {\n            // Only move if we have a valid target and we're not trying to move into our direct parent\n            if (\n                this._folderDrag.$activeDropTarget &&\n                this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n            ) {\n                var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n                this._collapseExtraExpandedFolders(targetFolderId);\n\n                // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n                var folderIds = [];\n\n                for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                    var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                        folderId = $a.data('folder-id');\n\n                    // Make sure it's not already in the target folder and use this single folder Id.\n                    if (folderId != targetFolderId) {\n                        folderIds.push(folderId);\n                        break;\n                    }\n                }\n\n                if (folderIds.length) {\n                    folderIds.sort();\n                    folderIds.reverse();\n\n                    this.setIndexBusy();\n                    this._positionProgressBar();\n                    this.progressBar.resetProgressBar();\n                    this.progressBar.setItemCount(folderIds.length);\n                    this.progressBar.showProgressBar();\n\n                    var parameterArray = [];\n\n                    for (i = 0; i < folderIds.length; i++) {\n                        parameterArray.push({\n                            action: 'assets/move-folder',\n                            params: {\n                                folderId: folderIds[i],\n                                parentId: targetFolderId\n                            }\n                        });\n                    }\n\n                    // Increment, so to avoid displaying folder files that are being moved\n                    this.requestId++;\n\n                    /*\n                     Here's the rundown:\n                     1) Send all the folders being moved\n                     2) Get results:\n                     a) For all conflicting, receive prompts and resolve them to get:\n                     b) For all valid move operations: by now server has created the needed folders\n                     in target destination. Server returns an array of file move operations\n                     c) server also returns a list of all the folder id changes\n                     d) and the data-id of node to be removed, in case of conflict\n                     e) and a list of folders to delete after the move\n                     3) From data in 2) build a large file move operation array\n                     4) Create a request loop based on this, so we can display progress bar\n                     5) when done, delete all the folders and perform other maintenance\n                     6) Champagne\n                     */\n\n                    // This will hold the final list of files to move\n                    var fileMoveList = [];\n\n                    var newSourceKey = '';\n\n                    var onMoveFinish = function(responseArray) {\n                        this.promptHandler.resetPrompts();\n\n                        // Loop trough all the responses\n                        for (var i = 0; i < responseArray.length; i++) {\n                            var data = responseArray[i];\n\n                            // If successful and have data, then update\n                            if (data.success) {\n                                if (data.transferList) {\n                                    fileMoveList = data.transferList;\n                                }\n\n                                if (data.newFolderId) {\n                                    newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                                }\n                            }\n\n                            // Push prompt into prompt array\n                            if (data.conflict) {\n                                data.prompt = {\n                                    message: data.conflict,\n                                    choices: this._folderConflictTemplate.choices\n                                };\n\n                                this.promptHandler.addPrompt(data);\n                            }\n\n                            if (data.error) {\n                                alert(data.error);\n                            }\n                        }\n\n                        if (this.promptHandler.getPromptCount()) {\n                            // Define callback for completing all prompts\n                            var promptCallback = $.proxy(function(returnData) {\n                                this.promptHandler.resetPrompts();\n\n                                var newParameterArray = [];\n\n                                var params = {};\n                                // Loop trough all returned data and prepare a new request array\n                                for (var i = 0; i < returnData.length; i++) {\n                                    if (returnData[i].choice === 'cancel') {\n                                        continue;\n                                    }\n\n                                    if (returnData[i].choice === 'replace') {\n                                        params.force = true;\n                                    }\n\n                                    if (returnData[i].choice === 'merge') {\n                                        params.merge = true;\n                                    }\n\n                                    params.folderId = data.folderId;\n                                    params.parentId = data.parentId;\n\n                                    newParameterArray.push({\n                                        action: 'assets/move-folder',\n                                        params: params\n                                    });\n                                }\n\n                                // Start working on them lists, baby\n                                if (newParameterArray.length === 0) {\n                                    $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                                }\n                                else {\n                                    // Start working\n                                    this.setIndexBusy();\n                                    this.progressBar.resetProgressBar();\n                                    this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                    this.progressBar.showProgressBar();\n\n                                    this._performBatchRequests(newParameterArray, onMoveFinish);\n                                }\n                            }, this);\n\n                            this.promptHandler.showBatchPrompts(promptCallback);\n\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                        }\n                        else {\n                            $.proxy(this, '_performActualFolderMove', fileMoveList, folderIds, newSourceKey)();\n                        }\n                    }.bind(this);\n\n                    // Initiate the folder move with the built array, index of 0 and callback to use when done\n                    this._performBatchRequests(parameterArray, onMoveFinish);\n\n                    // Skip returning dragees until we get the Ajax response\n                    return;\n                }\n            }\n            else {\n                // Add the .sel class back on the selected source\n                this.$source.addClass('sel');\n\n                this._collapseExtraExpandedFolders();\n            }\n\n            this._folderDrag.returnHelpersToDraggees();\n        },\n\n        /**\n         * Really move the folder. Like really. For real.\n         */\n        _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n            this.progressBar.setItemCount(1);\n            this.progressBar.showProgressBar();\n\n            var moveCallback = function(folderDeleteList) {\n                // Delete the old folders\n                var counter = 0;\n                var limit = folderDeleteList.length;\n                for (var i = 0; i < folderDeleteList.length; i++) {\n                    // When all folders are deleted, reload the sources.\n                    Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, function() {\n                        if (++counter === limit) {\n                            this.setIndexAvailable();\n                            this.progressBar.hideProgressBar();\n                            this._folderDrag.returnHelpersToDraggees();\n                            this.setInstanceState('selectedSource', newSourceKey);\n                            this.refreshSources();\n                        }\n                    }.bind(this));\n                }\n            }.bind(this);\n\n\n            if (fileMoveList.length > 0) {\n                var parameterArray =[];\n\n                for (var i = 0; i < fileMoveList.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: fileMoveList[i]\n                    });\n                }\n                this._performBatchRequests(parameterArray, function() {\n                    moveCallback(folderDeleteList);\n                });\n            }\n            else {\n                moveCallback(folderDeleteList);\n            }\n        },\n\n        /**\n         * Returns the root level source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getRootSource: function($source) {\n            var $parent;\n            while (($parent = this._getParentSource($source)) && $parent.length) {\n                $source = $parent;\n            }\n            return $source;\n        },\n\n        /**\n         * Get parent source for a source.\n         *\n         * @param $source\n         * @returns {*}\n         * @private\n         */\n        _getParentSource: function($source) {\n            if (this._getSourceLevel($source) > 1) {\n                return $source.parent().parent().siblings('a');\n            }\n        },\n\n        _selectSourceByFolderId: function(targetFolderId) {\n            var $targetSource = this._getSourceByKey(targetFolderId);\n\n            // Make sure that all the parent sources are expanded and this source is visible.\n            var $parentSources = $targetSource.parent().parents('li');\n\n            for (var i = 0; i < $parentSources.length; i++) {\n                var $parentSource = $($parentSources[i]);\n\n                if (!$parentSource.hasClass('expanded')) {\n                    $parentSource.children('.toggle').trigger('click');\n                }\n            }\n\n            this.selectSource($targetSource);\n            this.updateElements();\n        },\n\n        /**\n         * Initialize the uploader.\n         *\n         * @private\n         */\n        afterInit: function() {\n            if (!this.$uploadButton) {\n                this.$uploadButton = $('<div class=\"btn submit\" data-icon=\"upload\" style=\"position: relative; overflow: hidden;\" role=\"button\">' + Craft.t('app', 'Upload files') + '</div>');\n                this.addButton(this.$uploadButton);\n\n                this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n            }\n\n            this.promptHandler = new Craft.PromptHandler();\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                fileInput: this.$uploadInput,\n                dropZone: this.$container\n            };\n\n            options.events = {\n                fileuploadstart: $.proxy(this, '_onUploadStart'),\n                fileuploadprogressall: $.proxy(this, '_onUploadProgress'),\n                fileuploaddone: $.proxy(this, '_onUploadComplete')\n            };\n\n            if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            this._currentUploaderSettings = options;\n\n            this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n            this.$uploadButton.on('click', $.proxy(function() {\n                if (this.$uploadButton.hasClass('disabled')) {\n                    return;\n                }\n                if (!this.isIndexBusy) {\n                    this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n                }\n            }, this));\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific volume in the URL?\n            if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n                    if ($source.data('volume-handle') === defaultVolumeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        onSelectSource: function() {\n            var $source = this._getSourceByKey(this.sourceKey);\n            var folderId = $source.data('folder-id');\n\n            if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n                this.uploader.setParams({\n                    folderId: this.$source.attr('data-folder-id')\n                });\n                this.$uploadButton.removeClass('disabled');\n            } else {\n                this.$uploadButton.addClass('disabled');\n            }\n\n            // Update the URL if we're on the Assets index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'assets';\n                var $rootSource = this._getRootSource($source);\n                if ($rootSource && $rootSource.data('volume-handle')) {\n                    uri += '/' + $rootSource.data('volume-handle');\n                }\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n\n            this.base();\n        },\n\n        _getFolderUidFromSourceKey: function(sourceKey) {\n            var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n            return m ? m[1] : null;\n        },\n\n        startSearching: function() {\n            // Does this source have subfolders?\n            if (this.$source.siblings('ul').length) {\n                if (this.$includeSubfoldersContainer === null) {\n                    var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                    this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                    var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                    this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                    $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                    this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                        this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                        this.updateElements();\n                    });\n                }\n                else {\n                    this.$includeSubfoldersContainer.velocity('stop');\n                }\n\n                var checked = this.getSelectedSourceState('includeSubfolders', false);\n                this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: 0,\n                    opacity: 1\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = true;\n            }\n\n            this.base();\n        },\n\n        stopSearching: function() {\n            if (this.showingIncludeSubfoldersCheckbox) {\n                this.$includeSubfoldersContainer.velocity('stop');\n\n                this.$includeSubfoldersContainer.velocity({\n                    marginBottom: -25,\n                    opacity: 0\n                }, 'fast');\n\n                this.showingIncludeSubfoldersCheckbox = false;\n            }\n\n            this.base();\n        },\n\n        getViewParams: function() {\n            var data = this.base();\n\n            if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n                data.criteria.includeSubfolders = true;\n            }\n\n            return data;\n        },\n\n        /**\n         * React on upload submit.\n         *\n         * @private\n         */\n        _onUploadStart: function() {\n            this.setIndexBusy();\n\n            // Initial values\n            this._positionProgressBar();\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n\n            this.promptHandler.resetPrompts();\n        },\n\n        /**\n         * Update uploaded byte count.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On Upload Complete.\n         */\n        _onUploadComplete: function(event, data) {\n            var response = data.result;\n            var filename = data.files[0].name;\n\n            var doReload = true;\n\n            if (response.success || response.conflict) {\n                // Add the uploaded file to the selected ones, if appropriate\n                this._uploadedAssetIds.push(response.assetId);\n\n                // If there is a prompt, add it to the queue\n                if (response.conflict) {\n                    response.prompt =  {\n                        message: Craft.t('app', response.conflict, {file: response.filename}),\n                        choices: this._fileConflictTemplate.choices\n                    };\n\n                    this.promptHandler.addPrompt(response);\n                }\n\n                Craft.cp.runQueue();\n            }\n            else {\n                if (response.error) {\n                    alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n                }\n                else {\n                    alert(Craft.t('app', 'Upload failed for {filename}.', {filename: filename}));\n                }\n\n                doReload = false;\n            }\n\n            // For the last file, display prompts, if any. If not - just update the element view.\n            if (this.uploader.isLastUpload()) {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n\n                if (this.promptHandler.getPromptCount()) {\n                    this.promptHandler.showBatchPrompts($.proxy(this, '_uploadFollowup'));\n                }\n                else {\n                    if (doReload) {\n                        this._updateAfterUpload();\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n         *\n         * @private\n         */\n        _updateAfterUpload: function () {\n            if (this.settings.context !== 'index') {\n                this.setSortAttribute('dateModified');\n                this.setSortDirection('desc');\n            }\n            this.updateElements();\n        },\n\n        /**\n         * Follow up to an upload that triggered at least one conflict resolution prompt.\n         *\n         * @param returnData\n         * @private\n         */\n        _uploadFollowup: function(returnData) {\n            this.setIndexBusy();\n            this.progressBar.resetProgressBar();\n\n            this.promptHandler.resetPrompts();\n\n            var finalCallback = function() {\n                this.setIndexAvailable();\n                this.progressBar.hideProgressBar();\n                this._updateAfterUpload();\n            }.bind(this);\n\n            this.progressBar.setItemCount(returnData.length);\n\n            var doFollowup = function(parameterArray, parameterIndex, callback) {\n                var postData = {};\n                var action = null;\n\n                var followupCallback = function (data, textStatus) {\n                    if (textStatus === 'success' && data.assetId) {\n                        this._uploadedAssetIds.push(data.assetId);\n                    } else if (data.error) {\n                        alert(data.error);\n                    }\n                    parameterIndex++;\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (parameterIndex === parameterArray.length) {\n                        callback();\n                    }\n                    else {\n                        doFollowup(parameterArray, parameterIndex, callback);\n                    }\n                }.bind(this);\n\n                if (parameterArray[parameterIndex].choice === 'replace') {\n                    action = 'assets/replace-file';\n                    postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                    if (parameterArray[parameterIndex].conflictingAssetId) {\n                        postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                    } else {\n                        postData.targetFilename = parameterArray[parameterIndex].filename;\n                    }\n                } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                    action = 'assets/delete-asset';\n                    postData.assetId = parameterArray[parameterIndex].assetId;\n                }\n\n                if (!action) {\n                    // We don't really need to do another request, so let's pretend that already happened\n                    followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n                } else {\n                    Craft.postActionRequest(action, postData, followupCallback);\n                }\n            }.bind(this);\n\n            this.progressBar.showProgressBar();\n            doFollowup(returnData, 0, finalCallback);\n        },\n\n        /**\n         * Perform actions after updating elements\n         * @private\n         */\n        onUpdateElements: function() {\n            this._onUpdateElements(false, this.view.getAllElements());\n            this.view.on('appendElements', $.proxy(function(ev) {\n                this._onUpdateElements(true, ev.newElements);\n            }, this));\n\n            this.base();\n        },\n\n        /**\n         * Do the after-update initializations\n         * @private\n         */\n        _onUpdateElements: function(append, $newElements) {\n            if (this.settings.context === 'index') {\n                if (!append) {\n                    this._assetDrag.removeAllItems();\n                }\n\n                this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n            }\n\n            // See if we have freshly uploaded files to add to selection\n            if (this._uploadedAssetIds.length) {\n                if (this.view.settings.selectable) {\n                    for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                        this.view.selectElementById(this._uploadedAssetIds[i]);\n                    }\n                }\n\n                // Reset the list.\n                this._uploadedAssetIds = [];\n            }\n\n            this.base(append, $newElements);\n\n            this.removeListener(this.$elements, 'keydown');\n            this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n            this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function (ev) {\n            var $element = $(ev.item).find('.element');\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        _onDragStart: function() {\n            this._tempExpandedFolders = [];\n        },\n\n        /**\n         * Get File Drag Helper\n         */\n        _getFileDragHelper: function($element) {\n            var currentView = this.getSelectedSourceState('mode');\n            var $outerContainer;\n            var $innerContainer;\n\n            switch (currentView) {\n                case 'table': {\n                    $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                    var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                    var $tbody = $('<tbody/>').appendTo($table);\n\n                    $element.appendTo($tbody);\n\n                    // Copy the column widths\n                    this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                    var $helperCells = $element.children();\n\n                    for (var i = 0; i < $helperCells.length; i++) {\n                        // Hard-set the cell widths\n                        var $helperCell = $($helperCells[i]);\n\n                        // Skip the checkbox cell\n                        if ($helperCell.hasClass('checkbox-cell')) {\n                            $helperCell.remove();\n                            $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                            continue;\n                        }\n\n                        var $firstRowCell = $(this._$firstRowCells[i]),\n                            width = $firstRowCell.width();\n\n                        $firstRowCell.width(width);\n                        $helperCell.width(width);\n                    }\n\n                    return $outerContainer;\n                }\n                case 'thumbs': {\n                    $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                    $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                    $element.appendTo($innerContainer);\n\n                    return $outerContainer;\n                }\n            }\n\n            return $();\n        },\n\n        /**\n         * On Drop Target Change\n         */\n        _onDropTargetChange: function($dropTarget) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            if ($dropTarget) {\n                var folderId = $dropTarget.data('folder-id');\n\n                if (folderId) {\n                    this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                    if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                        this._expandDropTargetFolderTimeout = setTimeout($.proxy(this, '_expandFolder'), 500);\n                    }\n                }\n                else {\n                    this.dropTargetFolder = null;\n                }\n            }\n\n            if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n                // Temporarily remove the .sel class on the active source\n                this.$source.removeClass('sel');\n            }\n            else {\n                this.$source.addClass('sel');\n            }\n        },\n\n        /**\n         * Collapse Extra Expanded Folders\n         */\n        _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n            clearTimeout(this._expandDropTargetFolderTimeout);\n\n            // If a source ID is passed in, exclude its parents\n            var $excludedSources;\n\n            if (dropTargetFolderId) {\n                $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n            }\n\n            for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n                var $source = this._tempExpandedFolders[i];\n\n                // Check the parent list, if a source id is passed in\n                if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                    this._collapseFolder($source);\n                    this._tempExpandedFolders.splice(i, 1);\n                }\n            }\n        },\n\n        _getSourceByKey: function(key) {\n            return this.$sources.filter('[data-key$=\"' + key + '\"]');\n        },\n\n        _hasSubfolders: function($source) {\n            return $source.siblings('ul').find('li').length;\n        },\n\n        _isExpanded: function($source) {\n            return $source.parent('li').hasClass('expanded');\n        },\n\n        _expandFolder: function() {\n            // Collapse any temp-expanded drop targets that aren't parents of this one\n            this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n            this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n            // Keep a record of that\n            this._tempExpandedFolders.push(this.dropTargetFolder);\n        },\n\n        _collapseFolder: function($source) {\n            if ($source.parent().hasClass('expanded')) {\n                $source.siblings('.toggle').trigger('click');\n            }\n        },\n\n        _createFolderContextMenu: function($source) {\n            // Make sure it's a volume folder\n            if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                return;\n            }\n\n            var menuOptions = [{label: Craft.t('app', 'New subfolder'), onClick: $.proxy(this, '_createSubfolder', $source)}];\n\n            // For all folders that are not top folders\n            if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n                menuOptions.push({label: Craft.t('app', 'Rename folder'), onClick: $.proxy(this, '_renameFolder', $source)});\n                menuOptions.push({label: Craft.t('app', 'Delete folder'), onClick: $.proxy(this, '_deleteFolder', $source)});\n            }\n\n            new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n        },\n\n        _createSubfolder: function($parentFolder) {\n            var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n            if (subfolderName) {\n                var params = {\n                    parentId: $parentFolder.data('folder-id'),\n                    folderName: subfolderName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/create-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        this._prepareParentForChildren($parentFolder);\n\n                        var $subfolder = $(\n                            '<li>' +\n                            '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                            ' data-folder-id=\"' + data.folderId + '\"' +\n                            (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                            (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                            '>' +\n                            data.folderName +\n                            '</a>' +\n                            '</li>'\n                        );\n\n                        var $a = $subfolder.children('a:first');\n                        this._appendSubfolder($parentFolder, $subfolder);\n                        this.initSource($a);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        _deleteFolder: function($targetFolder) {\n            if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id')\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/delete-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        var $parentFolder = this._getParentSource($targetFolder);\n\n                        // Remove folder and any trace from its parent, if needed\n                        this.deinitSource($targetFolder);\n\n                        $targetFolder.parent().remove();\n                        this._cleanUpTree($parentFolder);\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this));\n            }\n        },\n\n        /**\n         * Rename\n         */\n        _renameFolder: function($targetFolder) {\n            var oldName = $.trim($targetFolder.text()),\n                newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n            if (newName && newName !== oldName) {\n                var params = {\n                    folderId: $targetFolder.data('folder-id'),\n                    newName: newName\n                };\n\n                this.setIndexBusy();\n\n                Craft.postActionRequest('assets/rename-folder', params, $.proxy(function(data, textStatus) {\n                    this.setIndexAvailable();\n\n                    if (textStatus === 'success' && data.success) {\n                        $targetFolder.text(data.newName);\n\n                        // If the current folder was renamed.\n                        if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                            this.updateElements();\n                        }\n                    }\n\n                    if (textStatus === 'success' && data.error) {\n                        alert(data.error);\n                    }\n                }, this), 'json');\n            }\n        },\n\n        /**\n         * Prepare a source folder for children folder.\n         *\n         * @param $parentFolder\n         * @private\n         */\n        _prepareParentForChildren: function($parentFolder) {\n            if (!this._hasSubfolders($parentFolder)) {\n                $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n                this.initSourceToggle($parentFolder);\n            }\n        },\n\n        /**\n         * Appends a subfolder to the parent folder at the correct spot.\n         *\n         * @param $parentFolder\n         * @param $subfolder\n         * @private\n         */\n        _appendSubfolder: function($parentFolder, $subfolder) {\n            var $subfolderList = $parentFolder.siblings('ul'),\n                $existingChildren = $subfolderList.children('li'),\n                subfolderLabel = $.trim($subfolder.children('a:first').text()),\n                folderInserted = false;\n\n            for (var i = 0; i < $existingChildren.length; i++) {\n                var $existingChild = $($existingChildren[i]);\n\n                if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                    $existingChild.before($subfolder);\n                    folderInserted = true;\n                    break;\n                }\n            }\n\n            if (!folderInserted) {\n                $parentFolder.siblings('ul').append($subfolder);\n            }\n        },\n\n        _cleanUpTree: function($parentFolder) {\n            if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n                this.deinitSourceToggle($parentFolder);\n                $parentFolder.siblings('ul').remove();\n                $parentFolder.siblings('.toggle').remove();\n                $parentFolder.parent().removeClass('expanded');\n            }\n        },\n\n        _positionProgressBar: function() {\n            if (!this.progressBar) {\n                this.progressBar = new Craft.ProgressBar(this.$main, true);\n            }\n\n            var $container = $(),\n                scrollTop = 0,\n                offset = 0;\n\n            if (this.settings.context === 'index') {\n                $container = this.progressBar.$progressBar.closest('#content');\n                scrollTop = Garnish.$win.scrollTop();\n            } else {\n                $container = this.progressBar.$progressBar.closest('.main');\n                scrollTop = this.$main.scrollTop();\n            }\n\n            var containerTop = $container.offset().top;\n            var diff = scrollTop - containerTop;\n            var windowHeight = Garnish.$win.height();\n\n            if ($container.height() > windowHeight) {\n                offset = (windowHeight / 2) - 6 + diff;\n            } else {\n                offset = ($container.height() / 2) - 6;\n            }\n\n            if (this.settings.context !== 'index') {\n                offset = scrollTop + (($container.height() / 2) - 6);\n            }\n\n            this.progressBar.$progressBar.css({\n                top: offset\n            });\n        },\n\n        _performBatchRequests: function(parameterArray, finalCallback) {\n            var responseArray = [];\n\n            var doRequest = function (parameters) {\n                Craft.postActionRequest(parameters.action, parameters.params, function (data, textStatus) {\n                    this.progressBar.incrementProcessedItemCount(1);\n                    this.progressBar.updateProgressBar();\n\n                    if (textStatus === 'success') {\n                        responseArray.push(data);\n\n                        // If assets were just merged we should get the reference tags updated right away\n                        Craft.cp.runQueue();\n                    }\n\n                    if (responseArray.length >= parameterArray.length) {\n                        finalCallback(responseArray);\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            for (var i = 0; i < parameterArray.length; i++) {\n                doRequest(parameterArray[i]);\n            }\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        requestId: 0,\n        hud: null,\n        uploader: null,\n        progressBar: null,\n\n        originalFilename: '',\n        originalExtension: '',\n\n        init: function() {\n            if (arguments.length > 0 && typeof arguments[0] === 'object') {\n                arguments[0].editorSettings = {\n                    onShowHud: $.proxy(this.resetOriginalFilename, this),\n                    onCreateForm: $.proxy(this._renameHelper, this),\n                    validators: [$.proxy(this.validateElementForm, this)]\n                };\n            }\n\n            this.base.apply(this, arguments);\n            this._attachUploader();\n\n            this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n            this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n        },\n\n        /**\n         * Handle a keypress\n         * @private\n         */\n        _onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n                if (Craft.PreviewFileModal.openInstance) {\n                    Craft.PreviewFileModal.openInstance.selfDestruct();\n                } else {\n                    var $element = this.elementSelect.$focusedItem;\n\n                    if ($element.length) {\n                        this._loadPreview($element);\n                    }\n                }\n\n                ev.stopPropagation();\n\n                return false;\n            }\n        },\n\n        /**\n         * Handle element being focused\n         * @private\n         */\n        _onElementFocus: function(ev) {\n            var $element = $(ev.item);\n\n            if (Craft.PreviewFileModal.openInstance && $element.length) {\n                this._loadPreview($element);\n            }\n        },\n\n        /**\n         * Load the preview for an Asset element\n         * @private\n         */\n        _loadPreview: function($element) {\n            var settings = {};\n\n            if ($element.data('image-width')) {\n                settings.startingWidth = $element.data('image-width');\n                settings.startingHeight = $element.data('image-height');\n            }\n\n            new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n        },\n\n        /**\n         * Create the element editor\n         */\n        createElementEditor: function($element) {\n            return this.base($element, {\n                params: {\n                    defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n                },\n                input: this\n            });\n        },\n\n        /**\n         * Attach the uploader with drag event handler\n         */\n        _attachUploader: function() {\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl('assets/upload'),\n                dropZone: this.$container,\n                formData: {\n                    fieldId: this.settings.fieldId,\n                    elementId: this.settings.sourceElementId\n                }\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            if (typeof this.settings.criteria.kind !== 'undefined') {\n                options.allowedKinds = this.settings.criteria.kind;\n            }\n\n            options.canAddMoreFiles = $.proxy(this, 'canAddMoreFiles');\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n        },\n\n        refreshThumbnail: function(elementId) {\n            var parameters = {\n                elementId: elementId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                    $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                    this.thumbLoader.load($existing);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Add the freshly uploaded file to the input field.\n         */\n        selectUploadedFile: function(element) {\n            // Check if we're able to add new elements\n            if (!this.canAddMoreElements()) {\n                return;\n            }\n\n            var $newElement = element.$element;\n\n            // Make a couple tweaks\n            $newElement.addClass('removable');\n            $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n                '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n            $newElement.appendTo(this.$elementsContainer);\n\n            var margin = -($newElement.outerWidth() + 10);\n\n            this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addElementBtn.velocity(animateCss, 'fast');\n\n            this.addElements($newElement);\n\n            delete this.modal;\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function() {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var parameters = {\n                    elementId: data.result.assetId,\n                    siteId: this.settings.criteria.siteId,\n                    size: this.settings.viewMode\n                };\n\n                Craft.postActionRequest('elements/get-element-html', parameters, function(data) {\n                    if (data.error) {\n                        alert(data.error);\n                    } else {\n                        var html = $(data.html);\n                        Craft.appendHeadHtml(data.headHtml);\n                        this.selectUploadedFile(Craft.getElementInfo(html));\n                    }\n\n                    // Last file\n                    if (this.uploader.isLastUpload()) {\n                        this.progressBar.hideProgressBar();\n                        this.$container.removeClass('uploading');\n\n                        if (window.draftEditor) {\n                            window.draftEditor.checkForm();\n                        }\n                    }\n                }.bind(this));\n\n                Craft.cp.runQueue();\n            }\n        },\n\n        /**\n         * We have to take into account files about to be added as well\n         */\n        canAddMoreFiles: function(slotsTaken) {\n            return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n        },\n\n        /**\n         * Parse the passed filename into the base filename and extension.\n         *\n         * @param filename\n         * @returns {{extension: string, baseFileName: string}}\n         */\n        _parseFilename: function(filename) {\n            var parts = filename.split('.'),\n                extension = '';\n\n            if (parts.length > 1) {\n                extension = parts.pop();\n            }\n            var baseFileName = parts.join('.');\n            return {extension: extension, baseFileName: baseFileName};\n        },\n\n        /**\n         * A helper function or the filename field.\n         * @private\n         */\n        _renameHelper: function($form) {\n            $('.renameHelper', $form).on('focus', $.proxy(function(e) {\n                var input = e.currentTarget,\n                    filename = this._parseFilename(input.value);\n\n                if (this.originalFilename === '' && this.originalExtension === '') {\n                    this.originalFilename = filename.baseFileName;\n                    this.originalExtension = filename.extension;\n                }\n\n                var startPos = 0,\n                    endPos = filename.baseFileName.length;\n\n                if (typeof input.selectionStart !== 'undefined') {\n                    input.selectionStart = startPos;\n                    input.selectionEnd = endPos;\n                } else if (document.selection && document.selection.createRange) {\n                    // IE branch\n                    input.select();\n                    var range = document.selection.createRange();\n                    range.collapse(true);\n                    range.moveEnd(\"character\", endPos);\n                    range.moveStart(\"character\", startPos);\n                    range.select();\n                }\n            }, this));\n        },\n\n        resetOriginalFilename: function() {\n            this.originalFilename = \"\";\n            this.originalExtension = \"\";\n        },\n\n        validateElementForm: function() {\n            var $filenameField = $('.renameHelper', this.elementEditor.hud.$hud.data('elementEditor').$form);\n            var filename = this._parseFilename($filenameField.val());\n\n            if (filename.extension !== this.originalExtension) {\n                // Blank extension\n                if (filename.extension === '') {\n                    // If filename changed as well, assume removal of extension a mistake\n                    if (this.originalFilename !== filename.baseFileName) {\n                        $filenameField.val(filename.baseFileName + '.' + this.originalExtension);\n                        return true;\n                    } else {\n                        // If filename hasn't changed, make sure they want to remove extension\n                        return confirm(Craft.t('app', \"Are you sure you want to remove the extension “.{ext}”?\", {ext: this.originalExtension}));\n                    }\n                } else {\n                    // If the extension has changed, make sure it s intentional\n                    return confirm(Craft.t('app', \"Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?\",\n                        {\n                            oldExt: this.originalExtension,\n                            newExt: filename.extension\n                        }));\n                }\n            }\n            return true;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend(\n    {\n        $selectTransformBtn: null,\n        _selectedTransform: null,\n\n        init: function(elementType, settings) {\n            settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n            this.base(elementType, settings);\n\n            if (settings.transforms.length) {\n                this.createSelectTransformButton(settings.transforms);\n            }\n        },\n\n        createSelectTransformButton: function(transforms) {\n            if (!transforms || !transforms.length) {\n                return;\n            }\n\n            var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n            this.$selectBtn.appendTo($btnGroup);\n\n            this.$selectTransformBtn = $('<div class=\"btn menubtn disabled\">' + Craft.t('app', 'Select transform') + '</div>').appendTo($btnGroup);\n\n            var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n                $menuList = $('<ul></ul>').appendTo($menu);\n\n            for (var i = 0; i < transforms.length; i++) {\n                $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n            }\n\n            var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n                onOptionSelect: $.proxy(this, 'onSelectTransform')\n            });\n            MenuButton.disable();\n\n            this.$selectTransformBtn.data('menuButton', MenuButton);\n        },\n\n        onSelectionChange: function(ev) {\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                allowTransforms = false;\n\n            if ($selectedElements.length && this.settings.transforms.length) {\n                allowTransforms = true;\n\n                for (var i = 0; i < $selectedElements.length; i++) {\n                    if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                        break;\n                    }\n                }\n            }\n\n            var MenuBtn = null;\n\n            if (this.$selectTransformBtn) {\n                MenuBtn = this.$selectTransformBtn.data('menuButton');\n            }\n\n            if (allowTransforms) {\n                if (MenuBtn) {\n                    MenuBtn.enable();\n                }\n\n                this.$selectTransformBtn.removeClass('disabled');\n            }\n            else if (this.$selectTransformBtn) {\n                if (MenuBtn) {\n                    MenuBtn.disable();\n                }\n\n                this.$selectTransformBtn.addClass('disabled');\n            }\n\n            this.base();\n        },\n\n        onSelectTransform: function(option) {\n            var transform = $(option).data('transform');\n            this.selectImagesWithTransform(transform);\n        },\n\n        selectImagesWithTransform: function(transform) {\n            // First we must get any missing transform URLs\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n                Craft.AssetSelectorModal.transformUrls[transform] = {};\n            }\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                imageIdsWithMissingUrls = [];\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                var $item = $($selectedElements[i]),\n                    elementId = Craft.getElementInfo($item).id;\n\n                if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                    imageIdsWithMissingUrls.push(elementId);\n                }\n            }\n\n            if (imageIdsWithMissingUrls.length) {\n                this.showFooterSpinner();\n\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, $.proxy(function() {\n                    this.hideFooterSpinner();\n                    this.selectImagesWithTransform(transform);\n                }, this));\n            }\n            else {\n                this._selectedTransform = transform;\n                this.selectElements();\n                this._selectedTransform = null;\n            }\n        },\n\n        fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n            var elementId = imageIdsWithMissingUrls.pop();\n\n            var data = {\n                assetId: elementId,\n                handle: transform\n            };\n\n            Craft.postActionRequest('assets/generate-transform', data, $.proxy(function(response, textStatus) {\n                Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n                if (textStatus === 'success') {\n                    if (response.url) {\n                        Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                    }\n                }\n\n                // More to load?\n                if (imageIdsWithMissingUrls.length) {\n                    this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n                }\n                else {\n                    callback();\n                }\n            }, this));\n        },\n\n        getElementInfo: function($selectedElements) {\n            var info = this.base($selectedElements);\n\n            if (this._selectedTransform) {\n                for (var i = 0; i < info.length; i++) {\n                    var elementId = info[i].id;\n\n                    if (\n                        typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                        Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                    ) {\n                        info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                    }\n                }\n            }\n\n            return info;\n        },\n\n        onSelect: function(elementInfo) {\n            this.settings.onSelect(elementInfo, this._selectedTransform);\n        }\n    },\n    {\n        defaults: {\n            canSelectImageTransforms: false,\n            transforms: []\n        },\n\n        transformUrls: {}\n    });\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend(\n    {\n        remainingSessionTime: null,\n        checkRemainingSessionTimer: null,\n        showLoginModalTimer: null,\n        decrementLogoutWarningInterval: null,\n\n        showingLogoutWarningModal: false,\n        showingLoginModal: false,\n\n        logoutWarningModal: null,\n        loginModal: null,\n\n        $logoutWarningPara: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $loginBtn: null,\n        $loginErrorPara: null,\n\n        submitLoginIfLoggedOut: false,\n\n        /**\n         * Init\n         */\n        init: function() {\n            this.updateRemainingSessionTime(Craft.remainingSessionTime);\n        },\n\n        /**\n         * Sets a timer for the next time to check the auth timeout.\n         */\n        setCheckRemainingSessionTimer: function(seconds) {\n            if (this.checkRemainingSessionTimer) {\n                clearTimeout(this.checkRemainingSessionTimer);\n            }\n\n            this.checkRemainingSessionTimer = setTimeout($.proxy(this, 'checkRemainingSessionTime'), seconds * 1000);\n        },\n\n        /**\n         * Pings the server to see how many seconds are left on the current user session, and handles the response.\n         */\n        checkRemainingSessionTime: function(extendSession) {\n            $.ajax({\n                url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n                type: 'GET',\n                dataType: 'json',\n                complete: $.proxy(function(jqXHR, textStatus) {\n                    if (textStatus === 'success') {\n                        if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                            Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                        }\n\n                        this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                        this.submitLoginIfLoggedOut = false;\n                    }\n                    else {\n                        this.updateRemainingSessionTime(-1);\n                    }\n                }, this)\n            });\n        },\n\n        /**\n         * Updates our record of the auth timeout, and handles it.\n         */\n        updateRemainingSessionTime: function(remainingSessionTime) {\n            this.remainingSessionTime = parseInt(remainingSessionTime);\n\n            // Are we within the warning window?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n                // Is there still time to renew the session?\n                if (this.remainingSessionTime) {\n                    if (!this.showingLogoutWarningModal) {\n                        // Show the warning modal\n                        this.showLogoutWarningModal();\n                    }\n\n                    // Will the session expire before the next checkup?\n                    if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                        if (this.showLoginModalTimer) {\n                            clearTimeout(this.showLoginModalTimer);\n                        }\n\n                        this.showLoginModalTimer = setTimeout($.proxy(this, 'showLoginModal'), this.remainingSessionTime * 1000);\n                    }\n                }\n                else {\n                    if (this.showingLoginModal) {\n                        if (this.submitLoginIfLoggedOut) {\n                            this.submitLogin();\n                        }\n                    }\n                    else {\n                        // Show the login modal\n                        this.showLoginModal();\n                    }\n                }\n\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n            else {\n                // Everything's good!\n                this.hideLogoutWarningModal();\n                this.hideLoginModal();\n\n                // Will be be within the minSafeSessionTime before the next update?\n                if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                    this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n                }\n                else {\n                    this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the logout warning modal.\n         */\n        showLogoutWarningModal: function() {\n            var quickShow;\n\n            if (this.showingLoginModal) {\n                this.hideLoginModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLogoutWarningModal = true;\n\n            if (!this.logoutWarningModal) {\n                var $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"/>').appendTo($form),\n                    $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                    $logoutBtn = $('<div class=\"btn\">' + Craft.t('app', 'Log out now') + '</div>').appendTo($buttons),\n                    $renewSessionBtn = $('<input type=\"submit\" class=\"btn submit\" value=\"' + Craft.t('app', 'Keep me logged in') + '\" />').appendTo($buttons);\n\n                this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n                this.logoutWarningModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                    onFadeIn: function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the renew button\n                            setTimeout(function() {\n                                $renewSessionBtn.trigger('focus');\n                            }, 100);\n                        }\n                    }\n                });\n\n                this.addListener($logoutBtn, 'activate', 'logout');\n                this.addListener($form, 'submit', 'renewSession');\n            }\n\n            if (quickShow) {\n                this.logoutWarningModal.quickShow();\n            }\n            else {\n                this.logoutWarningModal.show();\n            }\n\n            this.updateLogoutWarningMessage();\n\n            this.decrementLogoutWarningInterval = setInterval($.proxy(this, 'decrementLogoutWarning'), 1000);\n        },\n\n        /**\n         * Updates the logout warning message indicating that the session is about to expire.\n         */\n        updateLogoutWarningMessage: function() {\n            this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n                time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n            }));\n\n            this.logoutWarningModal.updateSizeAndPosition();\n        },\n\n        decrementLogoutWarning: function() {\n            if (this.remainingSessionTime > 0) {\n                this.remainingSessionTime--;\n                this.updateLogoutWarningMessage();\n            }\n\n            if (this.remainingSessionTime === 0) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        },\n\n        /**\n         * Hides the logout warning modal.\n         */\n        hideLogoutWarningModal: function(quick) {\n            this.showingLogoutWarningModal = false;\n\n            if (this.logoutWarningModal) {\n                if (quick) {\n                    this.logoutWarningModal.quickHide();\n                }\n                else {\n                    this.logoutWarningModal.hide();\n                }\n\n                if (this.decrementLogoutWarningInterval) {\n                    clearInterval(this.decrementLogoutWarningInterval);\n                }\n            }\n        },\n\n        /**\n         * Shows the login modal.\n         */\n        showLoginModal: function() {\n            var quickShow;\n\n            if (this.showingLogoutWarningModal) {\n                this.hideLogoutWarningModal(true);\n                quickShow = true;\n            }\n            else {\n                quickShow = false;\n            }\n\n            this.showingLoginModal = true;\n\n            if (!this.loginModal) {\n                var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                    $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$loginBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Login') + '\" />').appendTo($buttonContainer);\n                this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.loginModal = new Garnish.Modal($form, {\n                    autoShow: false,\n                    closeOtherModals: false,\n                    hideOnEsc: false,\n                    hideOnShadeClick: false,\n                    shadeClass: 'modal-shade dark loginmodalshade',\n                    onFadeIn: $.proxy(function() {\n                        if (!Garnish.isMobileBrowser(true)) {\n                            // Auto-focus the password input\n                            setTimeout($.proxy(function() {\n                                this.$passwordInput.trigger('focus');\n                            }, this), 100);\n                        }\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($form, 'submit', 'login');\n            }\n\n            if (quickShow) {\n                this.loginModal.quickShow();\n            }\n            else {\n                this.loginModal.show();\n            }\n        },\n\n        /**\n         * Hides the login modal.\n         */\n        hideLoginModal: function(quick) {\n            this.showingLoginModal = false;\n\n            if (this.loginModal) {\n                if (quick) {\n                    this.loginModal.quickHide();\n                }\n                else {\n                    this.loginModal.hide();\n                }\n            }\n        },\n\n        logout: function() {\n            $.get({\n                url: Craft.getActionUrl('users/logout'),\n                dataType: 'json',\n                success: $.proxy(function() {\n                    Craft.redirectTo('');\n                }, this)\n            });\n        },\n\n        renewSession: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            this.hideLogoutWarningModal();\n            this.checkRemainingSessionTime(true);\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$loginBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$loginBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        login: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.validatePassword()) {\n                this.$passwordSpinner.removeClass('hidden');\n                this.clearLoginError();\n\n                if (typeof Craft.csrfTokenValue !== 'undefined') {\n                    // Check the auth status one last time before sending this off,\n                    // in case the user has already logged back in from another window/tab\n                    this.submitLoginIfLoggedOut = true;\n                    this.checkRemainingSessionTime();\n                }\n                else {\n                    this.submitLogin();\n                }\n            }\n        },\n\n        submitLogin: function() {\n            var data = {\n                loginName: Craft.username,\n                password: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/login', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.hideLoginModal();\n                        this.checkRemainingSessionTime();\n                    }\n                    else {\n                        this.showLoginError(response.error);\n                        Garnish.shake(this.loginModal.$container);\n\n                        if (!Garnish.isMobileBrowser(true)) {\n                            this.$passwordInput.trigger('focus');\n                        }\n                    }\n                }\n                else {\n                    this.showLoginError();\n                }\n            }, this));\n        },\n\n        showLoginError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$loginErrorPara.text(error);\n            this.loginModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showLoginError('');\n        }\n    },\n    {\n        checkInterval: 60,\n        minSafeSessionTime: 120\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend(\n    {\n        authManager: null,\n\n        $nav: null,\n        $mainContainer: null,\n        $alerts: null,\n        $crumbs: null,\n        $notificationContainer: null,\n        $main: null,\n        $primaryForm: null,\n        $headerContainer: null,\n        $header: null,\n        $mainContent: null,\n        $details: null,\n        $tabsContainer: null,\n        $tabsList: null,\n        $tabs: null,\n        $overflowTabBtn: null,\n        $overflowTabList: null,\n        $selectedTab: null,\n        selectedTabIndex: null,\n        $sidebarContainer: null,\n        $sidebar: null,\n        $contentContainer: null,\n        $edition: null,\n\n        $confirmUnloadForms: null,\n        $deltaForms: null,\n        $collapsibleTables: null,\n\n        fixedHeader: false,\n\n        enableQueue: true,\n        totalJobs: 0,\n        jobInfo: null,\n        displayedJobInfo: null,\n        displayedJobInfoUnchanged: 1,\n        trackJobProgressTimeout: null,\n        jobProgressIcon: null,\n\n        checkingForUpdates: false,\n        forcingRefreshOnUpdatesCheck: false,\n        includingDetailsOnUpdatesCheck: false,\n        checkForUpdatesCallbacks: null,\n\n        init: function() {\n            // Is this session going to expire?\n            if (Craft.remainingSessionTime !== 0) {\n                this.authManager = new Craft.AuthManager();\n            }\n\n            // Find all the key elements\n            this.$nav = $('#nav');\n            this.$mainContainer = $('#main-container');\n            this.$alerts = $('#alerts');\n            this.$crumbs = $('#crumbs');\n            this.$notificationContainer = $('#notifications');\n            this.$main = $('#main');\n            this.$primaryForm = $('#main-form');\n            this.$headerContainer = $('#header-container');\n            this.$header = $('#header');\n            this.$mainContent = $('#main-content');\n            this.$details = $('#details');\n            this.$sidebarContainer = $('#sidebar-container');\n            this.$sidebar = $('#sidebar');\n            this.$contentContainer = $('#content-container');\n            this.$collapsibleTables = $('table.collapsible');\n            this.$edition = $('#edition');\n\n            this.updateSidebarMenuLabel();\n\n            if (this.$header.length) {\n                this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n                this.updateFixedHeader();\n            }\n\n            Garnish.$doc.ready($.proxy(function() {\n                // Update responsive tables on window resize\n                this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n                this.handleWindowResize();\n\n                // Fade the notification out two seconds after page load\n                var $errorNotifications = this.$notificationContainer.children('.error'),\n                    $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n                $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n                $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n                // Wait a frame before initializing any confirm-unload forms,\n                // so other JS that runs on ready() has a chance to initialize\n                Garnish.requestAnimationFrame($.proxy(this, 'initSpecialForms'));\n            }, this));\n\n            // Alerts\n            if (this.$alerts.length) {\n                this.initAlerts();\n            }\n\n            // Toggles\n            this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n            this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n            // Does this page have a primary form?\n            if (!this.$primaryForm.length) {\n                this.$primaryForm = $('form[data-saveshortcut]:first');\n            }\n\n            // Does the primary form support the save shortcut?\n            if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n                let shortcuts = [];\n                let actions = this.$primaryForm.data('actions');\n                if (typeof actions === 'undefined') {\n                    shortcuts.push([\n                        {keyCode: Garnish.S_KEY, ctrl: true},\n                        {redirect: this.$primaryForm.data('saveshortcut-redirect')}\n                    ]);\n                } else {\n                    for (let i = 0; i < actions.length; i++) {\n                        let action = actions[i];\n                        if (!action.shortcut) {\n                            continue;\n                        }\n                        shortcuts.push([\n                            {\n                                keyCode: Garnish.S_KEY,\n                                ctrl: true,\n                                shift: !!action.shift,\n                            },\n                            {\n                                action: action.action,\n                                redirect: action.redirect,\n                                confirm: action.confirm,\n                                params: action.params,\n                                data: action.data,\n                            }\n                        ]);\n                    }\n                }\n                for (let i = 0; i < shortcuts.length; i++) {\n                    Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                        this.submitPrimaryForm(shortcuts[i][1]);\n                    });\n                }\n            }\n\n            this.initTabs();\n\n            if (this.$edition.hasClass('hot')) {\n                this.addListener(this.$edition, 'click', function() {\n                    document.location.href = Craft.getUrl('plugin-store/upgrade-craft');\n                });\n            }\n\n            if ($.isTouchCapable()) {\n                this.$mainContainer.on('focus', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputFocus'));\n                this.$mainContainer.on('blur', 'input, textarea, .focusable-input', $.proxy(this, '_handleInputBlur'));\n            }\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a').each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n\n            // Listen for Option/ALT presses\n            this.addListener(Garnish.$win, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.addClass('altkeydown');\n                }\n            });\n            this.addListener(Garnish.$win, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ALT_KEY) {\n                    Garnish.$bod.removeClass('altkeydown');\n                }\n            });\n        },\n\n        initSpecialForms: function() {\n            // Look for forms that we should watch for changes on\n            this.$confirmUnloadForms = $('form[data-confirm-unload]');\n            this.$deltaForms = $('form[data-delta]');\n\n            if (!this.$confirmUnloadForms.length) {\n                return;\n            }\n\n            var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n            var $form, serialized;\n\n            for (var i = 0; i < $forms.length; i++) {\n                $form = $forms.eq(i);\n                if (!$form.data('initialSerializedValue')) {\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    $form.data('initialSerializedValue', serialized);\n                }\n                this.addListener($form, 'submit', function(ev) {\n                    if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                        this.removeListener(Garnish.$win, 'beforeunload');\n                    }\n                    if (Garnish.hasAttr($form, 'data-delta')) {\n                        ev.preventDefault();\n                        var serialized;\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                        Craft.createForm(data)\n                            .appendTo(Garnish.$bod)\n                            .submit();\n                    }\n                });\n            }\n\n            this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n                var confirmUnload = false;\n                var $form, serialized;\n                if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                    confirmUnload = true;\n                } else {\n                    for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                        $form = this.$confirmUnloadForms.eq(i);\n                        if (typeof $form.data('serializer') === 'function') {\n                            serialized = $form.data('serializer')();\n                        } else {\n                            serialized = $form.serialize();\n                        }\n                        if ($form.data('initialSerializedValue') !== serialized) {\n                            confirmUnload = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (confirmUnload) {\n                    var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                    if (ev) {\n                        ev.originalEvent.returnValue = message;\n                    }\n                    else {\n                        window.event.returnValue = message;\n                    }\n\n                    return message;\n                }\n            });\n        },\n\n        _handleInputFocus: function() {\n            this.updateFixedHeader();\n        },\n\n        _handleInputBlur: function() {\n            this.updateFixedHeader();\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         */\n        submitPrimaryForm: function(options) {\n            // Give other stuff on the page a chance to prepare\n            this.trigger('beforeSaveShortcut');\n\n            if (typeof options !== 'object' || !$.isPlainObject(options)) {\n                options = {};\n            }\n\n            if (!options.redirect) {\n                options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n            }\n\n            if (!options.data) {\n                options.data = {};\n            }\n            options.data.saveShortcut = true;\n\n            Craft.submitForm(this.$primaryForm, options);\n        },\n\n        updateSidebarMenuLabel: function() {\n            var $item = this.$sidebar.find('a.sel:first');\n            var $label = $item.children('.label');\n            $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n            Garnish.$bod.removeClass('showing-sidebar');\n        },\n\n        toggleNav: function() {\n            Garnish.$bod.toggleClass('showing-nav');\n        },\n\n        toggleSidebar: function() {\n            Garnish.$bod.toggleClass('showing-sidebar');\n        },\n\n        initTabs: function() {\n            // Clear out all our old info in case the tabs were just replaced\n            this.$tabsList = this.$tabs = this.$overflowTabBtn = this.$overflowTabList = this.$selectedTab =\n                this.selectedTabIndex = null;\n\n            this.$tabsContainer = $('#tabs');\n            if (!this.$tabsContainer.length) {\n                this.$tabsContainer = null;\n                return;\n            }\n\n            this.$tabsList = this.$tabsContainer.find('> ul');\n            this.$tabs = this.$tabsList.find('> li');\n            this.$overflowTabBtn = $('#overflow-tab-btn');\n            if (!this.$overflowTabBtn.data('menubtn')) {\n                new Garnish.MenuBtn(this.$overflowTabBtn);\n            }\n            this.$overflowTabList = this.$overflowTabBtn.data('menubtn').menu.$container.find('> ul');\n            var i, $tab, $a, href;\n\n            for (i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i);\n\n                // Does it link to an anchor?\n                $a = $tab.children('a');\n                href = $a.attr('href');\n                if (href && href.charAt(0) === '#') {\n                    this.addListener($a, 'click', function(ev) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    });\n\n                    if (encodeURIComponent(href.substr(1)) === document.location.hash.substr(1)) {\n                        this.selectTab($a);\n                    }\n                }\n\n                if (!this.$selectedTab && $a.hasClass('sel')) {\n                    this._selectTab($a, i);\n                }\n            }\n        },\n\n        selectTab: function(tab) {\n            var $tab = $(tab);\n\n            if (this.$selectedTab) {\n                if (this.$selectedTab.get(0) === $tab.get(0)) {\n                    return;\n                }\n                this.deselectTab();\n            }\n\n            $tab.addClass('sel');\n            var href = $tab.attr('href')\n            $(href).removeClass('hidden');\n            if (typeof history !== 'undefined') {\n                history.replaceState(undefined, undefined, href);\n            }\n            this._selectTab($tab, this.$tabs.index($tab.parent()));\n            this.updateTabs();\n            this.$overflowTabBtn.data('menubtn').menu.hide();\n        },\n\n        _selectTab: function($tab, index) {\n            this.$selectedTab = $tab;\n            this.selectedTabIndex = index;\n            if (index === 0) {\n                $('#content').addClass('square');\n            } else {\n                $('#content').removeClass('square');\n            }\n\n            Garnish.$win.trigger('resize');\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n        },\n\n        deselectTab: function() {\n            if (!this.$selectedTab) {\n                return;\n            }\n\n            this.$selectedTab.removeClass('sel');\n            if (this.$selectedTab.attr('href').charAt(0) === '#') {\n                $(this.$selectedTab.attr('href')).addClass('hidden');\n            }\n            this._selectTab(null, null);\n        },\n\n        handleWindowResize: function() {\n            this.updateTabs();\n            this.updateResponsiveTables();\n        },\n\n        updateTabs: function() {\n            if (!this.$tabsContainer) {\n                return;\n            }\n\n            var maxWidth = Math.floor(this.$tabsContainer.width()) - 40;\n            var totalWidth = 0;\n            var showOverflowMenu = false;\n            var tabMargin = Garnish.$bod.width() >= 768 ? -12 : -7;\n            var $tab;\n\n            // Start with the selected tab, because that needs to be visible\n            if (this.$selectedTab) {\n                this.$selectedTab.parent('li').appendTo(this.$tabsList);\n                totalWidth = Math.ceil(this.$selectedTab.parent('li').width());\n            }\n\n            for (var i = 0; i < this.$tabs.length; i++) {\n                $tab = this.$tabs.eq(i).appendTo(this.$tabsList);\n                if (i !== this.selectedTabIndex) {\n                    totalWidth += Math.ceil($tab.width());\n                    // account for the negative margin\n                    if (i !== 0 || this.$selectedTab) {\n                        totalWidth += tabMargin;\n                    }\n                }\n\n                if (i === this.selectedTabIndex || totalWidth <= maxWidth) {\n                    $tab.find('> a').removeAttr('role');\n                } else {\n                    $tab.appendTo(this.$overflowTabList).find('> a').attr('role', 'option');\n                    showOverflowMenu = true;\n                }\n            }\n\n            if (showOverflowMenu) {\n                this.$overflowTabBtn.removeClass('hidden');\n            } else {\n                this.$overflowTabBtn.addClass('hidden');\n            }\n        },\n\n        updateResponsiveTables: function() {\n            for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n                this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n                this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n                this.updateResponsiveTables._check = false;\n\n                if (this.updateResponsiveTables._containerWidth > 0) {\n                    // Is this the first time we've checked this table?\n                    if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                        this.updateResponsiveTables._check = true;\n                    }\n                    else {\n                        this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                        // Getting wider?\n                        if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                            if (this.updateResponsiveTables._isCollapsed) {\n                                this.updateResponsiveTables._$table.removeClass('collapsed');\n                                this.updateResponsiveTables._check = true;\n                            }\n                        }\n                        else if (!this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._check = true;\n                        }\n                    }\n\n                    // Are we checking the table width?\n                    if (this.updateResponsiveTables._check) {\n                        if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                            this.updateResponsiveTables._$table.addClass('collapsed');\n                        }\n                    }\n\n                    // Remember the container width for next time\n                    this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n                }\n            }\n        },\n\n        updateFixedHeader: function() {\n            // Have we scrolled passed the top of #main?\n            if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n                if (!this.fixedHeader) {\n                    var headerHeight = this.$headerContainer.height();\n\n                    // Hard-set the minimum content container height\n                    this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                    // Hard-set the header container height\n                    this.$headerContainer.height(headerHeight);\n                    Garnish.$bod.addClass('fixed-header');\n\n                    // Fix the sidebar and details pane positions if they are taller than #content-container\n                    var contentHeight = this.$contentContainer.outerHeight();\n                    var $detailsHeight = this.$details.outerHeight();\n                    var css = {\n                        top: headerHeight + 'px',\n                        'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                    };\n                    this.$sidebar.addClass('fixed').css(css);\n                    this.$details.addClass('fixed').css(css);\n                    this.fixedHeader = true;\n                }\n            }\n            else if (this.fixedHeader) {\n                this.$headerContainer.height('auto');\n                Garnish.$bod.removeClass('fixed-header');\n                this.$contentContainer.css('min-height', '');\n                this.$sidebar.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.$details.removeClass('fixed').css({\n                    top: '',\n                    'max-height': ''\n                });\n                this.fixedHeader = false;\n            }\n        },\n\n        /**\n         * Dispays a notification.\n         *\n         * @param {string} type\n         * @param {string} message\n         */\n        displayNotification: function(type, message) {\n            var notificationDuration = Craft.CP.notificationDuration;\n\n            if (type === 'error') {\n                notificationDuration *= 2;\n            }\n\n            var $notification = $('<div class=\"notification ' + type + '\">' + message + '</div>')\n                .appendTo(this.$notificationContainer);\n\n            var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n            $notification\n                .hide()\n                .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n                .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n                .delay(notificationDuration)\n                .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                    complete: function() {\n                        $notification.remove();\n                    }\n                });\n\n            this.trigger('displayNotification', {\n                notificationType: type,\n                message: message\n            });\n        },\n\n        /**\n         * Displays a notice.\n         *\n         * @param {string} message\n         */\n        displayNotice: function(message) {\n            this.displayNotification('notice', message);\n        },\n\n        /**\n         * Displays an error.\n         *\n         * @param {string} message\n         */\n        displayError: function(message) {\n            if (!message) {\n                message = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.displayNotification('error', message);\n        },\n\n        fetchAlerts: function() {\n            var data = {\n                path: Craft.path\n            };\n\n            Craft.queueActionRequest('app/get-cp-alerts', data, $.proxy(this, 'displayAlerts'));\n        },\n\n        displayAlerts: function(alerts) {\n            this.$alerts.remove();\n\n            if (Garnish.isArray(alerts) && alerts.length) {\n                this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n                for (var i = 0; i < alerts.length; i++) {\n                    $('<li>' + alerts[i] + '</li>').appendTo(this.$alerts);\n                }\n\n                var height = this.$alerts.outerHeight();\n                this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n                this.initAlerts();\n            }\n        },\n\n        initAlerts: function() {\n            // Are there any shunnable alerts?\n            var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n            for (var i = 0; i < $shunnableAlerts.length; i++) {\n                this.addListener($shunnableAlerts[i], 'click', $.proxy(function(ev) {\n                    ev.preventDefault();\n\n                    var $link = $(ev.currentTarget);\n\n                    var data = {\n                        message: $link.prop('className').substr(5)\n                    };\n\n                    Craft.queueActionRequest('app/shun-cp-alert', data, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            if (response.success) {\n                                $link.parent().remove();\n                            }\n                            else {\n                                this.displayError(response.error);\n                            }\n                        }\n                    }, this));\n                }, this));\n            }\n        },\n\n        checkForUpdates: function(forceRefresh, includeDetails, callback) {\n            // Make 'includeDetails' optional\n            if (typeof includeDetails === 'function') {\n                callback = includeDetails;\n                includeDetails = false;\n            }\n\n            // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n            // then just set a new callback that re-checks for updates when the current one is done.\n            if (this.checkingForUpdates && (\n                (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n                (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n            )) {\n                var realCallback = callback;\n\n                callback = function() {\n                    this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n                }.bind(this);\n            }\n\n            // Callback function?\n            if (typeof callback === 'function') {\n                if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                    this.checkForUpdatesCallbacks = [];\n                }\n\n                this.checkForUpdatesCallbacks.push(callback);\n            }\n\n            if (!this.checkingForUpdates) {\n                this.checkingForUpdates = true;\n                this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n                this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n                this._checkForUpdates(forceRefresh, includeDetails)\n                    .then(function(info) {\n                        this.updateUtilitiesBadge();\n                        this.checkingForUpdates = false;\n\n                        if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                            var callbacks = this.checkForUpdatesCallbacks;\n                            this.checkForUpdatesCallbacks = null;\n\n                            for (var i = 0; i < callbacks.length; i++) {\n                                callbacks[i](info);\n                            }\n                        }\n\n                        this.trigger('checkForUpdates', {\n                            updateInfo: info\n                        });\n                    }.bind(this));\n            }\n        },\n\n        _checkForUpdates: function(forceRefresh, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                if (!forceRefresh) {\n                    this._checkForCachedUpdates(includeDetails)\n                        .then(function(info) {\n                            if (info.cached !== false) {\n                                resolve(info);\n                            }\n\n                            this._getUpdates(includeDetails)\n                                .then(function(info) {\n                                    resolve(info);\n                                });\n                        }.bind(this));\n                } else {\n                    this._getUpdates(includeDetails)\n                        .then(function(info) {\n                            resolve(info);\n                        });\n                }\n            }.bind(this));\n        },\n\n        _checkForCachedUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                var data = {\n                    onlyIfCached: true,\n                    includeDetails: includeDetails,\n                };\n                Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        resolve({ cached: false });\n                    }\n                });\n            });\n        },\n\n        _getUpdates: function(includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.sendApiRequest('GET', 'updates')\n                    .then(function(updates) {\n                        this._cacheUpdates(updates, includeDetails).then(resolve);\n                    }.bind(this))\n                    .catch(function(e) {\n                        this._cacheUpdates({}).then(resolve);\n                    }.bind(this));\n            }.bind(this));\n        },\n\n        _cacheUpdates: function(updates, includeDetails) {\n            return new Promise(function(resolve, reject) {\n                Craft.postActionRequest('app/cache-updates', {\n                    updates: updates,\n                    includeDetails: includeDetails,\n                }, function(info, textStatus) {\n                    if (textStatus === 'success') {\n                        resolve(info);\n                    } else {\n                        reject();\n                    }\n                }, {\n                    contentType: 'json'\n                });\n            });\n        },\n\n        updateUtilitiesBadge: function() {\n            var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n            // Ignore if there is no (non-selected) Utilities nav item\n            if (!$utilitiesLink.length) {\n                return;\n            }\n\n            Craft.queueActionRequest('app/get-utilities-badge-count', $.proxy(function(response) {\n                // Get the existing utility nav badge, if any\n                var $badge = $utilitiesLink.children('.badge');\n\n                if (response.badgeCount) {\n                    if (!$badge.length) {\n                        $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                    }\n                    $badge.text(response.badgeCount);\n                } else if ($badge.length) {\n                    $badge.remove();\n                }\n            }, this));\n        },\n\n        runQueue: function() {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            if (Craft.runQueueAutomatically) {\n                Craft.queueActionRequest('queue/run', $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.trackJobProgress(false, true);\n                    }\n                }, this));\n            }\n            else {\n                this.trackJobProgress(false, true);\n            }\n        },\n\n        trackJobProgress: function(delay, force) {\n            if (force && this.trackJobProgressTimeout) {\n                clearTimeout(this.trackJobProgressTimeout);\n                this.trackJobProgressTimeout = null;\n            }\n\n            // Ignore if we're already tracking jobs, or the queue is disabled\n            if (this.trackJobProgressTimeout || !this.enableQueue) {\n                return;\n            }\n\n            if (delay === true) {\n                // Determine the delay based on how long the displayed job info has remained unchanged\n                var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n                this.trackJobProgressTimeout = setTimeout($.proxy(this, '_trackJobProgressInternal'), timeout);\n            } else {\n                this._trackJobProgressInternal();\n            }\n        },\n\n        _trackJobProgressInternal: function() {\n            Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.trackJobProgressTimeout = null;\n                    this.totalJobs = response.total;\n                    this.setJobInfo(response.jobs);\n\n                    if (this.jobInfo.length) {\n                        // Check again after a delay\n                        this.trackJobProgress(true);\n                    }\n                }\n            }, this));\n        },\n\n        setJobInfo: function(jobInfo) {\n            if (!this.enableQueue) {\n                return;\n            }\n\n            this.jobInfo = jobInfo;\n\n            // Update the displayed job info\n            var oldInfo = this.displayedJobInfo;\n            this.displayedJobInfo = this.getDisplayedJobInfo();\n\n            // Same old same old?\n            if (\n                oldInfo &&\n                this.displayedJobInfo &&\n                oldInfo.id === this.displayedJobInfo.id &&\n                oldInfo.progress === this.displayedJobInfo.progress &&\n                oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n                oldInfo.status === this.displayedJobInfo.status\n            ) {\n                this.displayedJobInfoUnchanged++;\n            } else {\n                // Reset the counter\n                this.displayedJobInfoUnchanged = 1;\n            }\n\n            this.updateJobIcon();\n\n            // Fire a setJobInfo event\n            this.trigger('setJobInfo');\n        },\n\n        /**\n         * Returns info for the job that should be displayed in the CP sidebar\n         */\n        getDisplayedJobInfo: function() {\n            if (!this.enableQueue) {\n                return null;\n            }\n\n            // Set the status preference order\n            var statuses = [\n                Craft.CP.JOB_STATUS_RESERVED,\n                Craft.CP.JOB_STATUS_FAILED,\n                Craft.CP.JOB_STATUS_WAITING\n            ];\n\n            for (var i = 0; i < statuses.length; i++) {\n                for (var j = 0; j < this.jobInfo.length; j++) {\n                    if (this.jobInfo[j].status === statuses[i]) {\n                        return this.jobInfo[j];\n                    }\n                }\n            }\n        },\n\n        updateJobIcon: function() {\n            if (!this.enableQueue || !this.$nav.length) {\n                return;\n            }\n\n            if (this.displayedJobInfo) {\n                if (!this.jobProgressIcon) {\n                    this.jobProgressIcon = new JobProgressIcon();\n                }\n\n                if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                    this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n                }\n                else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                    this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n                }\n            }\n            else {\n                if (this.jobProgressIcon) {\n                    this.jobProgressIcon.hideFailMode();\n                    this.jobProgressIcon.complete();\n                    delete this.jobProgressIcon;\n                }\n            }\n        },\n\n        /**\n         * Returns the active site for the control panel\n         *\n         * @return {number}\n         */\n        getSiteId: function() {\n            // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n            let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n            if (typeof siteId !== 'undefined') {\n                Craft.removeLocalStorage('BaseElementIndex.siteId');\n                this.setSiteId(siteId);\n                return siteId;\n            }\n            return Craft.getCookie('siteId');\n        },\n\n        /**\n         * Sets the active site for the control panel\n         * @param {number} siteId\n         */\n        setSiteId: function(siteId) {\n            Craft.setCookie('siteId', siteId, {\n                maxAge: 31536000 // 1 year\n            });\n        }\n    },\n    {\n        //maxWidth: 1051, //1024,\n        notificationDuration: 2000,\n\n        JOB_STATUS_WAITING: 1,\n        JOB_STATUS_RESERVED: 2,\n        JOB_STATUS_DONE: 3,\n        JOB_STATUS_FAILED: 4\n    });\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend(\n    {\n        $li: null,\n        $a: null,\n        $label: null,\n        $progressLabel: null,\n\n        progress: null,\n        failMode: false,\n\n        _canvasSupported: null,\n\n        _$bgCanvas: null,\n        _$staticCanvas: null,\n        _$hoverCanvas: null,\n        _$failCanvas: null,\n\n        _staticCtx: null,\n        _hoverCtx: null,\n        _canvasSize: null,\n        _arcPos: null,\n        _arcRadius: null,\n        _lineWidth: null,\n\n        _arcStartPos: 0,\n        _arcEndPos: 0,\n        _arcStartStepSize: null,\n        _arcEndStepSize: null,\n        _arcStep: null,\n        _arcStepTimeout: null,\n        _arcAnimateCallback: null,\n\n        _progressBar: null,\n\n        init: function() {\n            this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n            this.$a = $('<a/>', {\n                id: 'job-icon',\n                href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n            }).appendTo(this.$li);\n            this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n            var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n            this.$label = $('<span/>').appendTo($labelContainer);\n            this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n            this._canvasSupported = !!(document.createElement('canvas').getContext);\n\n            if (this._canvasSupported) {\n                var m = (window.devicePixelRatio > 1 ? 2 : 1);\n                this._canvasSize = 18 * m;\n                this._arcPos = this._canvasSize / 2;\n                this._arcRadius = 7 * m;\n                this._lineWidth = 3 * m;\n\n                this._$bgCanvas = this._createCanvas('bg', '#61666b');\n                this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n                this._$hoverCanvas = this._createCanvas('hover', '#fff');\n                this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n                this._staticCtx = this._$staticCanvas[0].getContext('2d');\n                this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n                this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n                this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n            }\n            else {\n                this._progressBar = new Craft.ProgressBar(this.$canvasContainer);\n                this._progressBar.showProgressBar();\n            }\n        },\n\n        setDescription: function(description, progressLabel) {\n            this.$a.attr('title', description);\n            this.$label.text(description);\n            if (progressLabel) {\n                this.$progressLabel.text(progressLabel).show();\n            } else {\n                this.$progressLabel.hide();\n            }\n        },\n\n        setProgress: function(progress) {\n            if (this._canvasSupported) {\n                if (progress == 0) {\n                    this._$staticCanvas.hide();\n                    this._$hoverCanvas.hide();\n                } else {\n                    this._$staticCanvas.show();\n                    this._$hoverCanvas.show();\n                    if (this.progress && progress > this.progress) {\n                        this._animateArc(0, progress / 100);\n                    }\n                    else {\n                        this._setArc(0, progress / 100);\n                    }\n                }\n            }\n            else {\n                this._progressBar.setProgressPercentage(progress);\n            }\n\n            this.progress = progress;\n        },\n\n        complete: function() {\n            if (this._canvasSupported) {\n                this._animateArc(0, 1, $.proxy(function() {\n                    this._$bgCanvas.velocity('fadeOut');\n\n                    this._animateArc(1, 1, $.proxy(function() {\n                        this.$a.remove();\n                        this.destroy();\n                    }, this));\n                }, this));\n            }\n            else {\n                this._progressBar.setProgressPercentage(100);\n                this.$a.velocity('fadeOut');\n            }\n        },\n\n        showFailMode: function(message) {\n            if (this.failMode) {\n                return;\n            }\n\n            this.failMode = true;\n            this.progress = null;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.hide();\n                this._$staticCanvas.hide();\n                this._$hoverCanvas.hide();\n                this._$failCanvas.show();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '#da5a47');\n                this._progressBar.$innerProgressBar.css('background-color', '#da5a47');\n                this._progressBar.setProgressPercentage(50);\n            }\n\n            this.setDescription(message);\n        },\n\n        hideFailMode: function() {\n            if (!this.failMode) {\n                return;\n            }\n\n            this.failMode = false;\n\n            if (this._canvasSupported) {\n                this._$bgCanvas.show();\n                this._$staticCanvas.show();\n                this._$hoverCanvas.show();\n                this._$failCanvas.hide();\n            }\n            else {\n                this._progressBar.$progressBar.css('border-color', '');\n                this._progressBar.$innerProgressBar.css('background-color', '');\n                this._progressBar.setProgressPercentage(50);\n            }\n        },\n\n        _createCanvas: function(id, color) {\n            var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n                ctx = $canvas[0].getContext('2d');\n\n            ctx.strokeStyle = color;\n            ctx.lineWidth = this._lineWidth;\n            ctx.lineCap = 'round';\n            return $canvas;\n        },\n\n        _setArc: function(startPos, endPos) {\n            this._arcStartPos = startPos;\n            this._arcEndPos = endPos;\n\n            this._drawArc(this._staticCtx, startPos, endPos);\n            this._drawArc(this._hoverCtx, startPos, endPos);\n        },\n\n        _drawArc: function(ctx, startPos, endPos) {\n            ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n            ctx.beginPath();\n            ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        _animateArc: function(targetStartPos, targetEndPos, callback) {\n            if (this._arcStepTimeout) {\n                clearTimeout(this._arcStepTimeout);\n            }\n\n            this._arcStep = 0;\n            this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n            this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n            this._arcAnimateCallback = callback;\n            this._takeNextArcStep();\n        },\n\n        _takeNextArcStep: function() {\n            this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n            this._arcStep++;\n\n            if (this._arcStep < 10) {\n                this._arcStepTimeout = setTimeout($.proxy(this, '_takeNextArcStep'), 50);\n            }\n            else if (this._arcAnimateCallback) {\n                this._arcAnimateCallback();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend(\n    {\n        editableGroups: null,\n        $newCategoryBtnGroup: null,\n        $newCategoryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible groups the user has permission to create new categories in\n            this.editableGroups = [];\n\n            for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n                var group = Craft.editableCategoryGroups[i];\n\n                if (this.getSourceByKey('group:' + group.uid)) {\n                    this.editableGroups.push(group);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific category group in the URL?\n            if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultGroupHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Category button\n            // ---------------------------------------------------------------------\n\n            if (this.editableGroups.length) {\n                // Remove the old button, if there is one\n                if (this.$newCategoryBtnGroup) {\n                    this.$newCategoryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a group that they have permission to create categories in\n                var selectedGroup;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        if (this.editableGroups[i].handle === selectedSourceHandle) {\n                            selectedGroup = this.editableGroups[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n                // Otherwise only show a menu button\n                if (selectedGroup) {\n                    href = this._getGroupTriggerHref(selectedGroup);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                    this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                            this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableGroups.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newCategoryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newCategoryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New category') + '</div>').appendTo(this.$newCategoryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableGroups.length; i++) {\n                        var group = this.editableGroups[i];\n\n                        if (this.settings.context === 'index' || group !== selectedGroup) {\n                            href = this._getGroupTriggerHref(group);\n                            label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newCategoryBtnGroup);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'categories';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getGroupTriggerHref: function(group) {\n            if (this.settings.context === 'index') {\n                var uri = 'categories/' + group.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + group.id + '\"';\n            }\n        },\n\n        _openCreateCategoryModal: function(groupId) {\n            if (this.$newCategoryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the group\n            var group;\n\n            for (var i = 0; i < this.editableGroups.length; i++) {\n                if (this.editableGroups[i].id == groupId) {\n                    group = this.editableGroups[i];\n                    break;\n                }\n            }\n\n            if (!group) {\n                return;\n            }\n\n            this.$newCategoryBtn.addClass('inactive');\n            var newCategoryBtnText = this.$newCategoryBtn.text();\n            this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newCategoryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    groupId: groupId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newCategoryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right group is selected\n                    var groupSourceKey = 'group:' + group.uid;\n\n                    if (this.sourceKey !== groupSourceKey) {\n                        this.selectSourceByKey(groupSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        setSettings: function() {\n            this.base.apply(this, arguments);\n            this.settings.sortable = false;\n        },\n\n        getModalSettings: function() {\n            var settings = this.base();\n            settings.hideOnSelect = false;\n            return settings;\n        },\n\n        getElements: function() {\n            return this.$elementsContainer.find('.element');\n        },\n\n        onModalSelect: function(elements) {\n            // Disable the modal\n            this.modal.disable();\n            this.modal.disableCancelBtn();\n            this.modal.disableSelectBtn();\n            this.modal.showFooterSpinner();\n\n            // Get the new category HTML\n            var selectedCategoryIds = this.getSelectedElementIds();\n\n            for (var i = 0; i < elements.length; i++) {\n                selectedCategoryIds.push(elements[i].id);\n            }\n\n            var data = {\n                categoryIds: selectedCategoryIds,\n                siteId: elements[0].siteId,\n                id: this.settings.id,\n                name: this.settings.name,\n                branchLimit: this.settings.branchLimit,\n                selectionLabel: this.settings.selectionLabel\n            };\n\n            Craft.postActionRequest('elements/get-categories-input-html', data, $.proxy(function(response, textStatus) {\n                this.modal.enable();\n                this.modal.enableCancelBtn();\n                this.modal.enableSelectBtn();\n                this.modal.hideFooterSpinner();\n\n                if (textStatus === 'success') {\n                    var $newInput = $(response.html),\n                        $newElementsContainer = $newInput.children('.elements');\n\n                    this.$elementsContainer.replaceWith($newElementsContainer);\n                    this.$elementsContainer = $newElementsContainer;\n                    this.resetElements();\n\n                    var filteredElements = [];\n\n                    for (var i = 0; i < elements.length; i++) {\n                        var element = elements[i],\n                            $element = this.getElementById(element.id);\n\n                        if ($element) {\n                            this.animateElementIntoPlace(element.$element, $element);\n                            filteredElements.push(element);\n                        }\n                    }\n\n                    this.updateDisabledElementsInModal();\n                    this.modal.hide();\n                    this.onSelectElements(filteredElements);\n                }\n            }, this));\n        },\n\n        removeElement: function($element) {\n            // Find any descendants this category might have\n            var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n            // Remove our record of them all at once\n            this.removeElements($allCategories);\n\n            // Animate them away one at a time\n            for (var i = 0; i < $allCategories.length; i++) {\n                this._animateCategoryAway($allCategories, i);\n            }\n        },\n\n        _animateCategoryAway: function($allCategories, i) {\n            var callback;\n\n            // Is this the last one?\n            if (i === $allCategories.length - 1) {\n                callback = $.proxy(function() {\n                    var $li = $allCategories.first().parent().parent(),\n                        $ul = $li.parent();\n\n                    if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                        $li.remove();\n                    }\n                    else {\n                        $ul.remove();\n                    }\n                }, this);\n            }\n\n            var func = $.proxy(function() {\n                this.animateElementAway($allCategories.eq(i), callback);\n            }, this);\n\n            if (i === 0) {\n                func();\n            }\n            else {\n                setTimeout(func, 100 * i);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend(\n    {\n        columns: null,\n        rows: null,\n\n        init: function(data) {\n            let columns = data.columns;\n            let rows = data.rows;\n\n            rows.forEach($.proxy(function(d) {\n                $.each(d, function(cellIndex) {\n                    var column = columns[cellIndex];\n\n                    var parseTime;\n\n                    switch (column.type) {\n                        case 'date':\n                            parseTime = d3.timeParse(\"%Y-%m-%d\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'datetime':\n                            parseTime = d3.timeParse(\"%Y-%m-%d %H:00:00\");\n                            d[cellIndex] = parseTime(d[cellIndex]);\n                            break;\n\n                        case 'percent':\n                            d[cellIndex] = d[cellIndex] / 100;\n                            break;\n\n                        case 'number':\n                            d[cellIndex] = +d[cellIndex];\n                            break;\n\n                        default:\n                        // do nothing\n                    }\n                });\n            }, this));\n\n            this.columns = columns;\n            this.rows = rows;\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend(\n    {\n        $container: null,\n        $tip: null,\n\n        init: function($container) {\n            this.$container = $container;\n\n            this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n            this.hide();\n        },\n\n        setContent: function(html) {\n            this.$tip.html(html);\n        },\n\n        setPosition: function(position) {\n            this.$tip.css(\"left\", position.left + \"px\");\n            this.$tip.css(\"top\", position.top + \"px\");\n        },\n\n        show: function() {\n            this.$tip.css(\"display\", 'block');\n        },\n\n        hide: function() {\n            this.$tip.css(\"display\", 'none');\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend(\n    {\n        $container: null,\n        $chart: null,\n\n        chartBaseClass: 'cp-chart',\n        dataTable: null,\n\n        formatLocale: null,\n        timeFormatLocale: null,\n        orientation: null,\n\n        svg: null,\n        width: null,\n        height: null,\n\n        init: function(container, settings) {\n            this.$container = container;\n\n            this.setSettings(Craft.charts.BaseChart.defaults);\n            this.setSettings(settings);\n\n            var globalSettings = {\n                formats: window.d3Formats,\n                formatLocaleDefinition: window.d3FormatLocaleDefinition,\n                timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n            };\n\n            this.setSettings(globalSettings);\n\n            d3.select(window).on('resize', $.proxy(function() {\n                this.resize();\n            }, this));\n        },\n\n        setSettings: function(settings, defaults) {\n            var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n            this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n        },\n\n        draw: function(dataTable, settings) {\n            // Settings and chart attributes\n\n            this.setSettings(settings);\n\n            this.dataTable = dataTable;\n            this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n            this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n            this.orientation = this.settings.orientation;\n\n\n            // Set (or reset) the chart element\n\n            if (this.$chart) {\n                this.$chart.remove();\n            }\n\n            var className = this.chartBaseClass;\n\n            if (this.settings.chartClass) {\n                className += ' ' + this.settings.chartClass;\n            }\n\n            this.$chart = $('<div class=\"' + className + '\" />').appendTo(this.$container);\n        },\n\n        resize: function() {\n            this.draw(this.dataTable, this.settings);\n        },\n\n        onAfterDrawTicks: function() {\n            // White border for ticks' text\n            $('.tick', this.$chart).each(function(tickKey, tick) {\n                var $tickText = $('text', tick);\n\n                var $clone = $tickText.clone();\n                $clone.appendTo(tick);\n\n                $tickText.attr('stroke', '#ffffff');\n                $tickText.attr('stroke-width', 3);\n            });\n        }\n    },\n    {\n        defaults: {\n            formatLocaleDefinition: null,\n            timeFormatLocaleDefinition: null,\n            formats: {\n                numberFormat: ',.2f',\n                percentFormat: ',.2%',\n                currencyFormat: '$,.2f',\n                shortDateFormats: {\n                    day: \"%-m/%-d\",\n                    month: \"%-m/%y\",\n                    year: \"%Y\"\n                }\n            },\n            margin: {top: 0, right: 0, bottom: 0, left: 0},\n            chartClass: null,\n            colors: [\"#0594D1\", \"#DE3800\", \"#FF9A00\", \"#009802\", \"#9B009B\"]\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend(\n    {\n        tip: null,\n        drawingArea: null,\n\n        init: function(container, settings) {\n            this.base(container, Craft.charts.Area.defaults);\n\n            this.setSettings(settings);\n        },\n\n        draw: function(dataTable, settings) {\n            this.base(dataTable, settings);\n\n            if (this.tip) {\n                this.tip = null;\n            }\n\n            var margin = this.getChartMargin();\n\n            this.width = this.$chart.width() - margin.left - margin.right;\n            this.height = this.$chart.height() - margin.top - margin.bottom;\n\n\n            // Append SVG to chart element\n\n            var svg = {\n                width: this.width + (margin.left + margin.right),\n                height: this.height + (margin.top + margin.bottom),\n                translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n                translateY: margin.top\n            };\n\n            this.svg = d3.select(this.$chart.get(0)).append(\"svg\")\n                .attr(\"width\", svg.width)\n                .attr(\"height\", svg.height);\n\n            this.drawingArea = this.svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + svg.translateX + \",\" + svg.translateY + \")\");\n\n\n            // Draw elements\n\n            this.drawTicks();\n            this.drawAxes();\n            this.drawChart();\n            this.drawTipTriggers();\n        },\n\n        drawTicks: function() {\n            // Draw X ticks\n\n            var x = this.getX(true);\n            var xTicks = 3;\n            var xAxis = d3.axisBottom(x)\n                .tickFormat(this.getXFormatter())\n                .ticks(xTicks);\n\n            this.drawingArea.append(\"g\")\n                .attr(\"class\", \"x ticks-axis\")\n                .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                .call(xAxis);\n\n\n            // Draw Y ticks\n\n            var y = this.getY();\n            var yTicks = 2;\n            var yAxis;\n\n            if (this.orientation !== 'rtl') {\n                yAxis = d3.axisLeft(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y)\n                    .tickFormat(this.getYFormatter())\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y ticks-axis\")\n                    .attr(\"transform\", \"translate(\" + this.width + \",0)\")\n                    .call(yAxis);\n            }\n\n\n            // On after draw ticks\n\n            this.onAfterDrawTicks();\n        },\n\n        drawAxes: function() {\n            if (this.settings.xAxis.showAxis) {\n                var x = this.getX();\n                var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0, \" + this.height + \")\")\n                    .call(xAxis);\n            }\n\n            if (this.settings.yAxis.showAxis) {\n                var y = this.getY();\n                var chartPadding = 0;\n                var yAxis;\n\n                if (this.orientation === 'rtl') {\n                    yAxis = d3.axisLeft(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + (this.width - chartPadding) + \", 0)\")\n                        .call(yAxis);\n                } else {\n                    yAxis = d3.axisRight(y).ticks(0);\n                    this.drawingArea.append(\"g\")\n                        .attr(\"class\", \"y axis\")\n                        .attr(\"transform\", \"translate(\" + chartPadding + \", 0)\")\n                        .call(yAxis);\n                }\n            }\n        },\n\n        drawChart: function() {\n            var x = this.getX(true);\n            var y = this.getY();\n\n\n            // X & Y grid lines\n\n            if (this.settings.xAxis.gridlines) {\n                var xLineAxis = d3.axisBottom(x);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"x grid-line\")\n                    .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n                    .call(xLineAxis\n                        .tickSize(-this.height, 0, 0)\n                        .tickFormat(\"\")\n                    );\n            }\n\n            var yTicks = 2;\n\n            if (this.settings.yAxis.gridlines) {\n                var yLineAxis = d3.axisLeft(y);\n\n                this.drawingArea.append(\"g\")\n                    .attr(\"class\", \"y grid-line\")\n                    .attr(\"transform\", \"translate(0 , 0)\")\n                    .call(yLineAxis\n                        .tickSize(-(this.width), 0)\n                        .tickFormat(\"\")\n                        .tickValues(this.getYTickValues())\n                        .ticks(yTicks)\n                    );\n            }\n\n            // Line\n\n            var line = d3.line()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-line\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', 'none')\n                .style('stroke', this.settings.colors[0])\n                .style('stroke-width', '3px')\n                .attr(\"d\", line);\n\n\n            // Area\n\n            var area = d3.area()\n                .x(function(d) {\n                    return x(d[0]);\n                })\n                .y0(this.height)\n                .y1(function(d) {\n                    return y(d[1]);\n                });\n\n            this.drawingArea\n                .append(\"g\")\n                .attr(\"class\", \"chart-area\")\n                .append(\"path\")\n                .datum(this.dataTable.rows)\n                .style('fill', this.settings.colors[0])\n                .style('fill-opacity', '0.3')\n                .attr(\"d\", area);\n\n\n            // Plots\n\n            if (this.settings.plots) {\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"plots\")\n                    .selectAll(\"circle\")\n                    .data(this.dataTable.rows)\n                    .enter()\n                    .append(\"circle\")\n                    .style('fill', this.settings.colors[0])\n                    .attr(\"class\", $.proxy(function(d, index) {\n                        return 'plot plot-' + index;\n                    }, this))\n                    .attr(\"r\", 4)\n                    .attr(\"cx\", $.proxy(function(d) {\n                        return x(d[0]);\n                    }, this))\n                    .attr(\"cy\", $.proxy(function(d) {\n                        return y(d[1]);\n                    }, this));\n            }\n        },\n\n        drawTipTriggers: function() {\n            if (this.settings.tips) {\n                if (!this.tip) {\n                    this.tip = new Craft.charts.Tip(this.$chart);\n                }\n\n\n                // Define xAxisTickInterval\n\n                var chartMargin = this.getChartMargin();\n                var tickSizeOuter = 6;\n                var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n                var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n\n                // Tip trigger width\n\n                var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n\n                // Draw triggers\n\n                var x = this.getX(true);\n                var y = this.getY();\n\n                this.drawingArea.append('g')\n                    .attr(\"class\", \"tip-triggers\")\n                    .selectAll(\"rect\")\n                    .data(this.dataTable.rows)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"tip-trigger\")\n                    .style('fill', 'transparent')\n                    .style('fill-opacity', '1')\n                    .attr(\"width\", tipTriggerWidth)\n                    .attr(\"height\", this.height)\n                    .attr(\"x\", $.proxy(function(d) {\n                        return x(d[0]) - tipTriggerWidth / 2;\n                    }, this))\n                    .on(\"mouseover\", $.proxy(function(d, index) {\n                        // Expand plot\n\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 5);\n\n\n                        // Set tip content\n\n                        var $content = $('<div />');\n                        var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                        var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                        $xValue.html(this.getXFormatter()(d[0]));\n                        $yValue.html(this.getYFormatter()(d[1]));\n\n                        var content = $content.get(0);\n\n                        this.tip.setContent(content);\n\n\n                        // Set tip position\n\n                        var margin = this.getChartMargin();\n\n                        var offset = 24;\n                        var top = (y(d[1]) + offset);\n                        var left;\n\n                        if (this.orientation !== 'rtl') {\n                            left = (x(d[0]) + margin.left + offset);\n\n                            var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                            var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                            if (calcLeft > maxLeft) {\n                                left = x(d[0]) - (this.tip.$tip.width() + offset);\n                            }\n                        } else {\n                            left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                        }\n\n                        if (left < 0) {\n                            left = (x(d[0]) + margin.left + offset);\n                        }\n\n                        var position = {\n                            top: top,\n                            left: left\n                        };\n\n                        this.tip.setPosition(position);\n\n\n                        // Show tip\n\n                        this.tip.show();\n                    }, this))\n                    .on(\"mouseout\", $.proxy(function(d, index) {\n                        // Unexpand Plot\n                        this.drawingArea.select('.plot-' + index).attr(\"r\", 4);\n\n                        // Hide tip\n                        this.tip.hide();\n                    }, this));\n            }\n        },\n\n        getChartMargin: function() {\n            var margin = this.settings.margin;\n\n\n            // Estimate the max width of y ticks and set it as the left margin\n\n            var values = this.getYTickValues();\n            var yTicksMaxWidth = 0;\n\n            $.each(values, $.proxy(function(key, value) {\n                var characterWidth = 8;\n\n                var formatter = this.getYFormatter();\n\n                var formattedValue = formatter(value);\n                var computedTickWidth = formattedValue.length * characterWidth;\n\n                if (computedTickWidth > yTicksMaxWidth) {\n                    yTicksMaxWidth = computedTickWidth;\n                }\n            }, this));\n\n            yTicksMaxWidth += 10;\n\n            margin.left = yTicksMaxWidth;\n\n            return margin;\n        },\n\n        getX: function(padded) {\n            var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n                return d[0];\n            });\n\n            var xDomain = [xDomainMin, xDomainMax];\n\n            if (this.orientation === 'rtl') {\n                xDomain = [xDomainMax, xDomainMin];\n            }\n\n            var left = 0;\n            var right = 0;\n\n            if (padded) {\n                left = 0;\n                right = 0;\n            }\n\n            var x = d3.scaleTime().range([left, (this.width - right)]);\n\n            x.domain(xDomain);\n\n            return x;\n        },\n\n        getY: function() {\n            var yDomain = [0, this.getYMaxValue()];\n\n            var y = d3.scaleLinear().range([this.height, 0]);\n\n            y.domain(yDomain);\n\n            return y;\n        },\n\n        getXFormatter: function() {\n            var formatter;\n\n            if (this.settings.xAxis.formatter !== $.noop) {\n                formatter = this.settings.xAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYFormatter: function() {\n            var formatter;\n\n            if (this.settings.yAxis.formatter !== $.noop) {\n                formatter = this.settings.yAxis.formatter(this);\n            } else {\n                formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n            }\n\n            return formatter;\n        },\n\n        getYMaxValue: function() {\n            return d3.max(this.dataTable.rows, function(d) {\n                return d[1];\n            });\n        },\n\n        getYTickValues: function() {\n            var maxValue = this.getYMaxValue();\n\n            if (maxValue > 1) {\n                return [(maxValue / 2), maxValue];\n            } else {\n                return [0, maxValue];\n            }\n        }\n    },\n    {\n        defaults: {\n            chartClass: 'area',\n            margin: {top: 25, right: 5, bottom: 25, left: 0},\n            plots: true,\n            tips: true,\n            xAxis: {\n                gridlines: false,\n                showAxis: true,\n                formatter: $.noop\n            },\n            yAxis: {\n                gridlines: true,\n                showAxis: false,\n                formatter: $.noop\n            }\n        }\n    });\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = \"0\" + duration.hours;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = \"0\" + duration.minutes;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = \"0\" + duration.seconds;\n        }\n\n        return duration.hours + ':' + duration.minutes + ':' + duration.seconds;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day + \" %H:00:00\");\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.children('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'change', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        var val = this.$input.val();\n\n        // If empty, set the preview to transparent\n        if (!val.length || val === '#') {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Make sure the value starts with a #\n        if (val[0] !== '#') {\n            val = '#'+val;\n            this.$input.val(val);\n        }\n\n        this.$colorPreview.css('background-color', val);\n\n        if (this.$colorInput) {\n            this.$colorInput.val(val);\n        }\n    }\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function()\n    {\n        if (Craft.ColorInput._browserSupportsColorInputs === null)\n        {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend(\n    {\n        elementIndex: null,\n        $elementIndexSourcesContainer: null,\n\n        $sidebar: null,\n        $sourcesContainer: null,\n        $sourceSettingsContainer: null,\n        $newHeadingBtn: null,\n        $footer: null,\n        $footerBtnContainer: null,\n        $saveBtn: null,\n        $cancelBtn: null,\n        $saveSpinner: null,\n        $loadingSpinner: null,\n\n        sourceSort: null,\n        sources: null,\n        selectedSource: null,\n        updateSourcesOnSave: false,\n\n        availableTableAttributes: null,\n\n        init: function(elementIndex, settings) {\n            this.base();\n\n            this.setSettings(settings, {\n                resizable: true\n            });\n\n            this.elementIndex = elementIndex;\n            this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n            var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n            this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n            this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n            this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n            this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n            this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n            this.$cancelBtn = $('<div class=\"btn\" role=\"button\"/>').text(Craft.t('app', 'Cancel')).appendTo(this.$footerBtnContainer);\n            this.$saveBtn = $('<div class=\"btn submit disabled\" role=\"button\"/>').text(Craft.t('app', 'Save')).appendTo(this.$footerBtnContainer);\n            this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n            this.$newHeadingBtn = $('<div class=\"btn submit add icon\"/>').text(Craft.t('app', 'New heading')).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n            this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n            this.setContainer($container);\n            this.show();\n\n            var data = {\n                elementType: this.elementIndex.elementType\n            };\n\n            Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, $.proxy(function(response, textStatus) {\n                this.$loadingSpinner.remove();\n\n                if (textStatus === 'success') {\n                    this.$saveBtn.removeClass('disabled');\n                    this.buildModal(response);\n                }\n            }, this));\n\n            this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$saveBtn, 'click', 'save');\n            this.addListener(this.$container, 'submit', 'save');\n        },\n\n        buildModal: function(response) {\n            // Store the available table attribute options\n            this.availableTableAttributes = response.availableTableAttributes;\n\n            // Create the source item sorter\n            this.sourceSort = new Garnish.DragSort({\n                handle: '.move',\n                axis: 'y',\n                onSortChange: $.proxy(function() {\n                    this.updateSourcesOnSave = true;\n                }, this)\n            });\n\n            // Create the sources\n            this.sources = [];\n\n            for (var i = 0; i < response.sources.length; i++) {\n                var source = this.addSource(response.sources[i]);\n                this.sources.push(source);\n            }\n\n            if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n                this.sources[0].select();\n            }\n        },\n\n        addSource: function(sourceData) {\n            var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n            var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n            var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n            $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n            var source;\n\n            // Is this a heading?\n            if (typeof sourceData.heading !== 'undefined') {\n                $item.addClass('heading');\n                $itemInput.attr('name', 'sourceOrder[][heading]');\n                source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.heading);\n            }\n            else {\n                $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n                source.updateItemLabel(sourceData.label);\n\n                // Select this by default?\n                if ((this.elementIndex.sourceKey+'/').substr(0, sourceData.key.length+1) === sourceData.key+'/') {\n                    source.select();\n                }\n            }\n\n            this.sourceSort.addItems($item);\n\n            return source;\n        },\n\n        handleNewHeadingBtnClick: function() {\n            var source = this.addSource({\n                heading: ''\n            });\n\n            Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n            source.select();\n            this.updateSourcesOnSave = true;\n        },\n\n        save: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n                return;\n            }\n\n            this.$saveSpinner.removeClass('hidden');\n            var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n            Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, $.proxy(function(response, textStatus) {\n                this.$saveSpinner.addClass('hidden');\n\n                if (textStatus === 'success' && response.success) {\n                    // Have any changes been made to the source list?\n                    if (this.updateSourcesOnSave) {\n                        if (this.$elementIndexSourcesContainer.length) {\n                            var $lastSource = null,\n                                $pendingHeading;\n\n                            for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                                var $item = this.sourceSort.$items.eq(i),\n                                    source = $item.data('source'),\n                                    $indexSource = source.getIndexSource();\n\n                                if (!$indexSource) {\n                                    continue;\n                                }\n\n                                if (source.isHeading()) {\n                                    $pendingHeading = $indexSource;\n                                }\n                                else {\n                                    if ($pendingHeading) {\n                                        this.appendSource($pendingHeading, $lastSource);\n                                        $lastSource = $pendingHeading;\n                                        $pendingHeading = null;\n                                    }\n\n                                    this.appendSource($indexSource, $lastSource);\n                                    $lastSource = $indexSource;\n                                }\n                            }\n\n                            // Remove any additional sources (most likely just old headings)\n                            if ($lastSource) {\n                                var $extraSources = $lastSource.nextAll();\n                                this.elementIndex.sourceSelect.removeItems($extraSources);\n                                $extraSources.remove();\n                            }\n                        }\n                    }\n\n                    // If a source is selected, have the element index select that one by default on the next request\n                    if (this.selectedSource && this.selectedSource.sourceData.key) {\n                        this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                        this.elementIndex.updateElements();\n                    }\n\n                    Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                    this.hide();\n                }\n                else {\n                    var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                    Craft.cp.displayError(error);\n                }\n            }, this));\n        },\n\n        appendSource: function($source, $lastSource) {\n            if (!$lastSource) {\n                $source.prependTo(this.$elementIndexSourcesContainer);\n            }\n            else {\n                $source.insertAfter($lastSource);\n            }\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.sources.length; i++) {\n                this.sources[i].destroy();\n            }\n\n            delete this.sources;\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend(\n    {\n        modal: null,\n\n        $item: null,\n        $itemLabel: null,\n        $itemInput: null,\n        $settingsContainer: null,\n\n        sourceData: null,\n\n        init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n            this.modal = modal;\n            this.$item = $item;\n            this.$itemLabel = $itemLabel;\n            this.$itemInput = $itemInput;\n            this.sourceData = sourceData;\n\n            this.$item.data('source', this);\n\n            this.addListener(this.$item, 'click', 'select');\n        },\n\n        isHeading: function() {\n            return false;\n        },\n\n        isSelected: function() {\n            return (this.modal.selectedSource === this);\n        },\n\n        select: function() {\n            if (this.isSelected()) {\n                return;\n            }\n\n            if (this.modal.selectedSource) {\n                this.modal.selectedSource.deselect();\n            }\n\n            this.$item.addClass('sel');\n            this.modal.selectedSource = this;\n\n            if (!this.$settingsContainer) {\n                this.$settingsContainer = this.createSettings()\n                    .appendTo(this.modal.$sourceSettingsContainer);\n            }\n            else {\n                this.$settingsContainer.removeClass('hidden');\n            }\n\n            this.modal.$sourceSettingsContainer.scrollTop(0);\n        },\n\n        createSettings: function() {\n            return $('<div/>');\n        },\n\n        getIndexSource: function() {\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.modal.selectedSource = null;\n            this.$settingsContainer.addClass('hidden');\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.text(val);\n        },\n\n        destroy: function() {\n            this.$item.data('source', null);\n            this.base();\n        }\n    });\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            if (this.sourceData.tableAttributes.length) {\n                $settings.append(this.createTableColumnsField());\n            }\n\n            return $settings;\n        },\n\n        createTableColumnsField: function() {\n            // Create the title column option\n            let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n            let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n            // Create the rest of the options\n            let $columnCheckboxes = $('<div/>');\n            let selectedAttributes = [firstKey];\n\n            $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n            // Add the selected columns, in the selected order\n            for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n                let [key, label] = this.sourceData.tableAttributes[i];\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n                selectedAttributes.push(key);\n            }\n\n            // Add the rest\n            let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n            availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n            for (let i = 0; i < availableTableAttributes.length; i++) {\n                let [key, label] = availableTableAttributes[i];\n                if (!Craft.inArray(key, selectedAttributes)) {\n                    $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n                }\n            }\n\n            new Garnish.DragSort($columnCheckboxes.children(), {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n                label: Craft.t('app', 'Table Columns'),\n                instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n            });\n        },\n\n        createTableColumnOption: function(key, label, first, checked) {\n            var $option = $('<div class=\"customize-sources-table-column\"/>')\n                .append('<div class=\"icon move\"/>')\n                .append(\n                    Craft.ui.createCheckbox({\n                        label: label,\n                        name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                        value: key,\n                        checked: checked,\n                        disabled: first\n                    })\n                );\n\n            if (first) {\n                $option.children('.move').addClass('disabled');\n            }\n\n            return $option;\n        },\n\n        getIndexSource: function() {\n            var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n            if ($source) {\n                return $source.closest('li');\n            }\n        }\n    });\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend(\n    {\n        $labelField: null,\n        $labelInput: null,\n        $deleteBtn: null,\n\n        isHeading: function() {\n            return true;\n        },\n\n        select: function() {\n            this.base();\n            this.$labelInput.trigger('focus');\n        },\n\n        createSettings: function() {\n            let $settings = $('<div/>');\n\n            this.$labelField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Heading'),\n                instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n                value: this.sourceData.heading\n            }).appendTo($settings);\n\n            this.$labelInput = this.$labelField.find('.text');\n\n            $settings.append('<hr/>');\n\n            this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n                .appendTo($settings);\n\n            this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n            this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n            return $settings;\n        },\n\n        handleLabelInputChange: function() {\n            this.updateItemLabel(this.$labelInput.val());\n            this.modal.updateSourcesOnSave = true;\n        },\n\n        updateItemLabel: function(val) {\n            this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n            this.$itemInput.val(val);\n        },\n\n        deleteHeading: function() {\n            this.modal.sourceSort.removeItems(this.$item);\n            this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n            this.modal.updateSourcesOnSave = true;\n\n            if (this.isSelected()) {\n                this.deselect();\n\n                if (this.modal.sources.length) {\n                    this.modal.sources[0].select();\n                }\n            }\n\n            this.$item.remove();\n            this.$settingsContainer.remove();\n            this.destroy();\n        },\n\n        getIndexSource: function() {\n            var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n            return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend(\n    {\n        $table: null,\n\n        init: function(table, settings) {\n            this.$table = $(table);\n            var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n            settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n            settings.container = this.$table.children('tbody');\n            settings.helper = $.proxy(this, 'getHelper');\n            settings.caboose = '<tr/>';\n            settings.axis = Garnish.Y_AXIS;\n            settings.magnetStrength = 4;\n            settings.helperLagBase = 1.5;\n\n            this.base($rows, settings);\n        },\n\n        getHelper: function($helperRow) {\n            var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n                $table = $('<table/>').appendTo($helper),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the table width and classes\n            $table.width(this.$table.width());\n            $table.prop('className', this.$table.prop('className'));\n\n            // Copy the column widths\n            var $firstRow = this.$table.find('tr:first'),\n                $cells = $firstRow.children(),\n                $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                $($helperCells[i]).width($($cells[i]).width());\n            }\n\n            return $helper;\n        }\n    },\n    {\n        defaults: {\n            handle: '.move',\n            helperClass: 'datatablesorthelper'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend(\n    {\n        id: null,\n        userId: null,\n\n        $deleteActionRadios: null,\n        $deleteSpinner: null,\n\n        userSelect: null,\n        _deleting: false,\n\n        init: function(userId, settings) {\n            this.id = Math.floor(Math.random() * 1000000000);\n            this.userId = userId;\n            settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n            var $form = $(\n                    '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n                    Craft.getCsrfInput() +\n                    '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n                    (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n                    (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n                    '</form>'\n                ).appendTo(Garnish.$bod),\n                $body = $(\n                    '<div class=\"body\">' +\n                    '<div class=\"content-summary\">' +\n                    '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n                    '<ul class=\"bullets\"></ul>' +\n                    '</div>' +\n                    '<div class=\"options\">' +\n                    '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n                    '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n                    '<div class=\"elements\"></div>' +\n                    '<div class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</div>' +\n                    '</div>' +\n                    '</div>' +\n                    '<div>' +\n                    '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                    '</div>' +\n                    '</div>'\n                ).appendTo($form),\n                $buttons = $('<div class=\"buttons right\"/>').appendTo($body),\n                $cancelBtn = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo($buttons);\n\n            if (settings.contentSummary.length) {\n                for (let i = 0; i < settings.contentSummary.length; i++) {\n                    $body.find('ul').append($('<li/>', { text: settings.contentSummary[i] }));\n                }\n            } else {\n                $body.find('ul').remove();\n            }\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$deleteSubmitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + (Garnish.isArray(this.userId) ? Craft.t('app', 'Delete users') : Craft.t('app', 'Delete user')) + '\" />').appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            var idParam;\n\n            if (Garnish.isArray(this.userId)) {\n                idParam = ['and'];\n\n                for (let i = 0; i < this.userId.length; i++) {\n                    idParam.push('not ' + this.userId[i]);\n                }\n            }\n            else {\n                idParam = 'not ' + this.userId;\n            }\n\n            this.userSelect = new Craft.BaseElementSelectInput({\n                id: 'transferselect' + this.id,\n                name: 'transferContentTo',\n                elementType: 'craft\\\\elements\\\\User',\n                criteria: {\n                    id: idParam\n                },\n                limit: 1,\n                modalSettings: {\n                    closeOtherModals: false\n                },\n                onSelectElements: $.proxy(function() {\n                    this.updateSizeAndPosition();\n\n                    if (!this.$deleteActionRadios.first().prop('checked')) {\n                        this.$deleteActionRadios.first().trigger('click');\n                    }\n                    else {\n                        this.validateDeleteInputs();\n                    }\n                }, this),\n                onRemoveElements: $.proxy(this, 'validateDeleteInputs'),\n                selectable: false,\n                editable: false\n            });\n\n            this.addListener($cancelBtn, 'click', 'hide');\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'handleSubmit');\n\n            this.base($form, settings);\n        },\n\n        validateDeleteInputs: function() {\n            var validates = false;\n\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n            else if (this.$deleteActionRadios.eq(1).prop('checked')) {\n                validates = true;\n            }\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            }\n            else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        handleSubmit: function(ev) {\n            if (this._deleting || !this.validateDeleteInputs()) {\n                ev.preventDefault();\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this.userSelect.disable();\n            this._deleting = true;\n\n            // Let the onSubmit callback prevent the form from getting submitted\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        },\n\n        onFadeIn: function() {\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$deleteActionRadios.first().trigger('focus');\n            }\n\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            contentSummary: [],\n            onSubmit: $.noop,\n            redirect: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend(\n    {\n        $revisionBtn: null,\n        $revisionLabel: null,\n        $spinner: null,\n        $expandSiteStatusesBtn: null,\n        $statusIcon: null,\n\n        $editMetaBtn: null,\n        metaHud: null,\n        $nameTextInput: null,\n        $notesTextInput: null,\n        $saveMetaBtn: null,\n\n        $siteStatusPane: null,\n        $globalLightswitch: null,\n        $siteLightswitches: null,\n        $addlSiteField: null,\n        newSites: null,\n\n        lastSerializedValue: null,\n        listeningForChanges: false,\n        pauseLevel: 0,\n        timeout: null,\n        saving: false,\n        saveXhr: null,\n        queue: null,\n        submittingForm: false,\n\n        duplicatedElements: null,\n        errors: null,\n\n        preview: null,\n        previewToken: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.DraftEditor.defaults);\n\n            this.queue = [];\n\n            this.duplicatedElements = {};\n\n            this.$revisionBtn = $('#revision-btn');\n            this.$revisionLabel = $('#revision-label');\n            this.$spinner = $('#revision-spinner');\n            this.$expandSiteStatusesBtn = $('#expand-status-btn');\n            this.$statusIcon = $('#revision-status');\n\n            if (this.settings.canEditMultipleSites) {\n                this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n            }\n\n            if (this.settings.previewTargets.length) {\n                if (this.settings.enablePreview) {\n                    this.addListener($('#preview-btn'), 'click', 'openPreview');\n                }\n\n                var $shareBtn = $('#share-btn');\n\n                if (this.settings.previewTargets.length === 1) {\n                    this.addListener($shareBtn, 'click', function() {\n                        this.openShareLink(this.settings.previewTargets[0].url);\n                    });\n                } else {\n                    this.createShareMenu($shareBtn);\n                }\n            }\n\n            // If this is a revision, we're done here\n            if (this.settings.revisionId) {\n                return;\n            }\n\n            // Override the serializer to use our own\n            Craft.cp.$primaryForm.data('serializer', function() {\n                return this.serializeForm(true)\n            }.bind(this));\n\n            this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n            if (this.settings.draftId) {\n                this.initForDraft();\n            } else {\n                // If the \"Save as a Draft\" button is a secondary button, then add special handling for it\n                this.addListener($('#save-draft-btn'), 'click', function(ev) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }.bind(this));\n\n                // If they're not allowed to update the source element, override the save shortcut to create a draft too\n                if (!this.settings.canUpdateSource) {\n                    this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', function(ev) {\n                        if (ev.saveShortcut) {\n                            ev.preventDefault();\n                            this.createDraft();\n                            this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                        }\n                    }.bind(this));\n                }\n            }\n        },\n\n        listenForChanges: function() {\n            if (this.listeningForChanges || this.pauseLevel > 0) {\n                return;\n            }\n\n            this.listeningForChanges = true;\n\n            this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n                if ($(ev.target).is(this.statusIcons())) {\n                    return;\n                }\n                clearTimeout(this.timeout);\n                // If they are typing, wait half a second before checking the form\n                if (Craft.inArray(ev.type, ['keypress', 'keyup', 'change'])) {\n                    this.timeout = setTimeout(this.checkForm.bind(this), 500);\n                } else {\n                    this.checkForm();\n                }\n            });\n        },\n\n        stopListeningForChanges: function() {\n            if (!this.listeningForChanges) {\n                return;\n            }\n\n            this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n            clearTimeout(this.timeout);\n            this.listeningForChanges = false;\n        },\n\n        pause: function() {\n            this.pauseLevel++;\n            this.stopListeningForChanges();\n        },\n\n        resume: function() {\n            if (this.pauseLevel === 0) {\n                throw 'Craft.DraftEditor::resume() should only be called after pause().';\n            }\n\n            // Only actually resume operation if this has been called the same\n            // number of times that pause() was called\n            this.pauseLevel--;\n            if (this.pauseLevel === 0) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        },\n\n        initForDraft: function() {\n            // Create the edit draft button\n            this.createEditMetaBtn();\n\n            this.addListener(this.$statusIcon, 'click', function() {\n                this.showStatusHud(this.$statusIcon);\n            }.bind(this));\n\n            this.addListener($('#merge-changes-btn'), 'click', this.mergeChanges);\n\n            this.listenForChanges();\n        },\n\n        mergeChanges: function() {\n            // Make sure there aren't any unsaved changes\n            this.checkForm();\n\n            // Make sure we aren't currently saving something\n            if (this.saving) {\n                this.queue.push(this.mergeChanges.bind(this));\n                return;\n            }\n\n            this.saving = true;\n            $('#merge-changes-spinner').removeClass('hidden');\n\n            Craft.postActionRequest('drafts/merge-source-changes', {\n                elementType: this.settings.elementType,\n                draftId: this.settings.draftId,\n                siteId: this.settings.siteId,\n            }, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.reload();\n                } else {\n                    $('#merge-changes-spinner').addClass('hidden');\n                }\n            });\n        },\n\n        expandSiteStatuses: function() {\n            this.removeListener(this.$expandSiteStatusesBtn, 'click');\n            this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', function() {\n                this.$expandSiteStatusesBtn.remove();\n            }.bind(this));\n\n            var $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n            this.$siteStatusPane = $enabledForSiteField.parent();\n\n            // If this is a revision, just show the site statuses statically and be done\n            if (this.settings.revisionId) {\n                for (let i = 0; i < Craft.sites.length; i++) {\n                    let site = Craft.sites[i];\n                    if (site.id == this.settings.siteId) {\n                        continue;\n                    }\n                    if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                        this._createSiteStatusField(site);\n                    }\n                }\n                return;\n            }\n\n            $enabledForSiteField.addClass('nested');\n            var $globalField = Craft.ui.createLightswitchField({\n                id: 'enabled',\n                label: Craft.t('app', 'Enabled everywhere'),\n                name: 'enabled',\n            }).insertBefore($enabledForSiteField);\n            $globalField.find('label').css('font-weight', 'bold');\n            this.$globalLightswitch = $globalField.find('.lightswitch');\n\n            if (!this.settings.revisionId) {\n                this._showField($globalField);\n            }\n\n            // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n            var originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n              ? '1'\n              : (this.settings.enabledForSite ? '-' : '');\n            var originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n              '=' + (this.settings.enabledForSite ? '1' : '');\n\n            this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            let addlSiteOptions = [];\n\n            for (let i = 0; i < Craft.sites.length; i++) {\n                let site = Craft.sites[i];\n                if (site.id == this.settings.siteId) {\n                    continue;\n                }\n                if (this.settings.siteStatuses.hasOwnProperty(site.id)) {\n                    this._createSiteStatusField(site);\n                } else if (Craft.inArray(site.id, this.settings.addlSiteIds)) {\n                    addlSiteOptions.push({label: site.name, value: site.id});\n                }\n            }\n\n            var serializedStatuses = `enabled=${originalEnabledValue}`;\n            for (let i = 0; i < this.$siteLightswitches.length; i++) {\n                let $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n                serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n            }\n\n            Craft.cp.$primaryForm.data('initialSerializedValue',\n                Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n            // Are there additional sites that can be added?\n            if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n                addlSiteOptions.unshift({label: Craft.t('app', 'Add a site…')});\n                let $addlSiteSelectContainer = Craft.ui.createSelect({\n                    options: addlSiteOptions,\n                }).addClass('fullwidth');\n                this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n                    .addClass('nested add')\n                    .appendTo(this.$siteStatusPane);\n                let $addlSiteSelect = $addlSiteSelectContainer.find('select');\n                $addlSiteSelect.on('change', () => {\n                    let siteId = $addlSiteSelect.val();\n                    let site;\n                    for (let i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == siteId) {\n                            site = Craft.sites[i];\n                            break;\n                        }\n                    }\n                    if (site) {\n                        this._createSiteStatusField(site);\n                        $addlSiteSelect\n                            .val('')\n                            .find(`option[value=\"${siteId}\"]`).remove();\n                        if (this.newSites === null) {\n                            this.newSites = [];\n                        }\n                        this.newSites.push(siteId);\n                        // Was that the last site?\n                        if ($addlSiteSelect.find('option').length === 1) {\n                            this._removeField(this.$addlSiteField);\n                        }\n                    }\n                });\n                this._showField(this.$addlSiteField);\n            }\n\n            this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n            this._updateGlobalStatus();\n        },\n\n        _showField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .height(0)\n              .velocity({height: height}, 'fast', () => {\n                  $field.css({\n                      overflow: '',\n                      height: '',\n                  });\n              });\n        },\n\n        _removeField: function($field) {\n            let height = $field.height();\n            $field\n              .css('overflow', 'hidden')\n              .velocity({height: 0}, 'fast', () => {\n                  $field.remove();\n              });\n        },\n\n        _updateGlobalStatus: function() {\n            var allEnabled = true, allDisabled = true;\n            this.$siteLightswitches.each(function() {\n                var enabled = $(this).data('lightswitch').on;\n                if (enabled) {\n                    allDisabled = false;\n                } else {\n                    allEnabled = false;\n                }\n                if (!allEnabled && !allDisabled) {\n                    return false;\n                }\n            });\n            if (allEnabled) {\n                this.$globalLightswitch.data('lightswitch').turnOn(true);\n            } else if (allDisabled) {\n                this.$globalLightswitch.data('lightswitch').turnOff(true);\n            } else {\n                this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n            }\n        },\n\n        _updateSiteStatuses: function() {\n            var enabled = this.$globalLightswitch.data('lightswitch').on;\n            this.$siteLightswitches.each(function() {\n                if (enabled) {\n                    $(this).data('lightswitch').turnOn(true);\n                } else {\n                    $(this).data('lightswitch').turnOff(true);\n                }\n            });\n        },\n\n        _createSiteStatusField: function(site) {\n            let $field = Craft.ui.createLightswitchField({\n                id: `enabledForSite-${site.id}`,\n                label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n                name: `enabledForSite[${site.id}]`,\n                on: typeof this.settings.siteStatuses[site.id] !== 'undefined'\n                    ? this.settings.siteStatuses[site.id]\n                    : true,\n                disabled: !!this.settings.revisionId,\n            });\n            if (this.$addlSiteField) {\n                $field.insertBefore(this.$addlSiteField);\n            } else {\n                $field.appendTo(this.$siteStatusPane);\n            }\n\n            if (!this.settings.revisionId) {\n                $field.addClass('nested');\n                let $lightswitch = $field.find('.lightswitch')\n                  .on('change', this._updateGlobalStatus.bind(this));\n                this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n            }\n\n            this._showField($field);\n\n            return $field;\n        },\n\n        showStatusHud: function(target) {\n            var bodyHtml;\n\n            if (this.errors === null) {\n                bodyHtml = '<p>' + Craft.t('app', 'The draft has been saved.') + '</p>';\n            } else {\n                bodyHtml = '<p class=\"error\">' + Craft.t('app', 'The draft could not be saved.') + '</p>';\n\n                if (this.errors.length) {\n                    bodyHtml += '<ul class=\"errors\">';\n                    for (i = 0; i < this.errors.length; i++) {\n                        bodyHtml += '<li>' + Craft.escapeHtml(this.errors[i]) + '</li>';\n                    }\n                    bodyHtml += '</ul>';\n                }\n            }\n\n            var hud = new Garnish.HUD(target, bodyHtml, {\n                onHide: function() {\n                    hud.destroy();\n                }\n            });\n        },\n\n        spinners: function() {\n            return this.preview\n                ? this.$spinner.add(this.preview.$spinner)\n                : this.$spinner;\n        },\n\n        statusIcons: function() {\n            return this.preview\n                ? this.$statusIcon.add(this.preview.$statusIcon)\n                : this.$statusIcon;\n        },\n\n        createEditMetaBtn: function() {\n            this.$editMetaBtn = $('<a/>', {\n                'class': 'btn edit icon',\n                title: Craft.t('app', 'Edit draft settings'),\n            }).appendTo($('#revision-btngroup'));\n            this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n        },\n\n        createShareMenu: function($shareBtn) {\n            $shareBtn.addClass('menubtn');\n\n            var $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n            var $ul = $('<ul/>').appendTo($menu);\n            var $li, $a;\n\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                $li = $('<li/>').appendTo($ul);\n                $a = $('<a/>', {\n                    text: this.settings.previewTargets[i].label,\n                }).appendTo($li);\n                this.addListener($a, 'click', {\n                    target: i,\n                }, function(ev) {\n                    this.openShareLink(this.settings.previewTargets[ev.data.target].url);\n                }.bind(this));\n            }\n        },\n\n        getPreviewToken: function() {\n            return new Promise(function(resolve, reject) {\n                if (this.previewToken) {\n                    resolve(this.previewToken);\n                    return;\n                }\n\n                Craft.postActionRequest('preview/create-token', {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                }, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this.previewToken = response.token;\n                        resolve(this.previewToken);\n                    } else {\n                        reject();\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        getTokenizedPreviewUrl: function(url, randoParam) {\n            return new Promise(function(resolve, reject) {\n                var params = {};\n\n                if (randoParam || !this.settings.isLive) {\n                    // Randomize the URL so CDNs don't return cached pages\n                    params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n                }\n\n                if (this.settings.siteToken) {\n                    params[Craft.siteToken] = this.settings.siteToken;\n                }\n\n                // No need for a token if we're looking at a live element\n                if (this.settings.isLive) {\n                    resolve(Craft.getUrl(url, params));\n                    return;\n                }\n\n                this.getPreviewToken().then(function(token) {\n                    params[Craft.tokenParam] = token;\n                    resolve(Craft.getUrl(url, params));\n                }).catch(reject);\n            }.bind(this));\n        },\n\n        openShareLink: function(url) {\n            this.getTokenizedPreviewUrl(url).then(function(url) {\n                window.open(url);\n            });\n        },\n\n        getPreview: function() {\n            if (!this.preview) {\n                this.preview = new Craft.Preview(this);\n                this.preview.on('open', function() {\n                    if (!this.settings.draftId) {\n                        this.listenForChanges();\n                    }\n                }.bind(this));\n                this.preview.on('close', function() {\n                    if (!this.settings.draftId) {\n                        this.stopListeningForChanges();\n                    }\n                }.bind(this));\n            }\n            return this.preview;\n        },\n\n        openPreview: function() {\n            return new Promise(function(resolve, reject) {\n                this.ensureIsDraftOrRevision(true)\n                    .then(function() {\n                        this.getPreview().open();\n                        resolve();\n                    }.bind(this))\n                    .catch(reject);\n            }.bind(this))\n        },\n\n        ensureIsDraftOrRevision: function(onlyIfChanged) {\n            return new Promise(function(resolve, reject) {\n                if (!this.settings.draftId && !this.settings.revisionId) {\n                    if (\n                        onlyIfChanged &&\n                        this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                    ) {\n                        resolve();\n                        return;\n                    }\n\n                    this.createDraft()\n                        .then(resolve)\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            }.bind(this));\n        },\n\n        serializeForm: function(removeActionParams) {\n            var data = Craft.cp.$primaryForm.serialize();\n\n            if (this.isPreviewActive()) {\n                // Replace the temp input with the preview form data\n                data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n            }\n\n            if (removeActionParams && !this.settings.isUnsavedDraft) {\n                // Remove action and redirect params\n                data = data.replace(/&action=[^&]*/, '');\n                data = data.replace(/&redirect=[^&]*/, '');\n            }\n\n            return data;\n        },\n\n        checkForm: function(force) {\n            // If this isn't a draft and there's no active preview, then there's nothing to check\n            if (\n                this.settings.revisionId ||\n                (!this.settings.draftId && !this.isPreviewActive()) ||\n                this.pauseLevel > 0\n            ) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            this.timeout = null;\n\n            // Has anything changed?\n            var data = this.serializeForm(true);\n            if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n                this.saveDraft(data);\n            }\n        },\n\n        isPreviewActive: function() {\n            return this.preview && this.preview.isActive;\n        },\n\n        createDraft: function() {\n            return new Promise(function(resolve, reject) {\n                this.saveDraft(this.serializeForm(true))\n                    .then(resolve)\n                    .catch(reject);\n            }.bind(this));\n        },\n\n        saveDraft: function(data) {\n            return new Promise(function(resolve, reject) {\n                // Ignore if we're already submitting the main form\n                if (this.submittingForm) {\n                    reject();\n                    return;\n                }\n\n                if (this.saving) {\n                    this.queue.push(function() {\n                        this.checkForm()\n                    }.bind(this));\n                    return;\n                }\n\n                this.lastSerializedValue = data;\n                this.saving = true;\n                var $spinners = this.spinners().removeClass('hidden');\n                var $statusIcons = this.statusIcons().removeClass('invisible checkmark-icon alert-icon').addClass('hidden');\n                if (this.$saveMetaBtn) {\n                    this.$saveMetaBtn.addClass('active');\n                }\n                this.errors = null;\n\n                var url = Craft.getActionUrl(this.settings.saveDraftAction);\n                var i;\n\n                this.saveXhr = Craft.postActionRequest(url, this.prepareData(data), function(response, textStatus) {\n                    $spinners.addClass('hidden');\n                    if (this.$saveMetaBtn) {\n                        this.$saveMetaBtn.removeClass('active');\n                    }\n                    this.saving = false;\n\n                    if (textStatus === 'abort') {\n                        return;\n                    }\n\n                    if (textStatus !== 'success' || response.errors) {\n                        this.errors = (response ? response.errors : null) || [];\n                        $statusIcons\n                            .removeClass('hidden checkmark-icon')\n                            .addClass('alert-icon')\n                            .attr('title', Craft.t('app', 'The draft could not be saved.'));\n                        reject();\n                        return;\n                    }\n\n                    if (response.title) {\n                        $('#header h1').text(response.title);\n                    }\n\n                    if (response.docTitle) {\n                        document.title = response.docTitle;\n                    }\n\n                    this.$revisionLabel.text(response.draftName);\n\n                    this.settings.draftName = response.draftName;\n                    this.settings.draftNotes = response.draftNotes;\n\n                    var revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                    // Did we just add a site?\n                    if (this.newSites) {\n                        // Do we need to create the revision menu?\n                        if (!revisionMenu) {\n                            this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                            new Garnish.MenuBtn(this.$revisionBtn);\n                            revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                            revisionMenu.$container.removeClass('hidden');\n                        }\n                        for (let i = 0; i < this.newSites.length; i++) {\n                            let $option = revisionMenu.$options.filter(`[data-site-id=${this.newSites[i]}]`);\n                            $option.find('.status').removeClass('disabled').addClass('enabled');\n                            let $li = $option.parent().removeClass('hidden');\n                            $li.closest('.site-group').removeClass('hidden');\n                        }\n                        revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                        this.newSites = null;\n                    }\n\n                    // Did we just create a draft?\n                    var draftCreated = !this.settings.draftId;\n                    if (draftCreated) {\n                        // Update the document location HREF\n                        var newHref;\n                        var anchorPos = document.location.href.search('#');\n                        if (anchorPos !== -1) {\n                            newHref = document.location.href.substr(0, anchorPos);\n                        } else {\n                            newHref = document.location.href;\n                        }\n                        newHref += (newHref.match(/\\?/) ? '&' : '?') + 'draftId=' + response.draftId;\n                        if (anchorPos !== -1) {\n                            newHref += document.location.href.substr(anchorPos);\n                        }\n                        history.replaceState({}, '', newHref);\n\n                        // Replace the Save button with an Update button, if there is one.\n                        // Otherwise, the user must not have permission to update the source element\n                        var $saveBtnContainer = $('#save-btn-container');\n                        if ($saveBtnContainer.length) {\n                            $saveBtnContainer.replaceWith($('<input/>', {\n                                type: 'submit',\n                                'class': 'btn submit',\n                                value: Craft.t('app', 'Publish changes')\n                            }));\n                        }\n\n                        // Remove the \"Save as a Draft\" button\n                        var $saveDraftBtn = $('#save-draft-btn-container');\n                        $saveDraftBtn.add($saveDraftBtn.prev('.spacer')).remove();\n\n                        // Update the editor settings\n                        this.settings.draftId = response.draftId;\n                        this.settings.isLive = false;\n                        this.settings.canDeleteDraft = true;\n                        this.previewToken = null;\n                        this.initForDraft();\n\n                        // Add the draft to the revision menu\n                        if (revisionMenu) {\n                            revisionMenu.$options.filter(':not(.site-option)').removeClass('sel');\n                            var $draftsUl = revisionMenu.$container.find('.revision-group-drafts');\n                            if (!$draftsUl.length) {\n                                var $draftHeading = $('<h6/>', {\n                                    text: Craft.t('app', 'Drafts'),\n                                }).insertAfter(revisionMenu.$container.find('.revision-group-current'));\n                                $draftsUl = $('<ul/>', {\n                                    'class': 'padded revision-group-drafts',\n                                }).insertAfter($draftHeading);\n                            }\n                            var $draftLi = $('<li/>').prependTo($draftsUl);\n                            var $draftA = $('<a/>', {\n                                'class': 'sel',\n                                html: '<span class=\"draft-name\"></span> <span class=\"draft-meta light\"></span>',\n                            }).appendTo($draftLi);\n                            revisionMenu.addOptions($draftA);\n                            revisionMenu.selectOption($draftA);\n\n                            // Update the site URLs\n                            var $siteOptions = revisionMenu.$options.filter('.site-option[href]');\n                            for (var i = 0; i < $siteOptions.length; i++) {\n                                var $siteOption = $siteOptions.eq(i);\n                                $siteOption.attr('href', Craft.getUrl($siteOption.attr('href'), {draftId: response.draftId}));\n                            }\n                        }\n                    }\n\n                    if (revisionMenu) {\n                        revisionMenu.$options.filter('.sel').find('.draft-name').text(response.draftName);\n                        revisionMenu.$options.filter('.sel').find('.draft-meta').text('– ' + (response.creator\n                            ? Craft.t('app', 'saved {timestamp} by {creator}', {\n                                timestamp: response.timestamp,\n                                creator: response.creator\n                            })\n                            : Craft.t('app', 'updated {timestamp}', {\n                                timestamp: response.timestamp,\n                            })\n                        ));\n                    }\n\n                    // Did the controller send us updated preview targets?\n                    if (\n                        response.previewTargets &&\n                        JSON.stringify(response.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                    ) {\n                        this.updatePreviewTargets(response.previewTargets);\n                    }\n\n                    this.afterUpdate(data);\n\n                    if (draftCreated) {\n                        this.trigger('createDraft');\n                    }\n\n                    if (this.$nameTextInput) {\n                        this.checkMetaValues();\n                    }\n\n                    $.extend(this.duplicatedElements, response.duplicatedElements);\n\n                    resolve();\n                }.bind(this));\n            }.bind(this));\n        },\n\n        prepareData: function(data) {\n            // Swap out element IDs with their duplicated ones\n            data = this.swapDuplicatedElementIds(data);\n\n            // Add the draft info\n            if (this.settings.draftId) {\n                data += '&draftId=' + this.settings.draftId\n                    + '&draftName=' + encodeURIComponent(this.settings.draftName)\n                    + '&draftNotes=' + encodeURIComponent(this.settings.draftNotes || '');\n            }\n\n\n            // Filter out anything that hasn't changed\n            var initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue'));\n            return Craft.findDeltaData(initialData, data, this.getDeltaNames());\n        },\n\n        swapDuplicatedElementIds: function(data) {\n            for (var oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    data = data\n                        .replace(\n                            new RegExp(Craft.escapeRegex(encodeURIComponent('][' + oldId + ']')), 'g'),\n                            '][' + this.duplicatedElements[oldId] + ']'\n                        )\n                        .replace(\n                            new RegExp('=' + oldId + '\\\\b', 'g'),\n                            '=' + this.duplicatedElements[oldId]\n                        );\n                }\n            }\n            return data;\n        },\n\n        getDeltaNames: function() {\n            var deltaNames = Craft.deltaNames.slice(0);\n            for (var i = 0; i < deltaNames.length; i++) {\n                for (var oldId in this.duplicatedElements) {\n                    if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                        deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                    }\n                }\n            }\n            return deltaNames;\n        },\n\n        updatePreviewTargets: function(previewTargets) {\n            // index the current preview targets by label\n            var currentTargets = {};\n            for (var i = 0; i < this.settings.previewTargets.length; i++) {\n                currentTargets[this.settings.previewTargets[i].label] = this.settings.previewTargets[i];\n            }\n            for (i = 0; i < previewTargets.length; i++) {\n                if (currentTargets[previewTargets[i].label]) {\n                    currentTargets[previewTargets[i].label].url = previewTargets[i].url;\n                }\n            }\n        },\n\n        afterUpdate: function(data) {\n            Craft.cp.$primaryForm.data('initialSerializedValue', data);\n            this.statusIcons()\n                .removeClass('hidden')\n                .addClass('checkmark-icon')\n                .attr('title', Craft.t('app', 'The draft has been saved.'));\n\n            this.trigger('update');\n\n            this.nextInQueue();\n        },\n\n        nextInQueue: function() {\n            if (this.queue.length) {\n                this.queue.shift()();\n            }\n        },\n\n        showMetaHud: function() {\n            if (!this.metaHud) {\n                this.createMetaHud();\n                this.onMetaHudShow();\n            } else {\n                this.metaHud.show();\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$nameTextInput.trigger('focus');\n            }\n        },\n\n        createMetaHud: function() {\n            var $hudBody = $('<div/>');\n            var $field, $inputContainer;\n\n            // Add the Name field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($inputContainer).val(this.settings.draftName);\n\n            // Add the Notes field\n            $field = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-notes\">' + Craft.t('app', 'Notes') + '</label></div></div>').appendTo($hudBody);\n            $inputContainer = $('<div class=\"input\"/>').appendTo($field);\n            this.$notesTextInput = $('<textarea class=\"text fullwidth\" id=\"draft-notes\" rows=\"2\"/>').appendTo($inputContainer).val(this.settings.draftNotes);\n\n            // HUD footer\n            var $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n            // Delete button\n            let $deleteLink;\n            if (this.settings.canDeleteDraft) {\n                $deleteLink = $('<a class=\"error\" role=\"button\">' + Craft.t('app', 'Delete') + '</a>').appendTo($footer);\n            }\n\n            $('<div class=\"flex-grow\"></div>').appendTo($footer);\n            this.$saveMetaBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Save') + '\"/>').appendTo($footer);\n\n            this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n                onSubmit: this.saveMeta.bind(this)\n            });\n\n            new Garnish.NiceText(this.$notesTextInput);\n\n            this.addListener(this.$notesTextInput, 'keydown', 'onNotesKeydown');\n\n            this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n            this.addListener(this.$notesTextInput, 'input', 'checkMetaValues');\n\n            this.metaHud.on('show', this.onMetaHudShow.bind(this));\n            this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n            this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n\n            if ($deleteLink) {\n                this.addListener($deleteLink, 'click', 'deleteDraft');\n            }\n        },\n\n        onMetaHudShow: function() {\n            this.$editMetaBtn.addClass('active');\n        },\n\n        onMetaHudHide: function() {\n            this.$editMetaBtn.removeClass('active');\n        },\n\n        onMetaHudEscape: function() {\n            this.$nameTextInput.val(this.settings.draftName);\n            this.$notesTextInput.val(this.settings.draftNotes);\n        },\n\n        onNotesKeydown: function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n                this.metaHud.submit();\n            }\n        },\n\n        checkMetaValues: function() {\n            if (\n                this.$nameTextInput.val() && (\n                    this.$nameTextInput.val() !== this.settings.draftName ||\n                    this.$notesTextInput.val() !== this.settings.draftNotes\n                )\n            ) {\n                this.$saveMetaBtn.removeClass('disabled');\n                return true;\n            }\n\n            this.$saveMetaBtn.addClass('disabled');\n            return false;\n        },\n\n        shakeMetaHud: function() {\n            Garnish.shake(this.metaHud.$hud);\n        },\n\n        saveMeta: function() {\n            if (!this.checkMetaValues()) {\n                this.shakeMetaHud();\n                return;\n            }\n\n            this.settings.draftName = this.$nameTextInput.val();\n            this.settings.draftNotes = this.$notesTextInput.val();\n\n            this.metaHud.hide();\n            this.checkForm(true);\n        },\n\n        deleteDraft: function() {\n            if (!confirm(Craft.t('app', 'Are you sure you want to delete this draft?'))) {\n                return;\n            }\n\n            Craft.postActionRequest(this.settings.deleteDraftAction, {draftId: this.settings.draftId}, function(response, textStatus) {\n                if (textStatus === 'success') {\n                    window.location.href = this.settings.cpEditUrl;\n                }\n            }.bind(this))\n        },\n\n        handleFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent double form submits\n            if (this.submittingForm) {\n                return;\n            }\n\n            // If we're editing a draft, this isn't a custom trigger, and the user isn't allowed to update the source,\n            // then ignore the submission\n            if (!ev.customTrigger && !this.settings.isUnsavedDraft && this.settings.draftId && !this.settings.canUpdateSource) {\n                return;\n            }\n\n            // Prevent the normal unload confirmation dialog\n            Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n            // Abort the current save request if there is one\n            if (this.saving) {\n                this.saveXhr.abort();\n            }\n\n            // Duplicate the form with normalized data\n            var data = this.prepareData(this.serializeForm(false));\n            var $form = Craft.createForm(data);\n\n            if (this.settings.draftId) {\n                if (!ev.customTrigger || !ev.customTrigger.data('action')) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'action',\n                        value: this.settings.applyDraftAction\n                    }).appendTo($form);\n                }\n\n                if (\n                    (!ev.saveShortcut || !Craft.cp.$primaryForm.data('saveshortcut-redirect')) &&\n                    (!ev.customTrigger || !ev.customTrigger.data('redirect'))\n                ) {\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: 'redirect',\n                        value: this.settings.hashedRedirectUrl\n                    }).appendTo($form);\n                }\n            }\n\n            $form.appendTo(Garnish.$bod);\n            $form.submit();\n            this.submittingForm = true;\n        },\n    },\n    {\n        defaults: {\n            elementType: null,\n            sourceId: null,\n            siteId: null,\n            isLive: false,\n            siteStatuses: null,\n            addlSiteIds: [],\n            enabledGlobally: null,\n            cpEditUrl: null,\n            draftId: null,\n            revisionId: null,\n            draftName: null,\n            draftNotes: null,\n            canDeleteDraft: false,\n            canUpdateSource: false,\n            saveDraftAction: null,\n            deleteDraftAction: null,\n            applyDraftAction: null,\n            enablePreview: false,\n            previewTargets: [],\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend(\n    {\n        callback: $.noop,\n\n        init: function(source, target, callback) {\n            this.callback = callback;\n            this.base(source, target);\n        },\n\n        generateTargetValue: function(sourceVal) {\n            return this.callback(sourceVal);\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend(\n    {\n        initialized: false,\n\n        id: null,\n        baseName: null,\n        columns: null,\n        sorter: null,\n        biggestId: -1,\n\n        $table: null,\n        $tbody: null,\n        $addRowBtn: null,\n\n        rowCount: 0,\n        hasMaxRows: false,\n        hasMinRows: false,\n\n        radioCheckboxes: null,\n\n        init: function(id, baseName, columns, settings) {\n            this.id = id;\n            this.baseName = baseName;\n            this.columns = columns;\n            this.setSettings(settings, Craft.EditableTable.defaults);\n            this.radioCheckboxes = {};\n\n            this.$table = $('#' + id);\n            this.$tbody = this.$table.children('tbody');\n            this.rowCount = this.$tbody.find('tr').length;\n\n            // Is this already an editable table?\n            if (this.$table.data('editable-table')) {\n                Garnish.log('Double-instantiating an editable table on an element');\n                this.$table.data('editable-table').destroy();\n            }\n\n            this.$table.data('editable-table', this);\n\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                helperClass: 'editabletablesorthelper',\n                copyDraggeeInputValuesToHelper: true\n            });\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                // Give everything a chance to initialize\n                setTimeout($.proxy(this, 'initializeIfVisible'), 500);\n            }\n\n            if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n                for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                    this.addRow()\n                }\n            }\n        },\n\n        isVisible: function() {\n            return (this.$table.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return false;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            var $rows = this.$tbody.children();\n\n            for (var i = 0; i < $rows.length; i++) {\n                this.createRowObj($rows[i]);\n            }\n\n            this.$addRowBtn = this.$table.next('.add');\n            this.updateAddRowButton();\n            this.addListener(this.$addRowBtn, 'activate', 'addRow');\n            return true;\n        },\n        initializeIfVisible: function() {\n            this.removeListener(Garnish.$win, 'resize');\n\n            if (this.isVisible()) {\n                this.initialize();\n            } else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n        updateAddRowButton: function() {\n            if (!this.canAddRow()) {\n                this.$addRowBtn.css('opacity', '0.2');\n                this.$addRowBtn.css('pointer-events', 'none');\n            } else {\n                this.$addRowBtn.css('opacity', '1');\n                this.$addRowBtn.css('pointer-events', 'auto');\n            }\n        },\n        canDeleteRow: function() {\n            return (this.rowCount > this.settings.minRows);\n        },\n        deleteRow: function(row) {\n            if (!this.canDeleteRow()) {\n                return;\n            }\n\n            this.sorter.removeItems(row.$tr);\n            row.$tr.remove();\n\n            this.rowCount--;\n\n            this.updateAddRowButton();\n            // onDeleteRow callback\n            this.settings.onDeleteRow(row.$tr);\n\n            row.destroy();\n        },\n        canAddRow: function() {\n            if (this.settings.staticRows) {\n                return false;\n            }\n\n            if (this.settings.maxRows) {\n                return (this.rowCount < this.settings.maxRows);\n            }\n\n            return true;\n        },\n        addRow: function(focus, prepend) {\n            if (!this.canAddRow()) {\n                return;\n            }\n\n            var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n                $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n            if (prepend) {\n                $tr.prependTo(this.$tbody);\n            } else {\n                $tr.appendTo(this.$tbody);\n            }\n\n            var row = this.createRowObj($tr);\n            this.sorter.addItems($tr);\n\n            // Focus the first input in the row\n            if (focus !== false) {\n                $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n            }\n\n            this.rowCount++;\n            this.updateAddRowButton();\n\n            // onAddRow callback\n            this.settings.onAddRow($tr);\n\n            return row;\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n        },\n\n        createRowObj: function($tr) {\n            return new Craft.EditableTable.Row(this, $tr);\n        },\n\n        focusOnPrevRow: function($tr, tdIndex, blurTd) {\n            var $prevTr = $tr.prev('tr');\n            var prevRow;\n\n            if ($prevTr.length) {\n                prevRow = $prevTr.data('editable-table-row');\n            } else {\n                prevRow = this.addRow(false, true);\n            }\n\n            // Focus on the same cell in the previous row\n            if (!prevRow) {\n                return;\n            }\n\n            if (!prevRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($prevTr) {\n                    this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        focusOnNextRow: function($tr, tdIndex, blurTd) {\n            var $nextTr = $tr.next('tr');\n            var nextRow;\n\n            if ($nextTr.length) {\n                nextRow = $nextTr.data('editable-table-row');\n            } else {\n                nextRow = this.addRow(false);\n            }\n\n            // Focus on the same cell in the next row\n            if (!nextRow) {\n                return;\n            }\n\n            if (!nextRow.$tds[tdIndex]) {\n                return;\n            }\n\n            if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n                if ($nextTr) {\n                    this.focusOnNextRow($nextTr, tdIndex, blurTd);\n                }\n                return;\n            }\n\n            var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n            if ($input.length) {\n                $(blurTd).trigger('blur');\n                $input.trigger('focus');\n            }\n        },\n\n        importData: function(data, row, tdIndex) {\n            let lines = data.split(/\\r?\\n|\\r/);\n            for (let i = 0; i < lines.length; i++) {\n                let values = lines[i].split(\"\\t\");\n                for (let j = 0; j < values.length; j++) {\n                    let value = values[j];\n                    row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                        .val(value)\n                        .trigger('input');\n                }\n\n                // move onto the next row\n                let $nextTr = row.$tr.next('tr');\n                if ($nextTr.length) {\n                    row = $nextTr.data('editable-table-row');\n                } else {\n                    row = this.addRow(false);\n                }\n            }\n        },\n    },\n    {\n        textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n        defaults: {\n            rowIdPrefix: '',\n            defaultValues: {},\n            staticRows: false,\n            minRows: null,\n            maxRows: null,\n            onAddRow: $.noop,\n            onDeleteRow: $.noop\n        },\n\n        createRow: function(rowId, columns, baseName, values) {\n            var $tr = $('<tr/>', {\n                'data-id': rowId\n            });\n\n            for (var colId in columns) {\n                if (!columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                var col = columns[colId],\n                    value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                    $cell;\n\n                if (col.type === 'heading') {\n                    $cell = $('<th/>', {\n                        'scope': 'row',\n                        'class': col['class'],\n                        'html': value\n                    });\n                } else {\n                    var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                    $cell = $('<td/>', {\n                        'class': `${col.class} ${col.type}-cell`,\n                        'width': col.width\n                    });\n\n                    if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                        $cell.addClass('textual');\n                    }\n\n                    if (col.code) {\n                        $cell.addClass('code');\n                    }\n\n                    switch (col.type) {\n                        case 'checkbox':\n                            $('<div class=\"checkbox-wrapper\"/>')\n                                .append(Craft.ui.createCheckbox({\n                                        name: name,\n                                        value: col.value || '1',\n                                        checked: !!value\n                                    })\n                                )\n                                .appendTo($cell);\n                            break;\n\n                        case 'color':\n                            Craft.ui.createColorInput({\n                                name: name,\n                                value: value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'date':\n                            Craft.ui.createDateInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'lightswitch':\n                            Craft.ui.createLightswitch({\n                                name: name,\n                                value: col.value || '1',\n                                on: !!value,\n                                small: true\n                            }).appendTo($cell);\n                            break;\n\n                        case 'select':\n                            Craft.ui.createSelect({\n                                name: name,\n                                options: col.options,\n                                value: value || (function() {\n                                    for (var key in col.options) {\n                                        if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                            return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                        }\n                                    }\n                                    return null;\n                                })(),\n                                'class': 'small'\n                            }).appendTo($cell);\n                            break;\n\n                        case 'time':\n                            Craft.ui.createTimeInput({\n                                name: name,\n                                value: value\n                            }).appendTo($cell);\n                            break;\n\n                        case 'email':\n                        case 'url':\n                            Craft.ui.createTextInput({\n                                name: name,\n                                value: value,\n                                type: col.type,\n                                placeholder: col.placeholder || null,\n                            }).appendTo($cell);\n                            break;\n\n                        default:\n                            $('<textarea/>', {\n                                'name': name,\n                                'rows': 1,\n                                'val': value,\n                                'placeholder': col.placeholder\n                            }).appendTo($cell);\n                    }\n                }\n\n                $cell.appendTo($tr);\n            }\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'move icon',\n                    'title': Craft.t('app', 'Reorder')\n                })\n            ).appendTo($tr);\n\n            $('<td/>', {\n                'class': 'thin action'\n            }).append(\n                $('<a/>', {\n                    'class': 'delete icon',\n                    'title': Craft.t('app', 'Delete')\n                })\n            ).appendTo($tr);\n\n            return $tr;\n        }\n    });\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend(\n    {\n        table: null,\n        id: null,\n        niceTexts: null,\n\n        $tr: null,\n        $tds: null,\n        tds: null,\n        $textareas: null,\n        $deleteBtn: null,\n\n        init: function(table, tr) {\n            this.table = table;\n            this.$tr = $(tr);\n            this.$tds = this.$tr.children();\n            this.tds = [];\n            this.id = this.$tr.attr('data-id');\n\n            this.$tr.data('editable-table-row', this);\n\n            // Get the row ID, sans prefix\n            var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n            if (id > this.table.biggestId) {\n                this.table.biggestId = id;\n            }\n\n            this.$textareas = $();\n            this.niceTexts = [];\n            var textareasByColId = {};\n\n            var i = 0;\n            var colId, col, td, $textarea, $checkbox;\n\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n                td = this.tds[colId] = this.$tds[i];\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $textarea = $('textarea', td);\n                    this.$textareas = this.$textareas.add($textarea);\n\n                    this.addListener($textarea, 'focus', 'onTextareaFocus');\n                    this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                    this.niceTexts.push(new Garnish.NiceText($textarea, {\n                        onHeightChange: $.proxy(this, 'onTextareaHeightChange')\n                    }));\n\n                    this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                    this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                    $textarea.trigger('input');\n\n                    if (col.type !== 'multiline') {\n                        this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                    }\n\n                    textareasByColId[colId] = $textarea;\n                } else if (col.type === 'checkbox') {\n                    $checkbox = $('input[type=\"checkbox\"]', td);\n\n                    if (col.radioMode) {\n                        if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                            this.table.radioCheckboxes[colId] = [];\n                        }\n                        this.table.radioCheckboxes[colId].push($checkbox[0]);\n                        this.addListener($checkbox, 'change', {colId: colId}, 'onRadioCheckboxChange');\n                    }\n\n                    if (col.toggle) {\n                        this.addListener($checkbox, 'change', {colId: colId}, function(ev) {\n                            this.applyToggleCheckbox(ev.data.colId);\n                        });\n                    }\n                }\n\n                if (!$(td).hasClass('disabled')) {\n                    this.addListener(td, 'click', {td: td}, function(ev) {\n                        if (ev.target === ev.data.td) {\n                            $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                        }\n                    });\n                }\n\n                i++;\n            }\n\n            // Now that all of the text cells have been nice-ified, let's normalize the heights\n            this.onTextareaHeightChange();\n\n            // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n                col = this.table.columns[colId];\n                if (col.type === 'checkbox' && col.toggle) {\n                    this.applyToggleCheckbox(colId);\n                }\n            }\n\n            // Now look for any autopopulate columns\n            for (colId in this.table.columns) {\n                if (!this.table.columns.hasOwnProperty(colId)) {\n                    continue;\n                }\n\n                col = this.table.columns[colId];\n\n                if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                    new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                        allowNonAlphaStart: true\n                    });\n                }\n            }\n\n            var $deleteBtn = this.$tr.children().last().find('.delete');\n            this.addListener($deleteBtn, 'click', 'deleteRow');\n\n            var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n            this.addListener($inputs, 'focus', function(ev) {\n                $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n            });\n            this.addListener($inputs, 'blur', function(ev) {\n                $(ev.currentTarget).closest('td').removeClass('focus');\n            });\n        },\n\n        onTextareaFocus: function(ev) {\n            this.onTextareaHeightChange();\n\n            var $textarea = $(ev.currentTarget);\n\n            if ($textarea.data('ignoreNextFocus')) {\n                $textarea.data('ignoreNextFocus', false);\n                return;\n            }\n\n            setTimeout(function() {\n                Craft.selectFullValue($textarea);\n            }, 0);\n        },\n\n        onRadioCheckboxChange: function(ev) {\n            if (ev.currentTarget.checked) {\n                for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                    var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                    checkbox.checked = (checkbox === ev.currentTarget);\n                }\n            }\n        },\n\n        applyToggleCheckbox: function(checkboxColId) {\n            var checkboxCol = this.table.columns[checkboxColId];\n            var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n            var colId, colIndex, neg;\n            for (var i = 0; i < checkboxCol.toggle.length; i++) {\n                colId = checkboxCol.toggle[i];\n                colIndex = this.table.colum;\n                neg = colId[0] === '!';\n                if (neg) {\n                    colId = colId.substr(1);\n                }\n                if ((checked && !neg) || (!checked && neg)) {\n                    $(this.tds[colId])\n                        .removeClass('disabled')\n                        .find('textarea, input').prop('disabled', false);\n                } else {\n                    $(this.tds[colId])\n                        .addClass('disabled')\n                        .find('textarea, input').prop('disabled', true);\n                }\n            }\n        },\n\n        ignoreNextTextareaFocus: function(ev) {\n            $.data(ev.currentTarget, 'ignoreNextFocus', true);\n        },\n\n        handleKeypress: function(ev) {\n            var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n            var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n            // Going to the next/previous row?\n            if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n                ev.preventDefault();\n                if (ev.shiftKey) {\n                    this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                } else {\n                    this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n                }\n                return;\n            }\n\n            // Was this an invalid number character?\n            if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n                ev.preventDefault();\n            }\n        },\n\n        handlePaste: function(ev) {\n            let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n            if (!data.match(/[\\t\\r\\n]/)) {\n                return;\n            }\n            ev.preventDefault();\n            this.table.importData(data, this, ev.data.tdIndex);\n        },\n\n        validateValue: function(ev) {\n            if (ev.data.type === 'multiline') {\n                return;\n            }\n\n            var safeValue;\n\n            if (ev.data.type === 'number') {\n                // Only grab the number at the beginning of the value (if any)\n                var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n                if (match !== null) {\n                    safeValue = match[1];\n                } else {\n                    safeValue = '';\n                }\n            } else {\n                // Just strip any newlines\n                safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n            }\n\n            if (safeValue !== ev.currentTarget.value) {\n                ev.currentTarget.value = safeValue;\n            }\n        },\n\n        onTextareaHeightChange: function() {\n            // Keep all the textareas' heights in sync\n            var tallestTextareaHeight = -1;\n\n            for (var i = 0; i < this.niceTexts.length; i++) {\n                if (this.niceTexts[i].height > tallestTextareaHeight) {\n                    tallestTextareaHeight = this.niceTexts[i].height;\n                }\n            }\n\n            this.$textareas.css('min-height', tallestTextareaHeight);\n\n            // If the <td> is still taller, go with that instead\n            var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n            if (tdHeight > tallestTextareaHeight) {\n                this.$textareas.css('min-height', tdHeight);\n            }\n        },\n\n        deleteRow: function() {\n            this.table.deleteRow(this);\n        }\n    },\n    {\n        numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend(\n    {\n        maxLevels: null,\n        newChildUrl: null,\n        $trigger: null,\n        $selectedItems: null,\n        triggerEnabled: true,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n            this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n            // Do we have a custom handler?\n            if (this.settings.activate) {\n                // Prevent the element index's click handler\n                this.$trigger.data('custom-handler', true);\n\n                // Is this a custom trigger?\n                if (this.$trigger.prop('nodeName') === 'FORM') {\n                    this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n                }\n                else {\n                    this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n                }\n            }\n\n            this.updateTrigger();\n            Craft.elementIndex.on('selectionChange', $.proxy(this, 'updateTrigger'));\n        },\n\n        updateTrigger: function() {\n            // Ignore if the last element was just unselected\n            if (Craft.elementIndex.getSelectedElements().length === 0) {\n                return;\n            }\n\n            if (this.validateSelection()) {\n                this.enableTrigger();\n            }\n            else {\n                this.disableTrigger();\n            }\n        },\n\n        /**\n         * Determines if this action can be performed on the currently selected elements.\n         *\n         * @return boolean\n         */\n        validateSelection: function() {\n            var valid = true;\n            this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n            if (!this.settings.batch && this.$selectedItems.length > 1) {\n                valid = false;\n            }\n            else if (typeof this.settings.validateSelection === 'function') {\n                valid = this.settings.validateSelection(this.$selectedItems);\n            }\n\n            return valid;\n        },\n\n        enableTrigger: function() {\n            if (this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.triggerEnabled = true;\n        },\n\n        disableTrigger: function() {\n            if (!this.triggerEnabled) {\n                return;\n            }\n\n            this.$trigger.addClass('disabled');\n            this.triggerEnabled = false;\n        },\n\n        handleTriggerActivation: function(ev) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (this.triggerEnabled) {\n                this.settings.activate(this.$selectedItems);\n            }\n        }\n    },\n    {\n        defaults: {\n            type: null,\n            batch: true,\n            validateSelection: null,\n            activate: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend(\n    {\n        queue: null,\n        workers: [],\n\n        init: function() {\n            this.queue = [];\n\n            for (var i = 0; i < 3; i++) {\n                this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n            }\n        },\n\n        load: function($elements) {\n            // Only immediately load the visible images\n            let $thumbs = $elements.find('.elementthumb');\n            for (let i = 0; i < $thumbs.length; i++) {\n                let $thumb = $thumbs.eq(i);\n                let $scrollParent = $thumb.scrollParent();\n                if (this.isVisible($thumb, $scrollParent)) {\n                    this.addToQueue($thumb[0]);\n                } else {\n                    let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                    Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                    $scrollParent.on(`scroll.${key}`, {\n                        $thumb: $thumb,\n                        $scrollParent: $scrollParent,\n                        key: key,\n                    }, (ev) => {\n                        if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                            delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                            $scrollParent.off(`scroll.${ev.data.key}`);\n                            this.addToQueue(ev.data.$thumb[0]);\n                        }\n                    });\n                }\n            }\n        },\n\n        addToQueue: function(thumb) {\n            this.queue.push(thumb);\n\n            // See if there are any inactive workers\n            for (var i = 0; i < this.workers.length; i++) {\n                if (!this.workers[i].active) {\n                    this.workers[i].loadNext();\n                }\n            }\n        },\n\n        isVisible: function($thumb, $scrollParent) {\n            let thumbOffset = $thumb.offset().top;\n            let scrollParentOffset, scrollParentHeight;\n            if ($scrollParent[0] === document) {\n                scrollParentOffset = $scrollParent.scrollTop();\n                scrollParentHeight = Garnish.$win.height();\n            } else {\n                scrollParentOffset = $scrollParent.offset().top;\n                scrollParentHeight = $scrollParent.height();\n            }\n            return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n        },\n\n        destroy: function() {\n            for (var i = 0; i < this.workers.length; i++) {\n                this.workers[i].destroy();\n            }\n\n            this.base();\n        }\n    }, {\n        invisibleThumbs: {},\n        retryAll: function() {\n            for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n                let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n                delete Craft.ElementThumbLoader.invisibleThumbs[key];\n                $scrollParent.off(`scroll.${key}`);\n                queue.load($thumb.parent());\n            }\n        }\n    }\n);\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend(\n    {\n        loader: null,\n        active: false,\n\n        init: function(loader) {\n            this.loader = loader;\n        },\n\n        loadNext: function() {\n            var container = this.loader.queue.shift();\n            if (typeof container === 'undefined') {\n                this.active = false;\n                return;\n            }\n\n            this.active = true;\n            var $container = $(container);\n            if ($container.find('img').length) {\n                this.loadNext();\n                return;\n            }\n            var $img = $('<img/>', {\n                sizes: $container.attr('data-sizes'),\n                srcset: $container.attr('data-srcset'),\n                alt: ''\n            });\n            this.addListener($img, 'load,error', 'loadNext');\n            $img.appendTo($container);\n            picturefill({\n                elements: [$img[0]]\n            });\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend(\n    {\n        $form: null,\n        inputs: null,\n\n        init: function(form, inputs) {\n            this.$form = $(form);\n\n            // Only check specific inputs?\n            if (typeof inputs !== 'undefined') {\n                this.inputs = [];\n                inputs = $.makeArray(inputs);\n\n                for (var i = 0; i < inputs.length; i++) {\n                    var $inputs = $(inputs[i]);\n\n                    for (var j = 0; j < $inputs.length; j++) {\n                        var $input = $inputs.eq(j);\n\n                        this.inputs.push({\n                            input: $input,\n                            val: Garnish.getInputPostVal($input)\n                        });\n                    }\n                }\n            }\n\n            this.addListener(this.$form, 'submit', 'handleFormSubmit');\n        },\n\n        handleFormSubmit: function(ev) {\n            // Ignore if we're in the middle of getting the elevated session timeout\n            if (Craft.elevatedSessionManager.fetchingTimeout) {\n                ev.preventDefault();\n                ev.stopImmediatePropagation();\n                return;\n            }\n\n            // Are we only interested in certain inputs?\n            if (this.inputs) {\n                var inputsChanged = false;\n                var $input;\n\n                for (var i = 0; i < this.inputs.length; i++) {\n                    $input = this.inputs[i].input;\n                    // Is this a password input?\n                    if ($input.data('passwordInput')) {\n                        $input = $input.data('passwordInput').$currentInput;\n                    }\n\n                    // Has this input's value changed?\n                    if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                        inputsChanged = true;\n                        break;\n                    }\n                }\n\n                if (!inputsChanged) {\n                    // No need to interrupt the submit\n                    return;\n                }\n            }\n\n            // Prevent the form from submitting until the user has an elevated session\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            Craft.elevatedSessionManager.requireElevatedSession($.proxy(this, 'submitForm'));\n        },\n\n        submitForm: function() {\n            // Don't let handleFormSubmit() interrupt this time\n            this.disable();\n            this.$form.trigger('submit');\n            this.enable();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend(\n    {\n        fetchingTimeout: false,\n\n        passwordModal: null,\n        $passwordInput: null,\n        $passwordSpinner: null,\n        $submitBtn: null,\n        $errorPara: null,\n\n        callback: null,\n\n        /**\n         * Requires that the user has an elevated session.\n         *\n         * @param {function} callback The callback function that should be called once the user has an elevated session\n         */\n        requireElevatedSession: function(callback) {\n            this.callback = callback;\n\n            // Check the time remaining on the user's elevated session (if any)\n            this.fetchingTimeout = true;\n\n            Craft.postActionRequest('users/get-elevated-session-timeout', $.proxy(function(response, textStatus) {\n                this.fetchingTimeout = false;\n\n                if (textStatus === 'success') {\n                    // Is there still enough time left or has it been disabled?\n                    if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                        this.callback();\n                    }\n                    else {\n                        // Show the password modal\n                        this.showPasswordModal();\n                    }\n                }\n            }, this));\n        },\n\n        showPasswordModal: function() {\n            if (!this.passwordModal) {\n                var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                    $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                    $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                    $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                    $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                    $buttonContainer= $('<td/>').appendTo($inputsFlexContainer),\n                    $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n                this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n                this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n                this.$submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'Submit') + '\" />').appendTo($buttonContainer);\n                this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n                this.passwordModal = new Garnish.Modal($passwordModal, {\n                    closeOtherModals: false,\n                    onFadeIn: $.proxy(function() {\n                        setTimeout($.proxy(this, 'focusPasswordInput'), 100);\n                    }, this),\n                    onFadeOut: $.proxy(function() {\n                        this.$passwordInput.val('');\n                    }, this)\n                });\n\n                new Craft.PasswordInput(this.$passwordInput, {\n                    onToggleInput: $.proxy(function($newPasswordInput) {\n                        this.$passwordInput = $newPasswordInput;\n                    }, this)\n                });\n\n                this.addListener(this.$passwordInput, 'input', 'validatePassword');\n                this.addListener($passwordModal, 'submit', 'submitPassword');\n            }\n            else {\n                this.passwordModal.show();\n            }\n        },\n\n        focusPasswordInput: function() {\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$passwordInput.trigger('focus');\n            }\n        },\n\n        validatePassword: function() {\n            if (this.$passwordInput.val().length >= 6) {\n                this.$submitBtn.removeClass('disabled');\n                return true;\n            }\n            else {\n                this.$submitBtn.addClass('disabled');\n                return false;\n            }\n        },\n\n        submitPassword: function(ev) {\n            if (ev) {\n                ev.preventDefault();\n            }\n\n            if (!this.validatePassword()) {\n                return;\n            }\n\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            var data = {\n                currentPassword: this.$passwordInput.val()\n            };\n\n            Craft.postActionRequest('users/start-elevated-session', data, $.proxy(function(response, textStatus) {\n                this.$passwordSpinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        this.passwordModal.hide();\n                        this.callback();\n                    }\n                    else {\n                        this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                        Garnish.shake(this.passwordModal.$container);\n                        this.focusPasswordInput();\n                    }\n                }\n                else {\n                    this.showPasswordError();\n                }\n            }, this));\n        },\n\n        showPasswordError: function(error) {\n            if (error === null || typeof error === 'undefined') {\n                error = Craft.t('app', 'A server error occurred.');\n            }\n\n            this.$errorPara.text(error);\n            this.passwordModal.updateSizeAndPosition();\n        },\n\n        clearLoginError: function() {\n            this.showPasswordError('');\n        }\n    },\n    {\n        minSafeElevatedSessionTimeout: 5\n    });\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend(\n    {\n        publishableSections: null,\n        $newEntryBtnGroup: null,\n        $newEntryBtn: null,\n\n        init: function(elementType, $container, settings) {\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible sections the user has permission to create new entries in\n            this.publishableSections = [];\n\n            for (var i = 0; i < Craft.publishableSections.length; i++) {\n                var section = Craft.publishableSections[i];\n\n                if (this.getSourceByKey('section:' + section.uid)) {\n                    this.publishableSections.push(section);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific section in the URL?\n            if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n                if (defaultSectionHandle === 'singles') {\n                    return 'singles';\n                }\n                else {\n                    for (var i = 0; i < this.$sources.length; i++) {\n                        var $source = $(this.$sources[i]);\n\n                        if ($source.data('handle') === defaultSectionHandle) {\n                            return $source.data('key');\n                        }\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            var handle;\n\n            // Get the handle of the selected source\n            if (this.$source.data('key') === 'singles') {\n                handle = 'singles';\n            }\n            else {\n                handle = this.$source.data('handle');\n            }\n\n            // Update the New Entry button\n            // ---------------------------------------------------------------------\n\n            var i, href, label;\n\n            if (this.publishableSections.length) {\n                // Remove the old button, if there is one\n                if (this.$newEntryBtnGroup) {\n                    this.$newEntryBtnGroup.remove();\n                }\n\n                // Determine if they are viewing a section that they have permission to create entries in\n                var selectedSection;\n\n                if (handle) {\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        if (this.publishableSections[i].handle === handle) {\n                            selectedSection = this.publishableSections[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n                // Otherwise only show a menu button\n                if (selectedSection) {\n                    href = this._getSectionTriggerHref(selectedSection);\n                    label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                    this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                            this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.publishableSections.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newEntryBtnGroup);\n                    }\n                }\n                else {\n                    this.$newEntryBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('app', 'New entry') + '</div>').appendTo(this.$newEntryBtnGroup);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.publishableSections.length; i++) {\n                        var section = this.publishableSections[i];\n\n                        if (\n                            (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                            (this.settings.context !== 'index' && section !== selectedSection)\n                        ) {\n                            href = this._getSectionTriggerHref(section);\n                            label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                            menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newEntryBtnGroup);\n            }\n\n            // Update the URL if we're on the Entries index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'entries';\n\n                if (handle) {\n                    uri += '/' + handle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getSectionTriggerHref: function(section) {\n            if (this.settings.context === 'index') {\n                var uri = 'entries/' + section.handle + '/new';\n                let params = {};\n                if (this.siteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            params.site = Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n            } else {\n                return 'data-id=\"' + section.id + '\"';\n            }\n        },\n\n        _openCreateEntryModal: function(sectionId) {\n            if (this.$newEntryBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the section\n            var section;\n\n            for (var i = 0; i < this.publishableSections.length; i++) {\n                if (this.publishableSections[i].id == sectionId) {\n                    section = this.publishableSections[i];\n                    break;\n                }\n            }\n\n            if (!section) {\n                return;\n            }\n\n            this.$newEntryBtn.addClass('inactive');\n            var newEntryBtnText = this.$newEntryBtn.text();\n            this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newEntryBtnGroup,\n                siteId: this.siteId,\n                attributes: {\n                    sectionId: sectionId,\n                    typeId: section.entryTypes[0].id,\n                    enabled: section.canPublish ? 1 : 0,\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newEntryBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right section is selected\n                    var sectionSourceKey = 'section:' + section.uid;\n\n                    if (this.sourceKey !== sectionSourceKey) {\n                        this.selectSourceByKey(sectionSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend(\n    {\n        $container: null,\n        $tabContainer: null,\n        $unusedFieldContainer: null,\n        $newTabBtn: null,\n        $allFields: null,\n\n        tabGrid: null,\n        unusedFieldGrid: null,\n\n        tabDrag: null,\n        fieldDrag: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n            this.$tabContainer = this.$container.children('.fld-tabs');\n            this.$unusedFieldContainer = this.$container.children('.unusedfields');\n            this.$newTabBtn = this.$container.find('> .newtabbtn-container > .btn');\n            this.$allFields = this.$unusedFieldContainer.find('.fld-field');\n\n            // Set up the layout grids\n            this.tabGrid = new Craft.Grid(this.$tabContainer, Craft.FieldLayoutDesigner.gridSettings);\n            this.unusedFieldGrid = new Craft.Grid(this.$unusedFieldContainer, Craft.FieldLayoutDesigner.gridSettings);\n\n            var $tabs = this.$tabContainer.children();\n            for (var i = 0; i < $tabs.length; i++) {\n                this.initTab($($tabs[i]));\n            }\n\n            this.fieldDrag = new Craft.FieldLayoutDesigner.FieldDrag(this);\n\n            if (this.settings.customizableTabs) {\n                this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n                this.addListener(this.$newTabBtn, 'activate', 'addTab');\n            }\n        },\n\n        initTab: function($tab) {\n            if (this.settings.customizableTabs) {\n                var $editBtn = $tab.find('.tabs .settings'),\n                    $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                    $ul = $('<ul/>').appendTo($menu);\n\n                $('<li><a data-action=\"rename\">' + Craft.t('app', 'Rename') + '</a></li>').appendTo($ul);\n                $('<li><a data-action=\"delete\">' + Craft.t('app', 'Delete') + '</a></li>').appendTo($ul);\n\n                new Garnish.MenuBtn($editBtn, {\n                    onOptionSelect: $.proxy(this, 'onTabOptionSelect')\n                });\n            }\n\n            // Don't forget the fields!\n            var $fields = $tab.children('.fld-tabcontent').children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                this.initField($($fields[i]));\n            }\n        },\n\n        initField: function($field) {\n            var $editBtn = $field.find('.settings'),\n                $menu = $('<div class=\"menu\" data-align=\"center\"/>').insertAfter($editBtn),\n                $ul = $('<ul/>').appendTo($menu);\n\n            if ($field.hasClass('fld-required')) {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make not required') + '</a></li>').appendTo($ul);\n            }\n            else {\n                $('<li><a data-action=\"toggle-required\">' + Craft.t('app', 'Make required') + '</a></li>').appendTo($ul);\n            }\n\n            $('<li><a data-action=\"remove\">' + Craft.t('app', 'Remove') + '</a></li>').appendTo($ul);\n\n            new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: $.proxy(this, 'onFieldOptionSelect')\n            });\n        },\n\n        onTabOptionSelect: function(option) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $option = $(option),\n                $tab = $option.data('menu').$anchor.parent().parent().parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'rename': {\n                    this.renameTab($tab);\n                    break;\n                }\n                case 'delete': {\n                    this.deleteTab($tab);\n                    break;\n                }\n            }\n        },\n\n        onFieldOptionSelect: function(option) {\n            var $option = $(option),\n                $field = $option.data('menu').$anchor.parent(),\n                action = $option.data('action');\n\n            switch (action) {\n                case 'toggle-required': {\n                    this.toggleRequiredField($field, $option);\n                    break;\n                }\n                case 'remove': {\n                    this.removeField($field);\n                    break;\n                }\n            }\n        },\n\n        renameTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $labelSpan = $tab.find('.tabs .tab span'),\n                oldName = $labelSpan.text(),\n                newName = prompt(Craft.t('app', 'Give your tab a name.'), oldName);\n\n            if (newName && newName !== oldName) {\n                $labelSpan.text(newName);\n                $tab.find('.id-input').attr('name', this.getFieldInputName(newName));\n            }\n        },\n\n        deleteTab: function($tab) {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            // Find all the fields in this tab\n            var $fields = $tab.find('.fld-field');\n\n            for (var i = 0; i < $fields.length; i++) {\n                var fieldId = $($fields[i]).attr('data-id');\n                this.removeFieldById(fieldId);\n            }\n\n            this.tabGrid.removeItems($tab);\n            this.tabDrag.removeItems($tab);\n\n            $tab.remove();\n        },\n\n        toggleRequiredField: function($field, $option) {\n            if ($field.hasClass('fld-required')) {\n                $field.removeClass('fld-required');\n                $field.find('.required-input').remove();\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make required'));\n                }, 500);\n            }\n            else {\n                $field.addClass('fld-required');\n                $('<input class=\"required-input\" type=\"hidden\" name=\"' + this.settings.requiredFieldInputName + '\" value=\"' + $field.data('id') + '\">').appendTo($field);\n\n                setTimeout(function() {\n                    $option.text(Craft.t('app', 'Make not required'));\n                }, 500);\n            }\n        },\n\n        removeField: function($field) {\n            var fieldId = $field.attr('data-id');\n\n            $field.remove();\n\n            this.removeFieldById(fieldId);\n            this.tabGrid.refreshCols(true);\n        },\n\n        removeFieldById: function(fieldId) {\n            var $field = this.$allFields.filter('[data-id=' + fieldId + ']:first'),\n                $group = $field.closest('.fld-tab');\n\n            $field.removeClass('hidden');\n\n            if ($group.hasClass('hidden')) {\n                $group.removeClass('hidden');\n                this.unusedFieldGrid.addItems($group);\n\n                if (this.settings.customizableTabs) {\n                    this.tabDrag.addItems($group);\n                }\n            }\n            else {\n                this.unusedFieldGrid.refreshCols(true);\n            }\n        },\n\n        addTab: function() {\n            if (!this.settings.customizableTabs) {\n                return;\n            }\n\n            var $tab = $('<div class=\"fld-tab\">' +\n                '<div class=\"tabs\">' +\n                '<div class=\"tab sel draggable\">' +\n                '<span>Tab ' + (this.tabGrid.$items.length + 1) + '</span>' +\n                '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Rename') + '\"></a>' +\n                '</div>' +\n                '</div>' +\n                '<div class=\"fld-tabcontent\"></div>' +\n                '</div>').appendTo(this.$tabContainer);\n\n            this.tabGrid.addItems($tab);\n            this.tabDrag.addItems($tab);\n\n            this.initTab($tab);\n        },\n\n        getFieldInputName: function(tabName) {\n            return this.settings.fieldInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n        }\n    },\n    {\n        gridSettings: {\n            itemSelector: '.fld-tab:not(.hidden)',\n            minColWidth: 240,\n            fillMode: 'grid',\n            snapToGrid: 30\n        },\n        defaults: {\n            customizableTabs: true,\n            fieldInputName: 'fieldLayout[__TAB_NAME__][]',\n            requiredFieldInputName: 'requiredFields[]'\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend(\n    {\n        designer: null,\n        $insertion: null,\n        showingInsertion: false,\n        $caboose: null,\n        draggingUnusedItem: false,\n        addToTabGrid: false,\n\n        /**\n         * Constructor\n         */\n        init: function(designer, settings) {\n            this.designer = designer;\n\n            // Find all the items from both containers\n            var $items = this.designer.$tabContainer.find(this.itemSelector)\n                .add(this.designer.$unusedFieldContainer.find(this.itemSelector));\n\n            this.base($items, settings);\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.base();\n\n            // Are we dragging an unused item?\n            this.draggingUnusedItem = this.$draggee.hasClass('unused');\n\n            // Create the insertion\n            this.$insertion = this.getInsertion();\n\n            // Add the caboose\n            this.addCaboose();\n            this.$items = $().add(this.$items.add(this.$caboose));\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.addItems(this.$caboose);\n            }\n\n            // Swap the draggee with the insertion if dragging a selected item\n            if (this.draggingUnusedItem) {\n                this.showingInsertion = false;\n            }\n            else {\n                // Actually replace the draggee with the insertion\n                this.$insertion.insertBefore(this.$draggee);\n                this.$draggee.detach();\n                this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n                this.showingInsertion = true;\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$draggee);\n                    this.designer.tabGrid.addItems(this.$insertion);\n                }\n            }\n\n            this.setMidpoints();\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: $.noop,\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: $.noop,\n\n        /**\n         * Tests if an item is within the tab container.\n         */\n        isItemInTabContainer: function($item) {\n            return (this.getItemContainer($item)[0] === this.designer.$tabContainer[0]);\n        },\n\n        /**\n         * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n         */\n        setMidpoints: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                var $item = $(this.$items[i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer($item)) {\n                    continue;\n                }\n\n                var offset = $item.offset();\n\n                $item.data('midpoint', {\n                    left: offset.left + $item.outerWidth() / 2,\n                    top: offset.top + $item.outerHeight() / 2\n                });\n            }\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // Are we hovering over the tab container?\n            if (this.draggingUnusedItem && !Garnish.hitTest(this.mouseX, this.mouseY, this.designer.$tabContainer)) {\n                if (this.showingInsertion) {\n                    this.$insertion.remove();\n                    this.$items = $().add(this.$items.not(this.$insertion));\n                    this.showingInsertion = false;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.removeItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                this.onDrag._closestItem = this.getClosestItem();\n\n                if (this.onDrag._closestItem !== this.$insertion[0]) {\n                    if (this.showingInsertion &&\n                        ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.onDrag._closestItem, this.$items)) &&\n                        ($.inArray(this.onDrag._closestItem, this.$caboose) === -1)\n                    ) {\n                        this.$insertion.insertAfter(this.onDrag._closestItem);\n                    }\n                    else {\n                        this.$insertion.insertBefore(this.onDrag._closestItem);\n                    }\n\n                    this.$items = $().add(this.$items.add(this.$insertion));\n                    this.showingInsertion = true;\n\n                    if (this.addToTabGrid) {\n                        this.designer.tabGrid.addItems(this.$insertion);\n                    }\n                    else {\n                        this.designer.tabGrid.refreshCols(true);\n                    }\n\n                    this.setMidpoints();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        getClosestItem: function() {\n            this.getClosestItem._closestItem = null;\n            this.getClosestItem._closestItemMouseDiff = null;\n\n            for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n                this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n                // Skip the unused tabs\n                if (!this.isItemInTabContainer(this.getClosestItem._$item)) {\n                    continue;\n                }\n\n                this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n                this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n                if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                    this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                    this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n                }\n            }\n\n            return this.getClosestItem._closestItem;\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.showingInsertion) {\n                this.$insertion.replaceWith(this.$draggee);\n                this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n\n                if (this.addToTabGrid) {\n                    this.designer.tabGrid.removeItems(this.$insertion);\n                    this.designer.tabGrid.addItems(this.$draggee);\n                }\n            }\n\n            // Drop the caboose\n            this.$items = this.$items.not(this.$caboose);\n            this.$caboose.remove();\n\n            if (this.addToTabGrid) {\n                this.designer.tabGrid.removeItems(this.$caboose);\n            }\n\n            // \"show\" the drag items, but make them invisible\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'hidden'\n            });\n\n            this.designer.tabGrid.refreshCols(true);\n            this.designer.unusedFieldGrid.refreshCols(true);\n\n            // return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab',\n        addToTabGrid: true,\n\n        /**\n         * Constructor\n         */\n        init: function(designer) {\n            var settings = {\n                handle: '.tab'\n            };\n\n            this.base(designer, settings);\n        },\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            var $tab = this.$draggee.find('.tab');\n\n            return $('<div class=\"fld-tab fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\">' +\n                '<div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ' + $tab.width() + 'px; height: ' + $tab.height() + 'px;\"></div></div>' +\n                '<div class=\"fld-tabcontent\" style=\"height: ' + this.$draggee.find('.fld-tabcontent').height() + 'px;\"></div>' +\n                '</div>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new tab based on that field group\n                var $tab = this.$draggee.clone().removeClass('unused'),\n                    tabName = $tab.find('.tab span').text();\n\n                $tab.find('.fld-field').removeClass('unused');\n\n                // Add the edit button\n                $tab.find('.tabs .tab').append('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                // Remove any hidden fields\n                var $fields = $tab.find('.fld-field'),\n                    $hiddenFields = $fields.filter('.hidden').remove();\n\n                $fields = $fields.not($hiddenFields);\n                $fields.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n\n                for (var i = 0; i < $fields.length; i++) {\n                    var $field = $($fields[i]),\n                        inputName = this.designer.getFieldInputName(tabName);\n\n                    $field.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + $field.data('id') + '\">');\n                }\n\n                this.designer.fieldDrag.addItems($fields);\n\n                this.designer.initTab($tab);\n\n                // Set the unused field group and its fields to hidden\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n                this.$draggee.find('.fld-field').addClass('hidden');\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $tab;\n\n                // Remember it for later\n                this.addItems($tab);\n\n                // Update the grids\n                this.designer.tabGrid.addItems($tab);\n                this.designer.unusedFieldGrid.removeItems(this.$draggee);\n            }\n\n            this.base();\n        }\n    });\n\n\nCraft.FieldLayoutDesigner.FieldDrag = Craft.FieldLayoutDesigner.BaseDrag.extend(\n    {\n        itemSelector: '> div.fld-tab .fld-field',\n\n        /**\n         * Append the caboose\n         */\n        addCaboose: function() {\n            this.$caboose = $();\n\n            var $fieldContainers = this.designer.$tabContainer.children().children('.fld-tabcontent');\n\n            for (var i = 0; i < $fieldContainers.length; i++) {\n                var $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo($fieldContainers[i]);\n                this.$caboose = this.$caboose.add($caboose);\n            }\n        },\n\n        /**\n         * Returns the insertion\n         */\n        getInsertion: function() {\n            return $('<div class=\"fld-field fld-insertion\" style=\"height: ' + this.$draggee.height() + 'px;\"/>');\n        },\n\n        /**\n         * Returns the item's container\n         */\n        getItemContainer: function($item) {\n            return $item.parent().parent().parent();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.draggingUnusedItem && this.showingInsertion) {\n                // Create a new field based on that one\n                var $field = this.$draggee.clone().removeClass('unused');\n                $field.prepend('<a class=\"settings icon\" title=\"' + Craft.t('app', 'Edit') + '\"></a>');\n                this.designer.initField($field);\n\n                // Hide the unused field\n                this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                // Hide the group too?\n                if (this.$draggee.siblings(':not(.hidden)').length === 0) {\n                    var $group = this.$draggee.parent().parent();\n                    $group.addClass('hidden');\n                    this.designer.unusedFieldGrid.removeItems($group);\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $field;\n\n                // Remember it for later\n                this.addItems($field);\n            }\n\n            if (this.showingInsertion) {\n                // Find the field's new tab name\n                var tabName = this.$insertion.parent().parent().find('.tab span').text(),\n                    inputName = this.designer.getFieldInputName(tabName);\n\n                if (this.draggingUnusedItem) {\n                    this.$draggee.append('<input class=\"id-input\" type=\"hidden\" name=\"' + inputName + '\" value=\"' + this.$draggee.data('id') + '\">');\n                }\n                else {\n                    this.$draggee.find('.id-input').attr('name', inputName);\n                }\n            }\n\n            this.base();\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend(\n    {\n        $toggle: null,\n        targetPrefix: null,\n        targetSelector: null,\n        reverseTargetSelector: null,\n\n        _$target: null,\n        _$reverseTarget: null,\n        type: null,\n\n        init: function(toggle) {\n            this.$toggle = $(toggle);\n\n            // Is this already a field toggle?\n            if (this.$toggle.data('fieldtoggle')) {\n                Garnish.log('Double-instantiating a field toggle on an element');\n                this.$toggle.data('fieldtoggle').destroy();\n            }\n\n            this.$toggle.data('fieldtoggle', this);\n\n            this.type = this.getType();\n\n            if (this.type === 'select') {\n                this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n            }\n            else {\n                this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n                this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n            }\n\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n            }\n            else {\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n            }\n        },\n\n        normalizeTargetSelector: function(selector) {\n            if (selector && !selector.match(/^[#\\.]/)) {\n                selector = '#' + selector;\n            }\n\n            return selector;\n        },\n\n        getType: function() {\n            if (\n                (this.$toggle.prop('nodeName') === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n                this.$toggle.attr('role') === 'checkbox' ||\n                this.$toggle.attr('role') === 'switch'\n            ) {\n                return 'checkbox';\n            }\n            else if (this.$toggle.prop('nodeName') === 'SELECT') {\n                return 'select';\n            }\n            else if (this.$toggle.prop('nodeName') === 'A') {\n                return 'link';\n            }\n        },\n\n        findTargets: function() {\n            if (this.type === 'select') {\n                var toggleVal = this.getToggleVal();\n                this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n            }\n            else {\n                if (this.targetSelector) {\n                    this._$target = $(this.targetSelector);\n                }\n\n                if (this.reverseTargetSelector) {\n                    this._$reverseTarget = $(this.reverseTargetSelector);\n                }\n            }\n        },\n\n        getToggleVal: function() {\n            if (this.type === 'checkbox') {\n                if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                    return this.$toggle.prop('checked');\n                }\n                return this.$toggle.attr('aria-checked') === 'true';\n            }\n\n            let postVal = Garnish.getInputPostVal(this.$toggle);\n            return postVal === null ? null : postVal.replace(/[\\[\\]\\\\\\/]+/g, '-');\n        },\n\n        onToggleChange: function() {\n            if (this.type === 'select') {\n                this.hideTarget(this._$target);\n                this.findTargets();\n                this.showTarget(this._$target);\n            }\n            else {\n                if (this.type === 'link') {\n                    this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n                }\n                else {\n                    this.onToggleChange._show = !!this.getToggleVal();\n                }\n\n                if (this.onToggleChange._show) {\n                    this.showTarget(this._$target);\n                    this.hideTarget(this._$reverseTarget);\n                }\n                else {\n                    this.hideTarget(this._$target);\n                    this.showTarget(this._$reverseTarget);\n                }\n\n                delete this.onToggleChange._show;\n            }\n        },\n\n        showTarget: function($target) {\n            if ($target && $target.length) {\n                this.showTarget._currentHeight = $target.height();\n\n                $target.removeClass('hidden');\n\n                if (this.type !== 'select') {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('collapsed');\n                        this.$toggle.addClass('expanded');\n                    }\n\n                    $target.height('auto');\n                    this.showTarget._targetHeight = $target.height();\n                    $target.css({\n                        height: this.showTarget._currentHeight,\n                        overflow: 'hidden'\n                    });\n\n                    $target.velocity('stop');\n\n                    $target.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                        $target.css({\n                            height: '',\n                            overflow: ''\n                        });\n                    });\n\n                    delete this.showTarget._targetHeight;\n                }\n\n                delete this.showTarget._currentHeight;\n\n                // Trigger a resize event in case there are any grids in the target that need to initialize\n                Garnish.$win.trigger('resize');\n            }\n        },\n\n        hideTarget: function($target) {\n            if ($target && $target.length) {\n                if (this.type === 'select') {\n                    $target.addClass('hidden');\n                }\n                else {\n                    if (this.type === 'link') {\n                        this.$toggle.removeClass('expanded');\n                        this.$toggle.addClass('collapsed');\n                    }\n\n                    $target.css('overflow', 'hidden');\n                    $target.velocity('stop');\n                    $target.velocity({height: 0}, 'fast', function() {\n                        $target.addClass('hidden');\n                    });\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend(\n    {\n        $container: null,\n\n        $items: null,\n        items: null,\n        totalCols: null,\n        colGutterDrop: null,\n        colPctWidth: null,\n\n        possibleItemColspans: null,\n        possibleItemPositionsByColspan: null,\n\n        itemPositions: null,\n        itemColspansByPosition: null,\n\n        layouts: null,\n        layout: null,\n        itemHeights: null,\n        leftPadding: null,\n\n        _refreshingCols: false,\n        _refreshColsAfterRefresh: false,\n        _forceRefreshColsAfterRefresh: false,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n\n            // Is this already a grid?\n            if (this.$container.data('grid')) {\n                Garnish.log('Double-instantiating a grid on an element');\n                this.$container.data('grid').destroy();\n            }\n\n            this.$container.data('grid', this);\n\n            this.setSettings(settings, Craft.Grid.defaults);\n\n            // Set the refreshCols() proxy that container resizes will trigger\n            this.handleContainerHeightProxy = $.proxy(function() {\n                this.refreshCols(false, true);\n            }, this);\n\n            this.$items = this.$container.children(this.settings.itemSelector);\n            this.setItems();\n            this.refreshCols(true, false);\n\n            Garnish.$doc.ready($.proxy(function() {\n                this.refreshCols(false, false);\n            }, this));\n        },\n\n        addItems: function(items) {\n            this.$items = $().add(this.$items.add(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        removeItems: function(items) {\n            this.$items = $().add(this.$items.not(items));\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.setItems();\n            this.refreshCols(true, true);\n        },\n\n        setItems: function() {\n            this.setItems._ = {};\n\n            this.items = [];\n\n            for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n                this.items.push($(this.$items[this.setItems._.i]));\n            }\n\n            delete this.setItems._;\n        },\n\n        refreshCols: function(force) {\n            if (this._refreshingCols) {\n                this._refreshColsAfterRefresh = true;\n                if (force) {\n                    this._forceRefreshColsAfterRefresh = true;\n                }\n                return;\n            }\n\n            this._refreshingCols = true;\n\n            if (!this.items.length) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.refreshCols._ = {};\n\n            // Check to see if the grid is actually visible\n            this.refreshCols._.oldHeight = this.$container[0].style.height;\n            this.$container[0].style.height = 1;\n            this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n            this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n            if (this.refreshCols._.scrollHeight === 0) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            if (this.settings.cols) {\n                this.refreshCols._.totalCols = this.settings.cols;\n            }\n            else {\n                this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n                // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n                if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                    this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n                }\n\n                if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                    this.refreshCols._.totalCols = this.settings.maxCols;\n                }\n            }\n\n            if (this.refreshCols._.totalCols === 0) {\n                this.refreshCols._.totalCols = 1;\n            }\n\n            // Same number of columns as before?\n            if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n                this.completeRefreshCols();\n                return;\n            }\n\n            this.totalCols = this.refreshCols._.totalCols;\n            this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n            // Temporarily stop listening to container resizes\n            this.removeListener(this.$container, 'resize');\n\n            if (this.settings.fillMode === 'grid') {\n                this.refreshCols._.itemIndex = 0;\n\n                while (this.refreshCols._.itemIndex < this.items.length) {\n                    // Append the next X items and figure out which one is the tallest\n                    this.refreshCols._.tallestItemHeight = -1;\n                    this.refreshCols._.colIndex = 0;\n\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                        if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                            this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                        }\n\n                        this.refreshCols._.colIndex++;\n                    }\n\n                    if (this.settings.snapToGrid) {\n                        this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                        if (this.refreshCols._.remainder) {\n                            this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                        }\n                    }\n\n                    // Now set their heights to the tallest one\n                    for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                        this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                    }\n\n                    // set the this.refreshCols._.itemIndex pointer to the next one up\n                    this.refreshCols._.itemIndex += this.totalCols;\n                }\n            }\n            else {\n                this.removeListener(this.$items, 'resize');\n\n                // If there's only one column, sneak out early\n                if (this.totalCols === 1) {\n                    this.$container.height('auto');\n                    this.$items\n                        .show()\n                        .css({\n                            position: 'relative',\n                            width: 'auto',\n                            top: 0\n                        })\n                        .css(Craft.left, 0);\n                }\n                else {\n                    this.$items.css('position', 'absolute');\n                    this.colPctWidth = (100 / this.totalCols);\n\n                    // The setup\n\n                    this.layouts = [];\n\n                    this.itemPositions = [];\n                    this.itemColspansByPosition = [];\n\n                    // Figure out all of the possible colspans for each item,\n                    // as well as all the possible positions for each item at each of its colspans\n\n                    this.possibleItemColspans = [];\n                    this.possibleItemPositionsByColspan = [];\n                    this.itemHeightsByColspan = [];\n\n                    for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                        this.possibleItemColspans[this.refreshCols._.item] = [];\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                        this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                        this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                        this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                        this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                        this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                        this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                        if (this.refreshCols._.minColspan > this.totalCols) {\n                            this.refreshCols._.minColspan = this.totalCols;\n                        }\n                        if (this.refreshCols._.maxColspan > this.totalCols) {\n                            this.refreshCols._.maxColspan = this.totalCols;\n                        }\n\n                        for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                            // Get the height for this colspan\n                            this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                            this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                            this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                            if (this.refreshCols._.positionLeft) {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = 0;\n                            }\n                            else if (this.refreshCols._.positionRight) {\n                                this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                                this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                            }\n                            else {\n                                this.refreshCols._.minPosition = 0;\n                                this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                            }\n\n                            for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                                this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                            }\n                        }\n                    }\n\n                    // Find all the possible layouts\n\n                    this.refreshCols._.colHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                        this.refreshCols._.colHeights.push(0);\n                    }\n\n                    this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                    // Now find the layout that looks the best.\n\n                    // First find the layouts with the highest number of used columns\n                    this.refreshCols._.layoutTotalCols = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                                this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                            }\n                        }\n                    }\n\n                    this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                    // Filter out the ones that aren't using as many columns as they could be\n                    for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                        if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                            this.layouts.splice(this.refreshCols._.i, 1);\n                        }\n                    }\n\n                    // Find the layout(s) with the least overall height\n                    this.refreshCols._.layoutHeights = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                        this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                    }\n\n                    this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                    this.refreshCols._.shortestLayouts = [];\n                    this.refreshCols._.emptySpaces = [];\n\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                        if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                            this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                            // Now get its total empty space, including any trailing empty space\n                            this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                            for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                                this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                            }\n\n                            this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                        }\n                    }\n\n                    // And the layout with the least empty space is...\n                    this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                    // Set the item widths and left positions\n                    for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                        this.refreshCols._.css = {\n                            width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                        };\n                        this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                        this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                    }\n\n                    // If every item is at position 0, then let them lay out au naturel\n                    if (this.isSimpleLayout()) {\n                        this.$container.height('auto');\n                        this.$items.css({\n                            position: 'relative',\n                            top: 0,\n                            'margin-bottom': this.settings.gutter+'px'\n                        });\n                    }\n                    else {\n                        this.$items.css('position', 'absolute');\n\n                        // Now position the items\n                        this.positionItems();\n\n                        // Update the positions as the items' heigthts change\n                        this.addListener(this.$items, 'resize', 'onItemResize');\n                    }\n                }\n            }\n\n            this.completeRefreshCols();\n\n            // Resume container resize listening\n            this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n            this.onRefreshCols();\n        },\n\n        completeRefreshCols: function() {\n            // Delete the internal variable object\n            if (typeof this.refreshCols._ !== 'undefined') {\n                delete this.refreshCols._;\n            }\n\n            this._refreshingCols = false;\n\n            if (this._refreshColsAfterRefresh) {\n                var force = this._forceRefreshColsAfterRefresh;\n                this._refreshColsAfterRefresh = false;\n                this._forceRefreshColsAfterRefresh = false;\n\n                Garnish.requestAnimationFrame($.proxy(function() {\n                    this.refreshCols(force);\n                }, this));\n            }\n        },\n\n        getItemWidth: function(colspan) {\n            return (this.colPctWidth * colspan);\n        },\n\n        getItemWidthCss: function(colspan) {\n            return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n        },\n\n        getItemWidthInPx: function(colspan) {\n            return this.getItemWidth(colspan)/100 * this.$container.width() - this.colGutterDrop;\n        },\n\n        getItemLeftPosCss: function(position) {\n            return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n        },\n\n        getItemLeftPosInPx: function(position) {\n            return (this.getItemWidth(1)/100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n        },\n\n        isSimpleLayout: function() {\n            this.isSimpleLayout._ = {};\n\n            for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n                if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                    delete this.isSimpleLayout._;\n                    return false;\n                }\n            }\n\n            delete this.isSimpleLayout._;\n            return true;\n        },\n\n        positionItems: function() {\n            this.positionItems._ = {};\n\n            this.positionItems._.colHeights = [];\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n                this.positionItems._.colHeights.push(0);\n            }\n\n            for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n                this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n                this.positionItems._.affectedColHeights = [];\n\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n                }\n\n                this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n                if (this.positionItems._.top > 0) {\n                    this.positionItems._.top += this.settings.gutter;\n                }\n\n                this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n                // Now add the new heights to those columns\n                for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                    this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n                }\n            }\n\n            // Set the container height\n            this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n            delete this.positionItems._;\n        },\n\n        onItemResize: function(ev) {\n            this.onItemResize._ = {};\n\n            // Prevent this from bubbling up to the container, which has its own resize listener\n            ev.stopPropagation();\n\n            this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n            if (this.onItemResize._.item !== -1) {\n                // Update the height and reposition the items\n                this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n                if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                    this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                    this.positionItems(false);\n                }\n            }\n\n            delete this.onItemResize._;\n        },\n\n        onRefreshCols: function() {\n            this.trigger('refreshCols');\n            this.settings.onRefreshCols();\n        }\n    },\n    {\n        defaults: {\n            itemSelector: '.item',\n            cols: null,\n            maxCols: null,\n            minColWidth: 320,\n            gutter: 14,\n            fillMode: 'top',\n            colClass: 'col',\n            snapToGrid: null,\n\n            onRefreshCols: $.noop\n        }\n    });\n\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend(\n    {\n        grid: null,\n        _: null,\n\n        init: function(grid) {\n            this.grid = grid;\n        },\n\n        createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n            this._ = {};\n\n            // Loop through all possible colspans\n            for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n                this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n                // Loop through all the possible positions for this colspan,\n                // and find the one that is closest to the top\n\n                this._.tallestColHeightsByPosition = [];\n\n                for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                    this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                    this._.colHeightsForPosition = [];\n                    this._.endingCol = this._.position + this._.colspan - 1;\n\n                    for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                        this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                    }\n\n                    this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n                }\n\n                // And the shortest position for this colspan is...\n                this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                // Now log the colspan/position placement\n                this._.positions = prevPositions.slice(0);\n                this._.colspans = prevColspans.slice(0);\n                this._.colHeights = prevColHeights.slice(0);\n                this._.emptySpace = prevEmptySpace;\n\n                this._.positions.push(this._.position);\n                this._.colspans.push(this._.colspan);\n\n                // Add the new heights to those columns\n                this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                    this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n                }\n\n                // If this is the last item, create the layout\n                if (item === this.grid.items.length - 1) {\n                    this.grid.layouts.push({\n                        positions: this._.positions,\n                        colspans: this._.colspans,\n                        colHeights: this._.colHeights,\n                        emptySpace: this._.emptySpace\n                    });\n                }\n                else {\n                    // Dive deeper\n                    this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n                }\n            }\n\n            delete this._;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Remove inner-word punctuation\n            handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            handle = handle.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            handle = Craft.asciiString(handle);\n\n            if (!this.settings.allowNonAlphaStart) {\n                // Handle must start with a letter\n                handle = handle.replace(/^[^a-z]+/, '');\n            }\n\n            // Get the \"words\"\n            var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n            handle = '';\n\n            // Make it camelCase\n            for (var i = 0; i < words.length; i++) {\n                if (i === 0) {\n                    handle += words[i];\n                }\n                else {\n                    handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n                }\n            }\n\n            return handle;\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend(\n    {\n        $container: null,\n        progressBar: null,\n        uploader: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.ImageUpload.defaults);\n            this.initImageUpload();\n        },\n\n        initImageUpload: function() {\n            this.$container = $(this.settings.containerSelector);\n            this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n            var options = {\n                url: Craft.getActionUrl(this.settings.uploadAction),\n                formData: this.settings.postParameters,\n                fileInput: this.$container.find(this.settings.fileInputSelector),\n                paramName: this.settings.uploadParamName\n            };\n\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            options.events = {};\n            options.events.fileuploadstart = $.proxy(this, '_onUploadStart');\n            options.events.fileuploadprogressall = $.proxy(this, '_onUploadProgress');\n            options.events.fileuploaddone = $.proxy(this, '_onUploadComplete');\n            options.events.fileuploadfail = $.proxy(this, '_onUploadError');\n\n            this.uploader = new Craft.Uploader(this.$container, options);\n\n            this.initButtons();\n        },\n\n        initButtons: function() {\n            this.$container.find(this.settings.uploadButtonSelector).on('click', $.proxy(function(ev) {\n                this.$container.find(this.settings.fileInputSelector).trigger('click');\n            }, this));\n\n            this.$container.find(this.settings.deleteButtonSelector).on('click', $.proxy(function(ev) {\n                if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                    $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                    Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, $.proxy(function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            this.refreshImage(response);\n                        }\n                    }, this));\n                }\n            }, this));\n        },\n\n        refreshImage: function(response) {\n            $(this.settings.containerSelector).replaceWith(response.html);\n            this.settings.onAfterRefreshImage(response);\n            this.initImageUpload();\n        },\n\n        /**\n         * On upload start.\n         */\n        _onUploadStart: function(event) {\n            this.progressBar.$progressBar.css({\n                top: Math.round(this.$container.outerHeight() / 2) - 6\n            });\n\n            this.$container.addClass('uploading');\n            this.progressBar.resetProgressBar();\n            this.progressBar.showProgressBar();\n        },\n\n        /**\n         * On upload progress.\n         */\n        _onUploadProgress: function(event, data) {\n            var progress = parseInt(data.loaded / data.total * 100, 10);\n            this.progressBar.setProgressPercentage(progress);\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadComplete: function(event, data) {\n            if (data.result.error) {\n                alert(data.result.error);\n            } else {\n                var html = $(data.result.html);\n                this.refreshImage(data.result);\n            }\n\n            // Last file\n            if (this.uploader.isLastUpload()) {\n                this.progressBar.hideProgressBar();\n                this.$container.removeClass('uploading');\n            }\n        },\n\n        /**\n         * On a file being uploaded.\n         */\n        _onUploadError: function(event, data) {\n            if (data.jqXHR.responseJSON.error) {\n                alert(data.jqXHR.responseJSON.error);\n                this.$container.removeClass('uploading');\n                this.progressBar.hideProgressBar();\n                this.progressBar.resetProgressBar();\n            }\n        }\n    },\n    {\n        defaults: {\n            postParameters: {},\n            uploadAction: \"\",\n            deleteAction: \"\",\n            fileInputSelector: \"\",\n\n            onAfterRefreshImage: $.noop,\n            containerSelector: null,\n\n            uploadButtonSelector: null,\n            deleteButtonSelector: null,\n\n            uploadParamName: 'files'\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend(\n    {\n        $icon: null,\n        hud: null,\n\n        init: function(icon) {\n            this.$icon = $(icon);\n\n            this.addListener(this.$icon, 'click', 'showHud');\n        },\n\n        showHud: function() {\n            if (!this.hud) {\n                this.hud = new Garnish.HUD(this.$icon, this.$icon.html(), {\n                    hudClass: 'hud info-hud',\n                    closeOtherHUDs: false\n                });\n            }\n            else {\n                this.hud.show();\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend(\n    {\n        settings: null,\n        $outerContainer: null,\n        $innerContainer: null,\n        $input: null,\n        small: false,\n        on: false,\n        indeterminate: false,\n        dragger: null,\n\n        dragStartMargin: null,\n\n        init: function(outerContainer, settings) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a lightswitch?\n            if (this.$outerContainer.data('lightswitch')) {\n                Garnish.log('Double-instantiating a lightswitch on an element');\n                this.$outerContainer.data('lightswitch').destroy();\n            }\n\n            this.$outerContainer.data('lightswitch', this);\n\n            this.small = this.$outerContainer.hasClass('small');\n\n            this.setSettings(settings, Craft.LightSwitch.defaults);\n\n            this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            // If the input is disabled, go no further\n            if (this.$input.prop('disabled')) {\n                return;\n            }\n\n            this.on = this.$outerContainer.hasClass('on');\n            this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n            this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n            this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n            this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n                axis: Garnish.X_AXIS,\n                ignoreHandleSelector: null,\n                onDragStart: $.proxy(this, '_onDragStart'),\n                onDrag: $.proxy(this, '_onDrag'),\n                onDragStop: $.proxy(this, '_onDragStop')\n            });\n        },\n\n        turnOn: function(muteEvent) {\n            var changed = !this.on;\n\n            this.on = true;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.value);\n            this.$outerContainer.addClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'true');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnOff: function(muteEvent) {\n            var changed = this.on || this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = false;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin();\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val('');\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.removeClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'false');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        turnIndeterminate: function(muteEvent) {\n            var changed = !this.indeterminate;\n\n            this.on = false;\n            this.indeterminate = true;\n\n            this.$outerContainer.addClass('dragging');\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n            this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, $.proxy(this, '_onSettle'));\n\n            this.$input.val(this.settings.indeterminateValue);\n            this.$outerContainer.removeClass('on');\n            this.$outerContainer.addClass('indeterminate');\n            this.$outerContainer.attr('aria-checked', 'mixed');\n\n            if (changed && muteEvent !== true) {\n                this.onChange();\n            }\n        },\n\n        toggle: function() {\n            if (this.indeterminate || !this.on) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        onChange: function() {\n            this.trigger('change');\n            this.settings.onChange();\n            this.$outerContainer.trigger('change');\n        },\n\n        _onMouseDown: function() {\n            this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n        },\n\n        _onMouseUp: function() {\n            this.removeListener(Garnish.$doc, 'mouseup');\n\n            // Was this a click?\n            if (!this.dragger.dragging) {\n                this.toggle();\n            }\n        },\n\n        _onKeyDown: function(event) {\n            switch (event.keyCode) {\n                case Garnish.SPACE_KEY: {\n                    this.toggle();\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.RIGHT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOn();\n                    }\n                    else {\n                        this.turnOff();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case Garnish.LEFT_KEY: {\n                    if (Craft.orientation === 'ltr') {\n                        this.turnOff();\n                    }\n                    else {\n                        this.turnOn();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _getMargin: function() {\n            return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n        },\n\n        _onDragStart: function() {\n            this.$outerContainer.addClass('dragging');\n            this.dragStartMargin = this._getMargin();\n        },\n\n        _onDrag: function() {\n            var margin;\n\n            if (Craft.orientation === 'ltr') {\n                margin = this.dragStartMargin + this.dragger.mouseDistX;\n            }\n            else {\n                margin = this.dragStartMargin - this.dragger.mouseDistX;\n            }\n\n            if (margin < this._getOffMargin()) {\n                margin = this._getOffMargin();\n            }\n            else if (margin > 0) {\n                margin = 0;\n            }\n\n            this.$innerContainer.css('margin-' + Craft.left, margin);\n        },\n\n        _onDragStop: function() {\n            var margin = this._getMargin();\n            console.log(margin);\n\n            if (margin > (this._getOffMargin() / 2)) {\n                this.turnOn();\n            } else {\n                this.turnOff();\n            }\n        },\n\n        _onSettle: function() {\n            this.$outerContainer.removeClass('dragging');\n        },\n\n        destroy: function() {\n            this.base();\n            this.dragger.destroy();\n        },\n\n        _getOffMargin: function() {\n            return (this.small ? -10 : -12);\n        }\n    }, {\n        animationDuration: 100,\n        defaults: {\n            value: '1',\n            indeterminateValue: '-',\n            onChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend(\n    {\n        $extraFields: null,\n        $trigger: null,\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $iframe: null,\n        $fieldPlaceholder: null,\n\n        previewUrl: null,\n        token: null,\n        basePostData: null,\n        inPreviewMode: false,\n        fields: null,\n        lastPostData: null,\n        updateIframeInterval: null,\n        loading: false,\n        checkAgain: false,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _handleSuccessProxy: null,\n        _handleErrorProxy: null,\n        _forceUpdateIframeProxy: null,\n\n        _scrollX: null,\n        _scrollY: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(settings) {\n            this.setSettings(settings, Craft.LivePreview.defaults);\n\n            // Should preview requests use a specific URL?\n            // This won't affect how the request gets routed (the action param will override it),\n            // but it will allow the templates to change behavior based on the request URI.\n            if (this.settings.previewUrl) {\n                this.previewUrl = this.settings.previewUrl;\n            }\n            else {\n                this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n            }\n\n            // Load the preview over SSL if the current request is\n            if (document.location.protocol === 'https:') {\n                this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n            }\n\n            // Set the base post data\n            this.basePostData = $.extend({}, this.settings.previewParams);\n\n            this._handleSuccessProxy = $.proxy(this, 'handleSuccess');\n            this._handleErrorProxy = $.proxy(this, 'handleError');\n            this._forceUpdateIframeProxy = $.proxy(this, 'forceUpdateIframe');\n\n            // Find the DOM elements\n            this.$extraFields = $(this.settings.extraFields);\n            this.$trigger = $(this.settings.trigger);\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n            // Event Listeners\n            this.addListener(this.$trigger, 'activate', 'toggle');\n\n            Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                if (this.inPreviewMode) {\n                    this.moveFieldsBack();\n                }\n            }, this));\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            }\n            else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n                inPx = Craft.LivePreview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        toggle: function() {\n            if (this.inPreviewMode) {\n                this.exit();\n            }\n            else {\n                this.enter();\n            }\n        },\n\n        enter: function() {\n            if (this.inPreviewMode) {\n                return;\n            }\n\n            if (!this.token) {\n                this.createToken();\n                return;\n            }\n\n            this.trigger('beforeEnter');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                var $saveBtn = $('<div class=\"btn submit\">' + Craft.t('app', 'Save') + '</div>').appendTo($editorHeader);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'exit');\n                this.addListener($saveBtn, 'click', 'save');\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -(this.editorWidthInPx + Craft.LivePreview.dragHandleWidth) + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            this.fields = [];\n            var $fields = $(this.settings.fields);\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n\n            if (this.updateIframe()) {\n                this._slideInOnIframeLoad = true;\n            } else {\n                this.slideIn();\n            }\n\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = true;\n            this.trigger('enter');\n        },\n\n        createToken: function() {\n            Craft.postActionRequest('live-preview/create-token', {\n                previewAction: this.settings.previewAction\n            }, $.proxy(function(response, textStatus) {\n                if (textStatus === 'success') {\n                    this.token = response.token;\n                    this.enter();\n                }\n            }, this));\n        },\n\n        save: function() {\n            Craft.cp.submitPrimaryForm();\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.updateIframeInterval = setInterval($.proxy(this, 'updateIframe'), 1000);\n\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.exit();\n                    }\n                });\n            }, this));\n        },\n\n        exit: function() {\n            if (!this.inPreviewMode) {\n                return;\n            }\n\n            this.trigger('beforeExit');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            if (this.updateIframeInterval) {\n                clearInterval(this.updateIframeInterval);\n            }\n\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-(this.editorWidthInPx + Craft.LivePreview.dragHandleWidth), 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.inPreviewMode = false;\n            this.trigger('exit');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - (this.editorWidthInPx + Craft.LivePreview.dragHandleWidth);\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(force) {\n            if (force) {\n                this.lastPostData = null;\n            }\n\n            if (!this.inPreviewMode) {\n                return false;\n            }\n\n            if (this.loading) {\n                this.checkAgain = true;\n                return false;\n            }\n\n            // Has the post data changed?\n            var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n            if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n                this.lastPostData = postData;\n                this.loading = true;\n\n                var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n                this._scrollX = $doc ? $doc.scrollLeft() : 0;\n                this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n                $.ajax({\n                    url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                    method: 'POST',\n                    data: $.extend({}, postData, this.basePostData),\n                    headers: {\n                        'X-Craft-Token': this.token\n                    },\n                    xhrFields: {\n                        withCredentials: true\n                    },\n                    crossDomain: true,\n                    success: this._handleSuccessProxy,\n                    error: this._handleErrorProxy\n                });\n\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n\n        forceUpdateIframe: function() {\n            return this.updateIframe(true);\n        },\n\n        handleSuccess: function(data) {\n            var html = data +\n                '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n            // Create a new iframe\n            var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n            if (this.$iframe) {\n                $iframe.insertBefore(this.$iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            this.addListener($iframe, 'load', function() {\n                if (this.$iframe) {\n                    this.$iframe.remove();\n                }\n                this.$iframe = $iframe;\n\n                if (this._slideInOnIframeLoad) {\n                    this.slideIn();\n                    this._slideInOnIframeLoad = false;\n                }\n\n                this.removeListener($iframe, 'load');\n            });\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                $iframe[0].contentWindow.document.open();\n                $iframe[0].contentWindow.document.write(html);\n                $iframe[0].contentWindow.document.close();\n                this.onResponse();\n            }, this));\n        },\n\n        handleError: function() {\n            this.onResponse();\n        },\n\n        onResponse: function() {\n            this.loading = false;\n\n            if (this.checkAgain) {\n                this.checkAgain = false;\n                this.updateIframe();\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            }\n            else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n        dragHandleWidth: 4,\n\n        defaults: {\n            trigger: '.livepreviewbtn',\n            fields: null,\n            extraFields: null,\n            previewUrl: null,\n            previewAction: null,\n            previewParams: {}\n        }\n    });\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend(\n    {\n        $passwordWrapper: null,\n        $passwordInput: null,\n        $textInput: null,\n        $currentInput: null,\n\n        $showPasswordToggle: null,\n        showingPassword: null,\n\n        init: function(passwordInput, settings) {\n            this.$passwordInput = $(passwordInput);\n            this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n            this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n            // Is this already a password input?\n            if (this.$passwordInput.data('passwordInput')) {\n                Garnish.log('Double-instantiating a password input on an element');\n                this.$passwordInput.data('passwordInput').destroy();\n            }\n\n            this.$passwordInput.data('passwordInput', this);\n\n            this.$showPasswordToggle = $('<a/>').addClass('invisible');\n            this.$showPasswordToggle.addClass('password-toggle');\n            this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n            this.initInputFocusEvents(this.$passwordInput);\n            this.addListener(this.$showPasswordToggle, 'mousedown', 'onToggleMouseDown');\n            this.hidePassword();\n        },\n\n        setCurrentInput: function($input) {\n            if (this.$currentInput) {\n                // Swap the inputs, while preventing the focus animation\n                $input.insertAfter(this.$currentInput);\n                this.$currentInput.detach();\n                $input.trigger('focus');\n\n                // Restore the input value\n                $input.val(this.$currentInput.val());\n            }\n\n            this.$currentInput = $input;\n\n            this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n        },\n\n        updateToggleLabel: function(label) {\n            this.$showPasswordToggle.text(label);\n        },\n\n        initInputFocusEvents: function($input) {\n            this.addListener($input, 'focus', function() {\n                this.$passwordWrapper.addClass('focus');\n            });\n            this.addListener($input, 'blur', function() {\n                this.$passwordWrapper.removeClass('focus');\n            });\n        },\n\n        showPassword: function() {\n            if (this.showingPassword) {\n                return;\n            }\n\n            if (!this.$textInput) {\n                this.$textInput = this.$passwordInput.clone(true);\n                this.$textInput.attr('type', 'text');\n                this.initInputFocusEvents(this.$textInput);\n            }\n\n            this.setCurrentInput(this.$textInput);\n            this.updateToggleLabel(Craft.t('app', 'Hide'));\n            this.showingPassword = true;\n        },\n\n        hidePassword: function() {\n            // showingPassword could be null, which is acceptable\n            if (this.showingPassword === false) {\n                return;\n            }\n\n            this.setCurrentInput(this.$passwordInput);\n            this.updateToggleLabel(Craft.t('app', 'Show'));\n            this.showingPassword = false;\n\n            // Alt key temporarily shows the password\n            this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n        },\n\n        togglePassword: function() {\n            if (this.showingPassword) {\n                this.hidePassword();\n            }\n            else {\n                this.showPassword();\n            }\n\n            this.settings.onToggleInput(this.$currentInput);\n        },\n\n        onKeyDown: function(ev) {\n            if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n                this.showPassword();\n                this.$showPasswordToggle.addClass('invisible');\n                this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n            }\n        },\n\n        onKeyUp: function(ev) {\n            ev.preventDefault();\n\n            if (ev.keyCode === Garnish.ALT_KEY) {\n                this.hidePassword();\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n        },\n\n        onInputChange: function() {\n            if (this.$currentInput.val()) {\n                this.$showPasswordToggle.removeClass('invisible');\n            }\n            else {\n                this.$showPasswordToggle.addClass('invisible');\n            }\n        },\n\n        onToggleMouseDown: function(ev) {\n            // Prevent focus change\n            ev.preventDefault();\n\n            if (this.$currentInput[0].setSelectionRange) {\n                var selectionStart = this.$currentInput[0].selectionStart,\n                    selectionEnd = this.$currentInput[0].selectionEnd;\n\n                this.togglePassword();\n                this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                this.togglePassword();\n            }\n        }\n    },\n    {\n        defaults: {\n            onToggleInput: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend(\n    {\n        draftEditor: null,\n\n        $shade: null,\n        $editorContainer: null,\n        $editor: null,\n        $spinner: null,\n        $statusIcon: null,\n        $dragHandle: null,\n        $previewContainer: null,\n        $iframeContainer: null,\n        $targetBtn: null,\n        $targetMenu: null,\n        $iframe: null,\n        iframeLoaded: false,\n        $tempInput: null,\n        $fieldPlaceholder: null,\n\n        isActive: false,\n        activeTarget: 0,\n        draftId: null,\n        url: null,\n        fields: null,\n\n        iframeHeight: null,\n        scrollTop: null,\n\n        dragger: null,\n        dragStartEditorWidth: null,\n\n        _slideInOnIframeLoad: false,\n        _updateIframeProxy: null,\n\n        _editorWidth: null,\n        _editorWidthInPx: null,\n\n        init: function(draftEditor) {\n            this.draftEditor = draftEditor;\n\n            this._updateIframeProxy = $.proxy(this,'updateIframe');\n\n            this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n            this.$fieldPlaceholder = $('<div/>');\n\n            // Set the initial editor width\n            this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n        },\n\n        get editorWidth() {\n            return this._editorWidth;\n        },\n\n        get editorWidthInPx() {\n            return this._editorWidthInPx;\n        },\n\n        set editorWidth(width) {\n            var inPx;\n\n            // Is this getting set in pixels?\n            if (width >= 1) {\n                inPx = width;\n                width /= Garnish.$win.width();\n            } else {\n                inPx = Math.round(width * Garnish.$win.width());\n            }\n\n            // Make sure it's no less than the minimum\n            if (inPx < Craft.Preview.minEditorWidthInPx) {\n                inPx = Craft.Preview.minEditorWidthInPx;\n                width = inPx / Garnish.$win.width();\n            }\n\n            this._editorWidth = width;\n            this._editorWidthInPx = inPx;\n        },\n\n        open: function() {\n            if (this.isActive) {\n                return;\n            }\n\n            this.isActive = true;\n            this.trigger('beforeOpen');\n\n            $(document.activeElement).trigger('blur');\n\n            if (!this.$editor) {\n                this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n                this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n                this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n\n                var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n                this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n                this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n                var $closeBtn = $('<div/>', {'class': 'btn', text: Craft.t('app', 'Close Preview')}).appendTo($editorHeader);\n                $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n                this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n                this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    var $previewHeader = $('<header/>', {'class': 'lp-preview-header flex'}).appendTo(this.$previewContainer);\n                    this.$targetBtn = $('<div/>', {\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                        role: 'btn',\n                    }).appendTo($previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    var $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    var $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: $.proxy(function(option) {\n                            this.switchTarget($(option).data('target'));\n                        }, this)\n                    });\n                }\n\n                this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n                this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                    axis: Garnish.X_AXIS,\n                    onDragStart: $.proxy(this, '_onDragStart'),\n                    onDrag: $.proxy(this, '_onDrag'),\n                    onDragStop: $.proxy(this, '_onDragStop')\n                });\n\n                this.addListener($closeBtn, 'click', 'close');\n                this.addListener(this.$statusIcon, 'click', function() {\n                    this.draftEditor.showStatusHud(this.$statusIcon);\n                }.bind(this));\n            }\n\n            // Set the sizes\n            this.handleWindowResize();\n            this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n            this.$editorContainer.css(Craft.left, -(this.editorWidthInPx + Craft.Preview.dragHandleWidth) + 'px');\n            this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n            // Find the fields, excluding nested fields\n            this.fields = [];\n            var $fields = $('#content .field').not($('#content .field .field'));\n\n            if ($fields.length) {\n                // Insert our temporary input before the first field so we know where to swap in the serialized form values\n                this.$tempInput.insertBefore($fields.get(0));\n\n                // Move all the fields into the editor rather than copying them\n                // so any JS that's referencing the elements won't break.\n                for (let i = 0; i < $fields.length; i++) {\n                    let $field = $($fields[i]),\n                        $clone = this._getClone($field);\n\n                    // It's important that the actual field is added to the DOM *after* the clone,\n                    // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                    this.$fieldPlaceholder.insertAfter($field);\n                    $field.detach();\n                    this.$fieldPlaceholder.replaceWith($clone);\n                    $field.appendTo(this.$editor);\n\n                    this.fields.push({\n                        $field: $field,\n                        $clone: $clone\n                    });\n                }\n            }\n\n            this._slideInOnIframeLoad = true;\n            this.updateIframe();\n\n            this.draftEditor.on('update', this._updateIframeProxy);\n            Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.trigger('open');\n        },\n\n        switchTarget: function(i) {\n            this.activeTarget = i;\n            this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n            this.$targetMenu.find('a.sel').removeClass('sel');\n            this.$targetMenu.find('a').eq(i).addClass('sel');\n            this.updateIframe(true);\n            this.trigger('switchTarget', {\n                target: this.draftEditor.settings.previewTargets[i],\n            });\n        },\n\n        handleWindowResize: function() {\n            // Reset the width so the min width is enforced\n            this.editorWidth = this.editorWidth;\n\n            // Update the editor/iframe sizes\n            this.updateWidths();\n        },\n\n        slideIn: function() {\n            $('html').addClass('noscroll');\n            this.$shade.velocity('fadeIn');\n\n            this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', $.proxy(function() {\n                this.trigger('slideIn');\n                Garnish.$win.trigger('resize');\n            }, this));\n\n            this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', $.proxy(function() {\n                this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                    if (ev.keyCode === Garnish.ESC_KEY) {\n                        this.close();\n                    }\n                });\n            }, this));\n        },\n\n        close: function() {\n            if (!this.isActive) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n\n            $('html').removeClass('noscroll');\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(Garnish.$bod, 'keyup');\n\n            // Remove our temporary input and move the preview fields back into place\n            this.$tempInput.detach();\n            this.moveFieldsBack();\n\n            this.$shade.delay(200).velocity('fadeOut');\n\n            this.$editorContainer.velocity('stop').animateLeft(-(this.editorWidthInPx + Craft.Preview.dragHandleWidth), 'slow', $.proxy(function() {\n                for (var i = 0; i < this.fields.length; i++) {\n                    this.fields[i].$newClone.remove();\n                }\n                this.$editorContainer.hide();\n                this.trigger('slideOut');\n            }, this));\n\n            this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', $.proxy(function() {\n                this.$previewContainer.hide();\n            }, this));\n\n            this.draftEditor.off('update', this._updateIframeProxy);\n            Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n            Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n            Craft.ElementThumbLoader.retryAll();\n\n            this.isActive = false;\n            this.trigger('close');\n        },\n\n        moveFieldsBack: function() {\n            for (var i = 0; i < this.fields.length; i++) {\n                var field = this.fields[i];\n                field.$newClone = this._getClone(field.$field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter(field.$field);\n                field.$field.detach();\n                this.$fieldPlaceholder.replaceWith(field.$newClone);\n                field.$clone.replaceWith(field.$field);\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        getIframeWidth: function() {\n            return Garnish.$win.width() - (this.editorWidthInPx + Craft.Preview.dragHandleWidth);\n        },\n\n        updateWidths: function() {\n            this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n            this.$previewContainer.width(this.getIframeWidth());\n        },\n\n        updateIframe: function(resetScroll) {\n            if (!this.isActive) {\n                return false;\n            }\n\n            // Ignore non-boolean resetScroll values\n            resetScroll = resetScroll === true;\n\n            var target = this.draftEditor.settings.previewTargets[this.activeTarget];\n            var refresh = !!(\n                this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n                !this.$iframe ||\n                resetScroll ||\n                typeof target.refresh === 'undefined' ||\n                target.refresh\n            );\n\n            this.trigger('beforeUpdateIframe', {\n                target: target,\n                resetScroll: resetScroll,\n                refresh: refresh,\n            });\n\n            // If this is an existing preview target, make sure it wants to be refreshed automatically\n            if (!refresh) {\n                return;\n            }\n\n            this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(function(url) {\n                // Maintain the current scroll position?\n                if (!resetScroll && this.iframeLoaded && this.$iframe) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                }\n\n                this.iframeLoaded = false;\n\n                var $iframe = $('<iframe/>', {\n                    'class': 'lp-preview',\n                    frameborder: 0,\n                    src: url,\n                });\n\n                if (this.$iframe) {\n                    this.$iframe.replaceWith($iframe);\n                } else {\n                    $iframe.appendTo(this.$iframeContainer);\n                }\n\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                // Keep the iframe height consistent with its content\n                iFrameResize({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, $iframe[0])\n\n                this.url = url;\n                this.$iframe = $iframe;\n                this.afterUpdateIframe();\n            }.bind(this));\n        },\n\n        afterUpdateIframe: function() {\n            this.trigger('afterUpdateIframe', {\n                target: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n        },\n\n        _getClone: function($field) {\n            var $clone = $field.clone();\n\n            // clone() won't account for input values that have changed since the original HTML set them\n            Garnish.copyInputValues($field, $clone);\n\n            // Remove any id= attributes\n            $clone.attr('id', '');\n            $clone.find('[id]').attr('id', '');\n\n            // Disable anything with a name attribute\n            $clone.find('[name]').prop('disabled', true);\n\n            return $clone;\n        },\n\n        _onDragStart: function() {\n            this.dragStartEditorWidth = this.editorWidthInPx;\n            this.$previewContainer.addClass('dragging');\n        },\n\n        _onDrag: function() {\n            if (Craft.orientation === 'ltr') {\n                this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n            } else {\n                this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n            }\n\n            this.updateWidths();\n        },\n\n        _onDragStop: function() {\n            this.$previewContainer.removeClass('dragging');\n            Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n        }\n    },\n    {\n        defaultEditorWidth: 0.33,\n        minEditorWidthInPx: 320,\n        dragHandleWidth: 2,\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend(\n    {\n        assetId: null,\n        $spinner: null,\n        elementSelect: null,\n        type: null,\n        loaded: null,\n        requestId: 0,\n\n        /**\n         * Initialize the preview file modal.\n         * @returns {*|void}\n         */\n        init: function(assetId, elementSelect, settings) {\n            settings = $.extend(this.defaultSettings, settings);\n\n            settings.onHide = this._onHide.bind(this);\n\n            if (Craft.PreviewFileModal.openInstance) {\n                var instance = Craft.PreviewFileModal.openInstance;\n\n                if (instance.assetId !== assetId) {\n                    instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                    instance.elementSelect = elementSelect;\n                }\n\n                return this.destroy();\n            }\n\n            Craft.PreviewFileModal.openInstance = this;\n            this.elementSelect = elementSelect;\n\n            this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n            this.base(this.$container, $.extend({\n                resizable: true\n            }, settings));\n\n            // Cut the flicker, just show the nice person the preview.\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n\n            this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n        },\n\n        /**\n         * When hiding, remove all traces and focus last focused element.\n         * @private\n         */\n        _onHide: function () {\n            Craft.PreviewFileModal.openInstance = null;\n            if (this.elementSelect) {\n                this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n            }\n\n            this.$shade.remove();\n\n            return this.destroy();\n        },\n\n        /**\n         * Disappear immediately forever.\n         * @returns {boolean}\n         */\n        selfDestruct: function () {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            instance.hide();\n            instance.$shade.remove();\n            instance.destroy();\n\n            Craft.PreviewFileModal.openInstance = null;\n\n            return true;\n        },\n\n        /**\n         * Load an asset, using starting width and height, if applicable\n         * @param assetId\n         * @param startingWidth\n         * @param startingHeight\n         */\n        loadAsset: function (assetId, startingWidth, startingHeight) {\n            this.assetId = assetId;\n\n            this.$container.empty();\n            this.loaded = false;\n\n            this.desiredHeight = null;\n            this.desiredWidth = null;\n\n            var containerHeight = Garnish.$win.height() * 0.66;\n            var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = containerWidth / 4 * 3;\n\n            if (startingWidth && startingHeight) {\n                var ratio = startingWidth / startingHeight;\n                containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n                containerWidth = containerHeight * ratio;\n\n                // This might actually have put width over the viewport limits, so doublecheck\n                if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                    containerWidth =  Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                    containerHeight = containerWidth / ratio;\n                }\n            }\n\n            this._resizeContainer(containerWidth, containerHeight);\n\n            this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n            var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n                left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n            this.$spinner.css({left: left, top: top, position: 'absolute'});\n            this.requestId++;\n\n            Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, function(response, textStatus) {\n                this.$container.removeClass('loading');\n                this.$spinner.remove();\n                this.loaded = true;\n\n                if (textStatus === 'success') {\n                    if (response.success) {\n                        if (response.requestId != this.requestId) {\n                            return;\n                        }\n\n                        if (!response.previewHtml) {\n                            this.$container.addClass('zilch');\n                            this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                            return;\n                        }\n\n                        this.$container.removeClass('zilch');\n                        this.$container.append(response.previewHtml);\n                        Craft.appendHeadHtml(response.headHtml);\n                        Craft.appendFootHtml(response.footHtml);\n                    } else {\n                        alert(response.error);\n\n                        this.hide();\n                    }\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Resize the container to specified dimensions\n         * @param containerWidth\n         * @param containerHeight\n         * @private\n         */\n        _resizeContainer: function (containerWidth, containerHeight) {\n            this.$container.css({\n                'width': containerWidth,\n                'min-width': containerWidth,\n                'max-width': containerWidth,\n                'height': containerHeight,\n                'min-height': containerHeight,\n                'max-height': containerHeight,\n                'top': (Garnish.$win.height() - containerHeight) / 2,\n                'left': (Garnish.$win.width() - containerWidth) / 2\n            });\n        }\n    },\n    {\n        defaultSettings: {\n            startingWidth: null,\n            startingHeight: null\n        }\n    }\n);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend(\n    {\n        $progressBar: null,\n        $innerProgressBar: null,\n        $progressBarStatus: null,\n\n        _itemCount: 0,\n        _processedItemCount: 0,\n        _displaySteps: false,\n\n        init: function($element, displaySteps) {\n            if (displaySteps) {\n                this._displaySteps = true;\n            }\n\n            this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n            this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n            this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n            this.resetProgressBar();\n        },\n\n        /**\n         * Reset the progress bar\n         */\n        resetProgressBar: function() {\n            // Since setting the progress percentage implies that there is progress to be shown\n            // It removes the pending class - we must add it back.\n            this.setProgressPercentage(100);\n            this.$progressBar.addClass('pending');\n\n            // Reset all the counters\n            this.setItemCount(1);\n            this.setProcessedItemCount(0);\n            this.$progressBarStatus.html('');\n\n            if (this._displaySteps) {\n                this.$progressBar.addClass('has-status');\n            }\n        },\n\n        /**\n         * Fade to invisible, hide it using a class and reset opacity to visible\n         */\n        hideProgressBar: function() {\n            this.$progressBar.fadeTo('fast', 0.01, $.proxy(function() {\n                this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n            }, this));\n        },\n\n        showProgressBar: function() {\n            this.$progressBar.removeClass('hidden');\n            this.$progressBarStatus.removeClass('hidden');\n        },\n\n        setItemCount: function(count) {\n            this._itemCount = count;\n        },\n\n        incrementItemCount: function(count) {\n            this._itemCount += count;\n        },\n\n        setProcessedItemCount: function(count) {\n            this._processedItemCount = count;\n        },\n\n        incrementProcessedItemCount: function(count) {\n            this._processedItemCount += count;\n        },\n\n        updateProgressBar: function() {\n            // Only fools would allow accidental division by zero.\n            this._itemCount = Math.max(this._itemCount, 1);\n\n            var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n            this.setProgressPercentage(width);\n\n            if (this._displaySteps) {\n                this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n            }\n        },\n\n        setProgressPercentage: function(percentage, animate) {\n            if (percentage === 0) {\n                this.$progressBar.addClass('pending');\n            }\n            else {\n                this.$progressBar.removeClass('pending');\n\n                if (animate) {\n                    this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n                }\n                else {\n                    this.$innerProgressBar.velocity('stop').width(percentage + '%');\n                }\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, $.proxy(this, '_handleBatchPromptSelection'), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice: choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            }\n            else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        }\n        else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        var $cancelButton = $('<div class=\"btn\">' + Craft.t('app', 'Cancel') + '</div>').appendTo(this.$promptButtons),\n            $submitBtn = $('<input type=\"submit\" class=\"btn submit disabled\" value=\"' + Craft.t('app', 'OK') + '\" />').appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelButton, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', $.proxy(function() {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        }, this));\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', $.proxy(this, '_handleResize'));\n        this.addListener(this.$container, 'tapstart', $.proxy(this, '_handleTapStart'));\n        this.addListener(Garnish.$bod, 'tapmove', $.proxy(this, '_handleTapMove'));\n        this.addListener(Garnish.$bod, 'tapend', $.proxy(this, '_handleTapEnd'));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout($.proxy(function() {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, this), 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        }\n        else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (( ( this.$graduations.width() / 2 ) + (position * -1) ) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n            // Remove inner-word punctuation\n            sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n            // Make it lowercase\n            if (!Craft.allowUppercaseInSlug) {\n                sourceVal = sourceVal.toLowerCase();\n            }\n\n            if (Craft.limitAutoSlugsToAscii) {\n                // Convert extended ASCII characters to basic ASCII\n                sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n            }\n\n            // Get the \"words\". Split on anything that is not alphanumeric.\n            // Reference: http://www.regular-expressions.info/unicode.html\n            var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n            if (words.length) {\n                return words.join(Craft.slugWordSeparator);\n            }\n            else {\n                return '';\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend(\n    {\n        id: null,\n\n        $container: null,\n        state: null,\n        structureDrag: null,\n\n        /**\n         * Init\n         */\n        init: function(id, container, settings) {\n            this.id = id;\n            this.$container = $(container);\n            this.setSettings(settings, Craft.Structure.defaults);\n\n            // Is this already a structure?\n            if (this.$container.data('structure')) {\n                Garnish.log('Double-instantiating a structure on an element');\n                this.$container.data('structure').destroy();\n            }\n\n            this.$container.data('structure', this);\n\n            this.state = {};\n\n            if (this.settings.storageKey) {\n                $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n            }\n\n            if (typeof this.state.collapsedElementIds === 'undefined') {\n                this.state.collapsedElementIds = [];\n            }\n\n            var $parents = this.$container.find('ul').prev('.row');\n\n            for (var i = 0; i < $parents.length; i++) {\n                var $row = $($parents[i]),\n                    $li = $row.parent(),\n                    $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n                if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                    $li.addClass('collapsed');\n                }\n\n                this.initToggle($toggle);\n            }\n\n            if (this.settings.sortable) {\n                this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n            }\n\n            if (this.settings.newChildUrl) {\n                this.initNewChildMenus(this.$container.find('.add'));\n            }\n        },\n\n        initToggle: function($toggle) {\n            $toggle.on('click', $.proxy(function(ev) {\n                var $li = $(ev.currentTarget).closest('li'),\n                    elementId = $li.children('.row').find('.element:first').data('id'),\n                    viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n                if ($li.hasClass('collapsed')) {\n                    $li.removeClass('collapsed');\n\n                    if (viewStateKey !== -1) {\n                        this.state.collapsedElementIds.splice(viewStateKey, 1);\n                    }\n                }\n                else {\n                    $li.addClass('collapsed');\n\n                    if (viewStateKey === -1) {\n                        this.state.collapsedElementIds.push(elementId);\n                    }\n                }\n\n                if (this.settings.storageKey) {\n                    Craft.setLocalStorage(this.settings.storageKey, this.state);\n                }\n            }, this));\n        },\n\n        initNewChildMenus: function($addBtns) {\n            this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n        },\n\n        onNewChildMenuClick: function(ev) {\n            var $btn = $(ev.currentTarget);\n\n            if (!$btn.data('menubtn')) {\n                var elementId = $btn.parent().children('.element').data('id'),\n                    newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n                $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n                var menuBtn = new Garnish.MenuBtn($btn);\n                menuBtn.showMenu();\n            }\n        },\n\n        getIndent: function(level) {\n            return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n        },\n\n        addElement: function($element) {\n            var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n                $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n            $row.append($element);\n\n            if (this.settings.sortable) {\n                $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n                this.structureDrag.addItems($li);\n            }\n\n            if (this.settings.newChildUrl) {\n                var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n                this.initNewChildMenus($addBtn);\n            }\n\n            $row.css('margin-bottom', -30);\n            $row.velocity({'margin-bottom': 0}, 'fast');\n        },\n\n        removeElement: function($element) {\n            var $li = $element.parent().parent();\n\n            if (this.settings.sortable) {\n                this.structureDrag.removeItems($li);\n            }\n\n            var $parentUl;\n\n            if (!$li.siblings().length) {\n                $parentUl = $li.parent();\n            }\n\n            $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', $.proxy(function() {\n                $li.remove();\n\n                if (typeof $parentUl !== 'undefined') {\n                    this._removeUl($parentUl);\n                }\n            }, this));\n        },\n\n        _removeUl: function($ul) {\n            $ul.siblings('.row').children('.toggle').remove();\n            $ul.remove();\n        }\n    },\n    {\n        baseIndent: 8,\n        nestedIndent: 35,\n\n        defaults: {\n            storageKey: null,\n            sortable: false,\n            newChildUrl: null,\n            maxLevels: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend(\n    {\n        structure: null,\n        maxLevels: null,\n        draggeeLevel: null,\n\n        $helperLi: null,\n        $targets: null,\n        draggeeHeight: null,\n\n        init: function(structure, maxLevels) {\n            this.structure = structure;\n            this.maxLevels = maxLevels;\n\n            this.$insertion = $('<li class=\"draginsertion\"/>');\n\n            var $items = this.structure.$container.find('li');\n\n            this.base($items, {\n                handle: '.element:first, .move:first',\n                helper: $.proxy(this, 'getHelper')\n            });\n        },\n\n        getHelper: function($helper) {\n            this.$helperLi = $helper;\n            var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n            $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n            $helper.find('.move').removeAttr('title');\n            return $ul;\n        },\n\n        onDragStart: function() {\n            this.$targets = $();\n\n            // Recursively find each of the targets, in the order they appear to be in\n            this.findTargets(this.structure.$container);\n\n            // How deep does the rabbit hole go?\n            this.draggeeLevel = 0;\n            var $level = this.$draggee;\n            do {\n                this.draggeeLevel++;\n                $level = $level.find('> ul > li');\n            } while ($level.length);\n\n            // Collapse the draggee\n            this.draggeeHeight = this.$draggee.height();\n            this.$draggee.velocity({\n                height: 0\n            }, 'fast', $.proxy(function() {\n                this.$draggee.addClass('hidden');\n            }, this));\n            this.base();\n\n            this.addListener(Garnish.$doc, 'keydown', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.cancelDrag();\n                }\n            });\n        },\n\n        findTargets: function($ul) {\n            var $lis = $ul.children().not(this.$draggee);\n\n            for (var i = 0; i < $lis.length; i++) {\n                var $li = $($lis[i]);\n                this.$targets = this.$targets.add($li.children('.row'));\n\n                if (!$li.hasClass('collapsed')) {\n                    this.findTargets($li.children('ul'));\n                }\n            }\n        },\n\n        onDrag: function() {\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n                this.$insertion.remove();\n            }\n\n            // First let's find the closest target\n            this._.$closestTarget = null;\n            this._.closestTargetPos = null;\n            this._.closestTargetYDiff = null;\n            this._.closestTargetOffset = null;\n            this._.closestTargetHeight = null;\n\n            for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n                this._.$target = $(this.$targets[this._.i]);\n                this._.targetOffset = this._.$target.offset();\n                this._.targetHeight = this._.$target.outerHeight();\n                this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n                this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n                if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                    this._.$closestTarget = this._.$target;\n                    this._.closestTargetPos = this._.i;\n                    this._.closestTargetYDiff = this._.targetYDiff;\n                    this._.closestTargetOffset = this._.targetOffset;\n                    this._.closestTargetHeight = this._.targetHeight;\n                }\n                else {\n                    // Getting colder\n                    break;\n                }\n            }\n\n            if (!this._.$closestTarget) {\n                return;\n            }\n\n            // Are we hovering above the first row?\n            if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n                this.$insertion.prependTo(this.structure.$container);\n            }\n            else {\n                this._.$closestTargetLi = this._.$closestTarget.parent();\n                this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n                // Is there a next row?\n                if (this._.closestTargetPos < this.$targets.length - 1) {\n                    this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                    this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n                }\n                else {\n                    this._.$nextTargetLi = null;\n                    this._.nextTargetLevel = null;\n                }\n\n                // Are we hovering between this row and the next one?\n                this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n                /**\n                 * Scenario 1: Both rows have the same level.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                    if (this._.hoveringBetweenRows) {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                            // Position the insertion after the closest target\n                            this.$insertion.insertAfter(this._.$closestTargetLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 2: Next row is a child of this one.\n                 *\n                 *     * Row 1\n                 *     ----------------------\n                 *         * Row 2\n                 */\n\n                else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                        if (this._.hoveringBetweenRows) {\n                            // Position the insertion as the first child of the closest target\n                            this.$insertion.insertBefore(this._.$nextTargetLi);\n                        }\n                        else {\n                            this._.$closestTarget.addClass('draghover');\n                            this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                        }\n                    }\n                }\n\n                /**\n                 * Scenario 3: Next row is a child of a parent node, or there is no next row.\n                 *\n                 *         * Row 1\n                 *     ----------------------\n                 *     * Row 2\n                 */\n\n                else {\n                    if (this._.hoveringBetweenRows) {\n                        // Determine which <li> to position the insertion after\n                        this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.draggeeX += this.$helperLi.width();\n                        }\n\n                        this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                        this._.$closestParentLi = null;\n                        this._.closestParentLiXDiff = null;\n                        this._.closestParentLevel = null;\n\n                        for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                            this._.$parentLi = $(this._.$parentLis[this._.i]);\n                            this._.parentLiX = this._.$parentLi.offset().left;\n\n                            if (Craft.orientation === 'rtl') {\n                                this._.parentLiX += this._.$parentLi.width();\n                            }\n\n                            this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                            this._.parentLevel = this._.$parentLi.data('level');\n\n                            if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                                    !this._.$closestParentLi || (\n                                        this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                        (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                                    )\n                                )) {\n                                this._.$closestParentLi = this._.$parentLi;\n                                this._.closestParentLiXDiff = this._.parentLiXDiff;\n                                this._.closestParentLevel = this._.parentLevel;\n                            }\n                        }\n\n                        if (this._.$closestParentLi) {\n                            this.$insertion.insertAfter(this._.$closestParentLi);\n                        }\n                    }\n                    else {\n                        if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                            this._.$closestTarget.addClass('draghover');\n                        }\n                    }\n                }\n            }\n        },\n\n        cancelDrag: function() {\n            this.$insertion.remove();\n\n            if (this._.$closestTarget) {\n                this._.$closestTarget.removeClass('draghover');\n            }\n\n            this.onMouseUp();\n        },\n\n        onDragStop: function() {\n            // Are we repositioning the draggee?\n            if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n                var $draggeeParent,\n                    moved;\n\n                // Are we about to leave the draggee's original parent childless?\n                if (!this.$draggee.siblings().length) {\n                    $draggeeParent = this.$draggee.parent();\n                }\n\n                if (this.$insertion.parent().length) {\n                    // Make sure the insertion isn't right next to the draggee\n                    var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                    if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                        this.$insertion.replaceWith(this.$draggee);\n                        moved = true;\n                    }\n                    else {\n                        this.$insertion.remove();\n                        moved = false;\n                    }\n                }\n                else {\n                    var $ul = this._.$closestTargetLi.children('ul');\n\n                    // Make sure this is a different parent than the draggee's\n                    if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                        if (!$ul.length) {\n                            var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                            this.structure.initToggle($toggle);\n\n                            $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                        }\n                        else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                            this._.$closestTarget.children('.toggle').trigger('click');\n                        }\n\n                        this.$draggee.appendTo($ul);\n                        moved = true;\n                    }\n                    else {\n                        moved = false;\n                    }\n                }\n\n                // Remove the class either way\n                this._.$closestTarget.removeClass('draghover');\n\n                if (moved) {\n                    // Now deal with the now-childless parent\n                    if ($draggeeParent) {\n                        this.structure._removeUl($draggeeParent);\n                    }\n\n                    // Has the level changed?\n                    var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                    var animateCss;\n\n                    if (newLevel != this.$draggee.data('level')) {\n                        // Correct the helper's padding if moving to/from level 1\n                        if (this.$draggee.data('level') == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = 38;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n                        else if (newLevel == 1) {\n                            animateCss = {};\n                            animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                            this.$helperLi.velocity(animateCss, 'fast');\n                        }\n\n                        this.setLevel(this.$draggee, newLevel);\n                    }\n\n                    // Make it real\n                    var $element = this.$draggee.children('.row').children('.element');\n\n                    var data = {\n                        structureId: this.structure.id,\n                        elementId: $element.data('id'),\n                        siteId: $element.data('site-id'),\n                        prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                        parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                    };\n\n                    Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                        if (textStatus === 'success') {\n                            Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                        }\n                    });\n                }\n            }\n\n            // Animate things back into place\n            this.$draggee.velocity('stop').removeClass('hidden').velocity({\n                height: this.draggeeHeight\n            }, 'fast', $.proxy(function() {\n                this.$draggee.css('height', 'auto');\n            }, this));\n\n            this.returnHelpersToDraggees();\n\n            this.base();\n        },\n\n        setLevel: function($li, level) {\n            $li.data('level', level);\n\n            var indent = this.structure.getIndent(level);\n\n            var css = {};\n            css['margin-' + Craft.left] = '-' + indent + 'px';\n            css['padding-' + Craft.left] = indent + 'px';\n            this.$draggee.children('.row').css(css);\n\n            var $childLis = $li.children('ul').children();\n\n            for (var i = 0; i < $childLis.length; i++) {\n                this.setLevel($($childLis[i]), level + 1);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n        tableView: null,\n        structureId: null,\n        maxLevels: null,\n\n        _basePadding: null,\n        _helperMargin: null,\n\n        _$firstRowCells: null,\n        _$titleHelperCell: null,\n\n        _titleHelperCellOuterWidth: null,\n\n        _ancestors: null,\n        _updateAncestorsFrame: null,\n        _updateAncestorsProxy: null,\n\n        _draggeeLevel: null,\n        _draggeeLevelDelta: null,\n        draggingLastElements: null,\n        _loadingDraggeeLevelDelta: false,\n\n        _targetLevel: null,\n        _targetLevelBounds: null,\n\n        _positionChanged: null,\n\n        /**\n         * Constructor\n         */\n        init: function(tableView, $elements, settings) {\n            this.tableView = tableView;\n            this.structureId = this.tableView.$table.data('structure-id');\n            this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n            this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n            this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n            settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n                handle: '.move',\n                collapseDraggees: true,\n                singleHelper: true,\n                helperSpacingY: 2,\n                magnetStrength: 4,\n                helper: $.proxy(this, 'getHelper'),\n                helperLagBase: 1.5,\n                axis: Garnish.Y_AXIS\n            });\n\n            this.base($elements, settings);\n        },\n\n        /**\n         * Returns the draggee rows (including any descendent rows).\n         */\n        findDraggee: function() {\n            this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n            this._draggeeLevelDelta = 0;\n\n            var $draggee = $(this.$targetItem),\n                $nextRow = this.$targetItem.next();\n\n            while ($nextRow.length) {\n                // See if this row is a descendant of the draggee\n                var nextRowLevel = $nextRow.data('level');\n\n                if (nextRowLevel <= this._draggeeLevel) {\n                    break;\n                }\n\n                // Is this the deepest descendant we've seen so far?\n                var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n                if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                    this._draggeeLevelDelta = nextRowLevelDelta;\n                }\n\n                // Add it and prep the next row\n                $draggee = $draggee.add($nextRow);\n                $nextRow = $nextRow.next();\n            }\n\n            // Are we dragging the last elements on the page?\n            this.draggingLastElements = !$nextRow.length;\n\n            // Do we have a maxLevels to enforce,\n            // and does it look like this draggee has descendants we don't know about yet?\n            if (\n                this.maxLevels &&\n                this.draggingLastElements &&\n                this.tableView.getMorePending()\n            ) {\n                // Only way to know the true descendant level delta is to ask PHP\n                this._loadingDraggeeLevelDelta = true;\n\n                var data = this._getAjaxBaseData(this.$targetItem);\n\n                Craft.postActionRequest('structures/get-element-level-delta', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        this._loadingDraggeeLevelDelta = false;\n\n                        if (this.dragging) {\n                            this._draggeeLevelDelta = response.delta;\n                            this.drag(false);\n                        }\n                    }\n                }, this));\n            }\n\n            return $draggee;\n        },\n\n        /**\n         * Returns the drag helper.\n         */\n        getHelper: function($helperRow) {\n            var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n                $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n                $tbody = $('<tbody/>').appendTo($table);\n\n            $helperRow.appendTo($tbody);\n\n            // Copy the column widths\n            this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n            var $helperCells = $helperRow.children();\n\n            for (var i = 0; i < $helperCells.length; i++) {\n                var $helperCell = $($helperCells[i]);\n\n                // Skip the checkbox cell\n                if ($helperCell.hasClass('checkbox-cell')) {\n                    $helperCell.remove();\n                    continue;\n                }\n\n                // Hard-set the cell widths\n                var $firstRowCell = $(this._$firstRowCells[i]);\n                var width = $firstRowCell[0].getBoundingClientRect().width;\n\n                $firstRowCell.css('width', width+'px');\n                $helperCell.css('width', width+'px');\n\n                // Is this the title cell?\n                if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                    this._$titleHelperCell = $helperCell;\n\n                    var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                    this._titleHelperCellOuterWidth = width;\n\n                    $helperCell.css('padding-' + Craft.left, this._basePadding);\n                }\n            }\n\n            return $outerContainer;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item.prev(), $item) !== false);\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            if (this._loadingDraggeeLevelDelta) {\n                return false;\n            }\n\n            return (this._getLevelBounds($item, $item.next()) !== false);\n        },\n\n        // Events\n        // -------------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            // Get the initial set of ancestors, before the item gets moved\n            this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n            // Set the initial target level bounds\n            this._setTargetLevelBounds();\n\n            // Check to see if we should load more elements now\n            this.tableView.maybeLoadMore();\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            this.base();\n            this._updateIndent();\n        },\n\n        /**\n         * On Insertion Point Change\n         */\n        onInsertionPointChange: function() {\n            this._setTargetLevelBounds();\n            this._updateAncestorsBeforeRepaint();\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._positionChanged = false;\n            this.base();\n\n            // Update the draggee's padding if the position just changed\n            // ---------------------------------------------------------------------\n\n            if (this._targetLevel != this._draggeeLevel) {\n                var levelDiff = this._targetLevel - this._draggeeLevel;\n\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    var $draggee = $(this.$draggee[i]),\n                        oldLevel = $draggee.data('level'),\n                        newLevel = oldLevel + levelDiff,\n                        padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                    $draggee.data('level', newLevel);\n                    $draggee.find('.element').data('level', newLevel);\n                    $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n                }\n\n                this._positionChanged = true;\n            }\n\n            // Keep in mind this could have also been set by onSortChange()\n            if (this._positionChanged) {\n                // Tell the server about the new position\n                // -----------------------------------------------------------------\n\n                var data = this._getAjaxBaseData(this.$draggee);\n\n                // Find the previous sibling/parent, if there is one\n                var $prevRow = this.$draggee.first().prev();\n\n                while ($prevRow.length) {\n                    var prevRowLevel = $prevRow.data('level');\n\n                    if (prevRowLevel == this._targetLevel) {\n                        data.prevId = $prevRow.data('id');\n                        break;\n                    }\n\n                    if (prevRowLevel < this._targetLevel) {\n                        data.parentId = $prevRow.data('id');\n\n                        // Is this row collapsed?\n                        var $toggle = $prevRow.find('> td > .toggle');\n\n                        if (!$toggle.hasClass('expanded')) {\n                            // Make it look expanded\n                            $toggle.addClass('expanded');\n\n                            // Add a temporary row\n                            var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                            // Remove the target item\n                            if (this.tableView.elementSelect) {\n                                this.tableView.elementSelect.removeItems(this.$targetItem);\n                            }\n\n                            this.removeItems(this.$targetItem);\n                            this.$targetItem.remove();\n                            this.tableView._totalVisible--;\n                        }\n\n                        break;\n                    }\n\n                    $prevRow = $prevRow.prev();\n                }\n\n                Craft.postActionRequest('structures/move-element', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        if (!response.success) {\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                            this.tableView.elementIndex.updateElements();\n                            return;\n                        }\n                        Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                        this.onPositionChange();\n\n                        // Were we waiting on this to complete so we can expand the new parent?\n                        if ($spinnerRow && $spinnerRow.parent().length) {\n                            $spinnerRow.remove();\n                            this.tableView._expandElement($toggle, true);\n                        }\n\n                        // See if we should run any pending tasks\n                        Craft.cp.runQueue();\n                    }\n                }, this));\n            }\n        },\n\n        onSortChange: function() {\n            if (this.tableView.elementSelect) {\n                this.tableView.elementSelect.resetItemOrder();\n            }\n\n            this._positionChanged = true;\n            this.base();\n        },\n\n        onPositionChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('positionChange');\n                this.settings.onPositionChange();\n            }, this));\n        },\n\n        onReturnHelpersToDraggees: function() {\n            this._$firstRowCells.css('width', '');\n\n            // If we were dragging the last elements on the page and ended up loading any additional elements in,\n            // there could be a gap between the last draggee item and whatever now comes after it.\n            // So remove the post-draggee elements and possibly load up the next batch.\n            if (this.draggingLastElements && this.tableView.getMorePending()) {\n                // Update the element index's record of how many items are actually visible\n                this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n                var $postDraggeeItems = this.$draggee.last().nextAll();\n\n                if ($postDraggeeItems.length) {\n                    this.removeItems($postDraggeeItems);\n                    $postDraggeeItems.remove();\n                    this.tableView.maybeLoadMore();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * Returns the min and max levels that the draggee could occupy between\n         * two given rows, or false if it’s not going to work out.\n         */\n        _getLevelBounds: function($prevRow, $nextRow) {\n            // Can't go any lower than the next row, if there is one\n            if ($nextRow && $nextRow.length) {\n                this._getLevelBounds._minLevel = $nextRow.data('level');\n            }\n            else {\n                this._getLevelBounds._minLevel = 1;\n            }\n\n            // Can't go any higher than the previous row + 1\n            if ($prevRow && $prevRow.length) {\n                this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n            }\n            else {\n                this._getLevelBounds._maxLevel = 1;\n            }\n\n            // Does this structure have a max level?\n            if (this.maxLevels) {\n                // Make sure it's going to fit at all here\n                if (\n                    this._getLevelBounds._minLevel != 1 &&\n                    this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n                ) {\n                    return false;\n                }\n\n                // Limit the max level if we have to\n                if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                    this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                    if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                        this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                    }\n                }\n            }\n\n            return {\n                min: this._getLevelBounds._minLevel,\n                max: this._getLevelBounds._maxLevel\n            };\n        },\n\n        /**\n         * Determines the min and max possible levels at the current draggee's position.\n         */\n        _setTargetLevelBounds: function() {\n            this._targetLevelBounds = this._getLevelBounds(\n                this.$draggee.first().prev(),\n                this.$draggee.last().next()\n            );\n        },\n\n        /**\n         * Determines the target level based on the current mouse position.\n         */\n        _updateIndent: function(forcePositionChange) {\n            // Figure out the target level\n            // ---------------------------------------------------------------------\n\n            // How far has the cursor moved?\n            this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n            // Flip that if this is RTL\n            if (Craft.orientation === 'rtl') {\n                this._updateIndent._mouseDist *= -1;\n            }\n\n            // What is that in indentation levels?\n            this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // Combine with the original level to get the new target level\n            this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n            // Contain it within our min/max levels\n            if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n                this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n                this._updateIndent._targetLevel = this._targetLevelBounds.min;\n            }\n            else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n                this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n                this._updateIndent._targetLevel = this._targetLevelBounds.max;\n            }\n\n            // Has the target level changed?\n            if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n                // Target level is changing, so update the ancestors\n                this._updateAncestorsBeforeRepaint();\n            }\n\n            // Update the UI\n            // ---------------------------------------------------------------------\n\n            // How far away is the cursor from the exact target level distance?\n            this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n            // What's the magnet impact of that?\n            this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n            // Put it on a leash\n            if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n                this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n            }\n\n            // Apply the new margin/width\n            this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n            this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n            this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n        },\n\n        /**\n         * Returns the indent size for a given level\n         */\n        _getLevelIndent: function(level) {\n            return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n        },\n\n        /**\n         * Returns the base data that should be sent with StructureController Ajax requests.\n         */\n        _getAjaxBaseData: function($row) {\n            return {\n                structureId: this.structureId,\n                elementId: $row.data('id'),\n                siteId: $row.find('.element:first').data('site-id')\n            };\n        },\n\n        /**\n         * Returns a row's ancestor rows\n         */\n        _getAncestors: function($row, targetLevel) {\n            this._getAncestors._ancestors = [];\n\n            if (targetLevel != 0) {\n                this._getAncestors._level = targetLevel;\n                this._getAncestors._$prevRow = $row.prev();\n\n                while (this._getAncestors._$prevRow.length) {\n                    if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                        this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                        this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                        // Did we just reach the top?\n                        if (this._getAncestors._level == 0) {\n                            break;\n                        }\n                    }\n\n                    this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n                }\n            }\n\n            return this._getAncestors._ancestors;\n        },\n\n        /**\n         * Prepares to have the ancestors updated before the screen is repainted.\n         */\n        _updateAncestorsBeforeRepaint: function() {\n            if (this._updateAncestorsFrame) {\n                Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n            }\n\n            if (!this._updateAncestorsProxy) {\n                this._updateAncestorsProxy = $.proxy(this, '_updateAncestors');\n            }\n\n            this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestorsProxy);\n        },\n\n        _updateAncestors: function() {\n            this._updateAncestorsFrame = null;\n\n            // Update the old ancestors\n            // -----------------------------------------------------------------\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n                // One less descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n                // Is it now childless?\n                if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                    // Remove its toggle\n                    this._updateAncestors._$ancestor.find('> td > .toggle:first').remove();\n                }\n            }\n\n            // Update the new ancestors\n            // -----------------------------------------------------------------\n\n            this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n            for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n                this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n                // One more descendant now\n                this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n                // Is this its first child?\n                if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                    // Create its toggle\n                    $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                        .insertAfter(this._updateAncestors._$ancestor.find('> td .move:first'));\n                }\n            }\n\n            this._ancestors = this._updateAncestors._newAncestors;\n\n            delete this._updateAncestors._i;\n            delete this._updateAncestors._$ancestor;\n            delete this._updateAncestors._newAncestors;\n        }\n    },\n    {\n        HELPER_MARGIN: 0,\n        LEVEL_INDENT: 44,\n        MAX_GIVE: 22,\n\n        defaults: {\n            onPositionChange: $.noop\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        $table: null,\n        $selectedSortHeader: null,\n\n        structureTableSort: null,\n\n        _totalVisiblePostStructureTableDraggee: null,\n        _morePendingPostStructureTableDraggee: false,\n\n        getElementContainer: function() {\n            // Save a reference to the table\n            this.$table = this.$container.find('table:first');\n            return this.$table.children('tbody:first');\n        },\n\n        afterInit: function() {\n            // Set the sort header\n            this.initTableHeaders();\n\n            // Create the Structure Table Sorter\n            if (\n                this.elementIndex.settings.context === 'index' &&\n                this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n                Garnish.hasAttr(this.$table, 'data-structure-id')\n            ) {\n                this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements(), {\n                    onSortChange: $.proxy(this, '_onStructureTableSortChange')\n                });\n            }\n            else {\n                this.structureTableSort = null;\n            }\n\n            // Handle expand/collapse toggles for Structures\n            if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n                this.addListener(this.$elementContainer, 'click', function(ev) {\n                    var $target = $(ev.target);\n\n                    if ($target.hasClass('toggle')) {\n                        if (this._collapseElement($target) === false) {\n                            this._expandElement($target);\n                        }\n                    }\n                });\n            }\n        },\n\n        initTableHeaders: function() {\n            var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n                $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n            for (var i = 0; i < $tableHeaders.length; i++) {\n                var $header = $tableHeaders.eq(i),\n                    attr = $header.attr('data-attribute');\n\n                // Is this the selected sort attribute?\n                if (attr === selectedSortAttr) {\n                    this.$selectedSortHeader = $header;\n                    var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                    $header\n                        .addClass('ordered ' + selectedSortDir)\n                        .on('click', $.proxy(this, '_handleSelectedSortHeaderClick'));\n                }\n                else {\n                    // Is this attribute sortable?\n                    var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                    if ($sortAttribute.length) {\n                        $header\n                            .addClass('orderable')\n                            .on('click', $.proxy(this, '_handleUnselectedSortHeaderClick'));\n                    }\n                }\n            }\n        },\n\n        isVerticalList: function() {\n            return true;\n        },\n\n        getTotalVisible: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._totalVisiblePostStructureTableDraggee;\n            }\n            else {\n                return this._totalVisible;\n            }\n        },\n\n        setTotalVisible: function(totalVisible) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._totalVisiblePostStructureTableDraggee = totalVisible;\n            }\n            else {\n                this._totalVisible = totalVisible;\n            }\n        },\n\n        getMorePending: function() {\n            if (this._isStructureTableDraggingLastElements()) {\n                return this._morePendingPostStructureTableDraggee;\n            }\n            else {\n                return this._morePending;\n            }\n        },\n\n        setMorePending: function(morePending) {\n            if (this._isStructureTableDraggingLastElements()) {\n                this._morePendingPostStructureTableDraggee = morePending;\n            }\n            else {\n                this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n            }\n        },\n\n        getLoadMoreParams: function() {\n            var params = this.base();\n\n            // If we are dragging the last elements on the page,\n            // tell the controller to only load elements positioned after the draggee.\n            if (this._isStructureTableDraggingLastElements()) {\n                params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n            }\n\n            return params;\n        },\n\n        appendElements: function($newElements) {\n            this.base($newElements);\n\n            if (this.structureTableSort) {\n                this.structureTableSort.addItems($newElements);\n            }\n\n            Craft.cp.updateResponsiveTables();\n        },\n\n        createElementEditor: function($element) {\n            Craft.createElementEditor($element.data('type'), $element, {\n                params: {\n                    includeTableAttributesForSource: this.elementIndex.sourceKey\n                },\n                onSaveElement: $.proxy(function(response) {\n                    if (response.tableAttributes) {\n                        this._updateTableAttributes($element, response.tableAttributes);\n                    }\n                }, this),\n                elementIndex: this.elementIndex\n            });\n        },\n\n        _collapseElement: function($toggle, force) {\n            if (!force && !$toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.removeClass('expanded');\n\n            // Find and remove the descendant rows\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                level = $row.data('level'),\n                $nextRow = $row.next();\n\n            while ($nextRow.length) {\n                if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                    if ($nextRow.data('level') <= level) {\n                        break;\n                    }\n\n                    if (this.elementSelect) {\n                        this.elementSelect.removeItems($nextRow);\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.removeItems($nextRow);\n                    }\n\n                    this._totalVisible--;\n                }\n\n                var $nextNextRow = $nextRow.next();\n                $nextRow.remove();\n                $nextRow = $nextNextRow;\n            }\n\n            // Remember that this row should be collapsed\n            if (!this.elementIndex.instanceState.collapsedElementIds) {\n                this.elementIndex.instanceState.collapsedElementIds = [];\n            }\n\n            this.elementIndex.instanceState.collapsedElementIds.push(id);\n            this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n            // Bottom of the index might be viewable now\n            this.maybeLoadMore();\n        },\n\n        _expandElement: function($toggle, force) {\n            if (!force && $toggle.hasClass('expanded')) {\n                return false;\n            }\n\n            $toggle.addClass('expanded');\n\n            // Remove this element from our list of collapsed elements\n            if (this.elementIndex.instanceState.collapsedElementIds) {\n                var $row = $toggle.parent().parent(),\n                    id = $row.data('id'),\n                    index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n                if (index !== -1) {\n                    this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                    this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                    // Add a temporary row\n                    var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                    // Load the nested elements\n                    var params = $.extend(true, {}, this.settings.params);\n                    params.criteria.descendantOf = id;\n\n                    Craft.postActionRequest('element-indexes/get-more-elements', params, $.proxy(function(response, textStatus) {\n                        // Do we even care about this anymore?\n                        if (!$spinnerRow.parent().length) {\n                            return;\n                        }\n\n                        if (textStatus === 'success') {\n                            var $newElements = $(response.html);\n\n                            // Are there more descendants we didn't get in this batch?\n                            var totalVisible = (this._totalVisible + $newElements.length),\n                                morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                            if (morePending) {\n                                // Remove all the elements after it\n                                var $nextRows = $spinnerRow.nextAll();\n\n                                if (this.elementSelect) {\n                                    this.elementSelect.removeItems($nextRows);\n                                }\n\n                                if (this.structureTableSort) {\n                                    this.structureTableSort.removeItems($nextRows);\n                                }\n\n                                $nextRows.remove();\n                                totalVisible -= $nextRows.length;\n                            }\n                            else {\n                                // Maintain the current 'more' status\n                                morePending = this._morePending;\n                            }\n\n                            $spinnerRow.replaceWith($newElements);\n                            this.thumbLoader.load($newElements);\n\n                            if (this.elementIndex.actions || this.settings.selectable) {\n                                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                                this.elementIndex.updateActionTriggers();\n                            }\n\n                            if (this.structureTableSort) {\n                                this.structureTableSort.addItems($newElements);\n                            }\n\n                            Craft.appendHeadHtml(response.headHtml);\n                            Craft.appendFootHtml(response.footHtml);\n                            Craft.cp.updateResponsiveTables();\n\n                            this.setTotalVisible(totalVisible);\n                            this.setMorePending(morePending);\n\n                            // Is there room to load more right now?\n                            this.maybeLoadMore();\n                        }\n                    }, this));\n                }\n            }\n        },\n\n        _createSpinnerRowAfter: function($row) {\n            return $(\n                '<tr data-spinnerrow>' +\n                '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n                '<div class=\"spinner\"/>' +\n                '</td>' +\n                '</tr>'\n            ).insertAfter($row);\n        },\n\n        _isStructureTableDraggingLastElements: function() {\n            return (\n                this.structureTableSort &&\n                this.structureTableSort.dragging &&\n                this.structureTableSort.draggingLastElements\n            );\n        },\n\n        _handleSelectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            // Reverse the sort direction\n            var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n                newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n            this.elementIndex.setSortDirection(newSortDir);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleUnselectedSortHeaderClick: function(ev) {\n            var $header = $(ev.currentTarget);\n\n            if ($header.hasClass('loading')) {\n                return;\n            }\n\n            var attr = $header.attr('data-attribute');\n\n            this.elementIndex.setSortAttribute(attr);\n            this._handleSortHeaderClick(ev, $header);\n        },\n\n        _handleSortHeaderClick: function(ev, $header) {\n            if (this.$selectedSortHeader) {\n                this.$selectedSortHeader.removeClass('ordered asc desc');\n            }\n\n            $header.removeClass('orderable').addClass('ordered loading');\n            this.elementIndex.storeSortAttributeAndDirection();\n            this.elementIndex.updateElements();\n\n            // No need for two spinners\n            this.elementIndex.setIndexAvailable();\n        },\n\n        _updateTableAttributes: function($element, tableAttributes) {\n            var $tr = $element.closest('tr');\n\n            for (var attr in tableAttributes) {\n                if (!tableAttributes.hasOwnProperty(attr)) {\n                    continue;\n                }\n\n                $tr.children('td[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n            }\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend(\n    {\n        searchTimeout: null,\n        searchMenu: null,\n\n        $container: null,\n        $elementsContainer: null,\n        $elements: null,\n        $addTagInput: null,\n        $spinner: null,\n\n        _ignoreBlur: false,\n\n        init: function(settings) {\n            // Normalize the settings\n            // ---------------------------------------------------------------------\n\n            // Are they still passing in a bunch of arguments?\n            if (!$.isPlainObject(settings)) {\n                // Loop through all of the old arguments and apply them to the settings\n                var normalizedSettings = {},\n                    args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n                for (var i = 0; i < args.length; i++) {\n                    if (typeof arguments[i] !== 'undefined') {\n                        normalizedSettings[args[i]] = arguments[i];\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                settings = normalizedSettings;\n            }\n\n            this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n            this.$addTagInput = this.$container.children('.add').children('.text');\n            this.$spinner = this.$addTagInput.next();\n\n            this.addListener(this.$addTagInput, 'input', $.proxy(function() {\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.searchTimeout = setTimeout($.proxy(this, 'searchForTags'), 500);\n            }, this));\n\n            this.addListener(this.$addTagInput, 'keypress', function(ev) {\n                if (ev.keyCode === Garnish.RETURN_KEY) {\n                    ev.preventDefault();\n\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options[0]);\n                    }\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'focus', function() {\n                if (this.searchMenu) {\n                    this.searchMenu.show();\n                }\n            });\n\n            this.addListener(this.$addTagInput, 'blur', function() {\n                if (this._ignoreBlur) {\n                    this._ignoreBlur = false;\n                    return;\n                }\n\n                setTimeout($.proxy(function() {\n                    if (this.searchMenu) {\n                        this.searchMenu.hide();\n                    }\n                }, this), 1);\n            });\n        },\n\n        // No \"add\" button\n        getAddElementsBtn: $.noop,\n\n        getElementSortAxis: function() {\n            return null;\n        },\n\n        searchForTags: function() {\n            if (this.searchMenu) {\n                this.killSearchMenu();\n            }\n\n            var val = this.$addTagInput.val();\n\n            if (val) {\n                this.$spinner.removeClass('hidden');\n\n                var excludeIds = [];\n\n                for (var i = 0; i < this.$elements.length; i++) {\n                    var id = $(this.$elements[i]).data('id');\n\n                    if (id) {\n                        excludeIds.push(id);\n                    }\n                }\n\n                if (this.settings.sourceElementId) {\n                    excludeIds.push(this.settings.sourceElementId);\n                }\n\n                var data = {\n                    search: this.$addTagInput.val(),\n                    tagGroupId: this.settings.tagGroupId,\n                    excludeIds: excludeIds\n                };\n\n                Craft.postActionRequest('tags/search-for-tags', data, $.proxy(function(response, textStatus) {\n                    // Just in case\n                    if (this.searchMenu) {\n                        this.killSearchMenu();\n                    }\n\n                    this.$spinner.addClass('hidden');\n\n                    if (textStatus === 'success') {\n                        var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                            $ul = $('<ul/>').appendTo($menu);\n\n                        var $li;\n\n                        for (var i = 0; i < response.tags.length; i++) {\n                            $li = $('<li/>')\n                                .appendTo($ul);\n\n                            $('<a data-icon=\"tag\"/>')\n                                .appendTo($li)\n                                .text(response.tags[i].title)\n                                .data('id', response.tags[i].id)\n                                .addClass(response.tags[i].exclude ? 'disabled' : '');\n                        }\n\n                        if (!response.exactMatch) {\n                            $li = $('<li/>').appendTo($ul);\n                            $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                        }\n\n                        $ul.find('a:not(.disabled):first').addClass('hover');\n\n                        this.searchMenu = new Garnish.Menu($menu, {\n                            attachToElement: this.$addTagInput,\n                            onOptionSelect: $.proxy(this, 'selectTag')\n                        });\n\n                        this.addListener($menu, 'mousedown', $.proxy(function() {\n                            this._ignoreBlur = true;\n                        }, this));\n\n                        this.searchMenu.show();\n                    }\n                }, this));\n            }\n            else {\n                this.$spinner.addClass('hidden');\n            }\n        },\n\n        selectTag: function(option) {\n            var $option = $(option);\n\n            if ($option.hasClass('disabled')) {\n                return;\n            }\n\n            var id = $option.data('id');\n            var title = $option.text();\n\n            var $element = $('<div/>', {\n                'class': 'element small removable',\n                'data-id': id,\n                'data-site-id': this.settings.targetSiteId,\n                'data-label': title,\n                'data-editable': '1'\n            }).appendTo(this.$elementsContainer);\n\n            var $input = $('<input/>', {\n                'type': 'hidden',\n                'name': this.settings.name + '[]',\n                'value': id\n            }).appendTo($element);\n\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Remove')\n            }).appendTo($element);\n\n            var $titleContainer = $('<div/>', {\n                'class': 'label'\n            }).appendTo($element);\n\n            $('<span/>', {\n                'class': 'title',\n                text: title\n            }).appendTo($titleContainer);\n\n            var margin = -($element.outerWidth() + 10);\n            this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n            var animateCss = {};\n            animateCss['margin-' + Craft.left] = 0;\n            this.$addTagInput.velocity(animateCss, 'fast');\n\n            this.$elements = this.$elements.add($element);\n\n            this.addElements($element);\n\n            this.killSearchMenu();\n            this.$addTagInput.val('');\n            this.$addTagInput.trigger('focus');\n\n            if (!id) {\n                // We need to create the tag first\n                $element.addClass('loading disabled');\n\n                var data = {\n                    groupId: this.settings.tagGroupId,\n                    title: title\n                };\n\n                Craft.postActionRequest('tags/create-tag', data, $.proxy(function(response, textStatus) {\n                    if (textStatus === 'success' && response.success) {\n                        $element.attr('data-id', response.id);\n                        $input.val(response.id);\n\n                        $element.removeClass('loading disabled');\n                    }\n                    else {\n                        this.removeElement($element);\n\n                        if (textStatus === 'success') {\n                            // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        }\n                    }\n                }, this));\n            }\n        },\n\n        killSearchMenu: function() {\n            this.searchMenu.hide();\n            this.searchMenu.destroy();\n            this.searchMenu = null;\n        }\n    },\n    {\n        defaults: {\n            tagGroupId: null\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend(\n    {\n        getElementContainer: function() {\n            return this.$container.children('ul');\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: (typeof config.autocomplete === 'undefined' || !config.autocomplete ? 'off' : null),\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            }\n            else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || `copytext-${Math.floor(Math.random() * 1000000000)}`;\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html':  option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                text: config.label\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n            else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<div class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: (allChecked || Craft.inArray(option.value, config.values)),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<div/>', {\n                'class': 'lightswitch',\n                tabindex: '0',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'switch',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            return $container.lightswitch();\n        },\n\n        createLightswitchField: function(config) {\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            var id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            var containerId = config.containerId || id + '-container';\n            var name = config.name || null;\n            var value = config.value || null;\n            var small = config.small || false;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                id: containerId,\n                'class': 'flex color-container'\n            });\n\n            var $colorPreviewContainer = $('<div/>', {\n                'class': 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            var $colorPreview = $('<div/>', {\n                'class': 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            var $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: value,\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000))+'-date';\n            var name = config.name || null;\n            var inputName = name ? name+'[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate:null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                var startDate = $startDate.datepicker('getDate');\n                var endDate = $endDate.datepicker('getDate');\n                var startTime = startDate ? startDate.getTime() : null;\n                var endTime = endDate ? endDate.getTime() : null;\n\n                var $options = $ul.find('a');\n                var $option;\n                var foundOption = false;\n\n                for (var i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            var btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            var $btn = $('<div class=\"'+btnClasses+'\" data-icon=\"date\"/>')\n                .text(Craft.t('app', 'All'));\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000))+'-time';\n            var name = config.name || null;\n            var inputName = name ? name+'[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name+'[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours()*3600 + value.getMinutes()*60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $('<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label || config.instructions) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                if (label) {\n                    var $label = $('<label/>', {\n                        'id': config.labelId || (config.id ? config.id + '-label' : null),\n                        'class': (config.required ? 'required' : null),\n                        'for': config.id,\n                        text: label\n                    }).appendTo($heading);\n\n                    if (siteId) {\n                        for (var i = 0; i < Craft.sites.length; i++) {\n                            if (Craft.sites[i].id == siteId) {\n                                $('<span class=\"site\"/>').text(Craft.sites[i].name).appendTo($label);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (config.instructions) {\n                    $('<div class=\"instructions\"/>').text(config.instructions).appendTo($heading);\n                }\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend(\n    {\n        uploader: null,\n        allowedKinds: null,\n        $element: null,\n        settings: null,\n        _rejectedFiles: {},\n        _extensionList: null,\n        _totalFileCounter: 0,\n        _validFileCounter: 0,\n\n        init: function($element, settings) {\n            this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n            this.$element = $element;\n            this.allowedKinds = null;\n            this._extensionList = null;\n            this._totalFileCounter = 0;\n            this._validFileCounter = 0;\n\n            settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n            var events = settings.events;\n            delete settings.events;\n\n            if (settings.allowedKinds && settings.allowedKinds.length) {\n                if (typeof settings.allowedKinds === 'string') {\n                    settings.allowedKinds = [settings.allowedKinds];\n                }\n\n                this.allowedKinds = settings.allowedKinds;\n                delete settings.allowedKinds;\n            }\n\n            settings.autoUpload = false;\n\n            this.uploader = this.$element.fileupload(settings);\n            for (var event in events) {\n                if (!events.hasOwnProperty(event)) {\n                    continue;\n                }\n\n                this.uploader.on(event, events[event]);\n            }\n\n            this.settings = settings;\n\n            this.uploader.on('fileuploadadd', $.proxy(this, 'onFileAdd'));\n        },\n\n        /**\n         * Set uploader parameters.\n         */\n        setParams: function(paramObject) {\n            // If CSRF protection isn't enabled, these won't be defined.\n            if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                // Add the CSRF token\n                paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            this.uploader.fileupload('option', {formData: paramObject});\n        },\n\n        /**\n         * Get the number of uploads in progress.\n         */\n        getInProgress: function() {\n            return this.uploader.fileupload('active');\n        },\n\n        /**\n         * Return true, if this is the last upload.\n         */\n        isLastUpload: function() {\n            // Processing the last file or not processing at all.\n            return this.getInProgress() < 2;\n        },\n\n        /**\n         * Called on file add.\n         */\n        onFileAdd: function(e, data) {\n            e.stopPropagation();\n\n            var validateExtension = false;\n\n            if (this.allowedKinds) {\n                if (!this._extensionList) {\n                    this._createExtensionList();\n                }\n\n                validateExtension = true;\n            }\n\n            // Make sure that file API is there before relying on it\n            data.process().done($.proxy(function() {\n                var file = data.files[0];\n                var pass = true;\n                if (validateExtension) {\n                    var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                    var fileExtension = matches[1];\n                    if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                        pass = false;\n                        this._rejectedFiles.type.push('“' + file.name + '”');\n                    }\n                }\n\n                if (file.size > this.settings.maxFileSize) {\n                    this._rejectedFiles.size.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                // If the validation has passed for this file up to now, check if we're not hitting any limits\n                if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                    this._rejectedFiles.limit.push('“' + file.name + '”');\n                    pass = false;\n                }\n\n                if (pass) {\n                    this._validFileCounter++;\n                    data.submit();\n                }\n\n                if (++this._totalFileCounter === data.originalFiles.length) {\n                    this._totalFileCounter = 0;\n                    this._validFileCounter = 0;\n                    this.processErrorMessages();\n                }\n            }, this));\n\n            return true;\n        },\n\n        /**\n         * Process error messages.\n         */\n        processErrorMessages: function() {\n            var str;\n\n            if (this._rejectedFiles.type.length) {\n                if (this._rejectedFiles.type.length === 1) {\n                    str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n                this._rejectedFiles.type = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.size.length) {\n                if (this._rejectedFiles.size.length === 1) {\n                    str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n                this._rejectedFiles.size = [];\n                alert(str);\n            }\n\n            if (this._rejectedFiles.limit.length) {\n                if (this._rejectedFiles.limit.length === 1) {\n                    str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n                }\n                else {\n                    str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n                }\n\n                str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n                this._rejectedFiles.limit = [];\n                alert(str);\n            }\n        },\n\n        humanFileSize: function(bytes) {\n            var threshold = 1024;\n\n            if (bytes < threshold) {\n                return bytes + ' B';\n            }\n\n            var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n            var u = -1;\n\n            do\n            {\n                bytes = bytes / threshold;\n                ++u;\n            }\n            while (bytes >= threshold);\n\n            return bytes.toFixed(1) + ' ' + units[u];\n        },\n\n        _createExtensionList: function() {\n            this._extensionList = [];\n\n            for (var i = 0; i < this.allowedKinds.length; i++) {\n                var allowedKind = this.allowedKinds[i];\n\n                if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                    for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                        var ext = Craft.fileKinds[allowedKind].extensions[j];\n                        this._extensionList.push(ext);\n                    }\n                }\n            }\n        },\n\n        destroy: function() {\n            this.$element.fileupload('destroy');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            dropZone: null,\n            pasteZone: null,\n            fileInput: null,\n            sequentialUploads: true,\n            maxFileSize: Craft.maxUploadSize,\n            allowedKinds: null,\n            events: {},\n            canAddMoreFiles: null,\n            headers: {'Accept' : 'application/json;q=0.9,*/*;q=0.8'},\n            paramName: 'assets-upload'\n        }\n    });\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend(\n    {\n        generateTargetValue: function(sourceVal) {\n            // Remove HTML tags\n            sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n            // Make it lowercase\n            sourceVal = sourceVal.toLowerCase();\n\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal);\n\n            // Handle must start with a letter and end with a letter/number\n            sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n            sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n            // Get the \"words\"\n            var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n            var uriFormat = words.join(Craft.slugWordSeparator);\n\n            if (uriFormat && this.settings.suffix) {\n                uriFormat += this.settings.suffix;\n            }\n\n            return uriFormat;\n        }\n    });\n"]}